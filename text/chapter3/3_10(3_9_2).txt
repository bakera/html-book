＜タイトル＞
フォーム　その2
＜リード＞
前セクションでは、フォームの基本となるfrom要素とinput要素を紹介しました。ここでは、フォームを構成するその他の要素を紹介します。

＜中見出し＞
button要素
＜本文＞
button要素は、ボタンを表します。input要素でもボタンを表現できますが、ラベルの指定の仕方が異なります。「送信」というボタンをinput要素とbutton要素で実装すると、それぞれ〓01〓のようになります。表示例は〓02〓となります。

〓01〓button要素の記述例
＜コード＞
<!-- inputとbutton要素の比較 -->
<input type="submit" value="送信">
<button type="submit">送信</button>

〓02〓〓01〓の表示例

＜本文＞
ボタンについては、input要素のほかに、a要素やdiv要素などを用いて表現するケースもありますが、基本的にはbutton要素で作成するようにします。ボタンを他の要素で作成した場合との比較については、Chapter4-4の事例1.で詳しく扱っているので、そちらを参照してください。

＜小見出し＞
内容モデル
＜本文＞
button要素の内容モデルはPhrasingです。ただし、子孫要素にinteractiveの内容を入れることはできません。また、tabindex属性が指定されている要素も子孫要素にできません。
button要素の内容はボタンのラベルとなります。単純なテキストを入れるだけでなく、たとえばimg要素を入れることもできるので、画像を用いた装飾が可能です。input要素によるボタンの表現はラベルにimg要素のようなマークアップを含めることができないので、button要素のほうが表現力に優れています。

＜小見出し＞
属性
＜本文＞
button要素には後述するフォームコントロールの共通属性を指定できるほか、ボタンを押した際のフォーム送信の挙動に関連する属性があります。

＜小見出し＞
type属性
＜本文＞
type属性は、ボタンが押されたときの振る舞いを指定します。この属性は列挙型属性であり、〓03〓の値を取ります。

〓03〓type属性の値
＜表＞
値	挙動
submit	フォームを送信する
reset	フォームをリセットする
button	何もしない(*)
＜下キャプ＞
(*) 主にJavaScriptと組み合わせて使用します

＜本文＞
type属性のデフォルト値はsubmitです。type属性を指定しない場合、送信ボタンとなることに注意してください。フォーム送信を意図しない場合には、明示的にtype=buttonを指定する必要があります。
type=resetを指定するとリセットボタンとなります。リセットボタンが押されると、対応するフォームに含まれるすべてのフォームコントロールが初期化されます。
type=buttonを指定すると、ボタンを押しても何も起こりません。JavaScriptで独自の挙動を実装する際に利用します。先に述べた通り、デフォルトはbuttonではなくsubmitであることに注意してください。

＜memo＞
誤ってリセットボタンを押すと、入力内容のすべてが消えてしまい、取り返しが付かなくなります。リセットボタン自体には、押されたときに警告を出すような機能は備わっていません。必要に応じてJavaScriptなどで動作を制御し、本当にリセットするかどうかを確認するのも1つの方法です。
そもそも、必要のないリセットボタンは配置しないのが賢明と言えます。

＜小見出し＞
value属性
＜本文＞
button要素にname属性とvalue属性を指定すると、ボタンを押した際、その名前と値のペアがフォーム送信されます。複数のボタンがあるフォームでは、どのボタンが押されたのかを識別するために利用することがあります。input要素のボタンとは異なり、このvalue属性はボタンのラベルには利用されません。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
button要素のデフォルトのARIAロールはbuttonです。スクリーンリーダーでは、ボタンのラベルとともに、ボタンであることが読み上げられます。逆に、ボタンに適切なラベルが与えられていない場合、単に「ボタン」としか読み上げられず、何をするボタンなのか伝わりません。type=buttonのボタンには、JavaScriptによってさまざまな機能を与えることができます。ボタンの機能によっては、WAI-ARIAのステート（状態）を付与することによってセマンティクスを強化できる場合があります。たとえば、トグルボタンであればaria-pressed属性を、ボタンがメニューを開閉するものであればaria-expanded属性の利用を検討するとよいでしょう。WAI-ARIAの詳細はChapter4-2を参照してください。

＜memo＞
特に、アイコンボタンなど、ボタンに画像しか入っていない場合は、画像に代替テキストを指定して適切なラベルテキストを設定する必要があります。

＜中見出し＞
select要素
＜本文＞
select要素は、選択肢から選択するためのコンボボックス、あるいはリストボックスのコントロールを表します。子要素として、option要素で選択肢を記述します。〓04〓は選択肢からペットの種類を選択させる例です。表示例は〓05〓となります。

〓04〓select要素の記述例
＜コード＞
<label>ペットを選びます:
  <select name="pet" required>
    <option value="" selected>--ペットの選択肢--</option>
    <option value="dog">いぬ</option>
    <option value="cat">ねこ</option>
    <option value="parakeet">インコ</option>
  </select>
</label>

〓05〓04〓の表示例

＜本文＞
フォームを送信すると、選択されているoption要素のvalue属性の値がサーバーに送信されます。初期状態で選択されている状態にする場合は、option要素にselected属性を指定します。詳しくはoption要素を参照してください。

＜小見出し＞
内容モデル
＜本文＞
select要素の内容モデルはoption要素またはoptgroup要素です。optgroup要素を使用すると、選択肢をグループ化してグループのラベルを表示できます。詳しくはoptgroup要素を参照してください。

＜小見出し＞
属性
＜本文＞
select要素には後述するフォームコントロールの共通属性を指定できるほか、size属性、multiple属性を指定できます。また、input要素と同様にrequired属性を指定できます。

＜丸見出し＞
size属性
＜本文＞
size属性は、ユーザーに一度に見せる選択肢の数を指定します。属性を指定しない場合のデフォルト値は"1"で、この場合はコンボボックスとして表現されます。多くのブラウザーではプルダウン式のリストとして表現されますが、モバイル端末ではドラムロール型のUIで表現されることもあります。UIの表現方法は仕様で規定されていないため、別の表現方法になる可能性もあります。
size属性に"2"以上の値を指定すると、リストボックスとして表現されます。多くのブラウザーではリストボックスの高さが広がり、複数の選択肢が一度に見えるようになります〓06〓。
select要素のコントロールは提示した選択肢から選ばせる機能を提供しますが、ラジオボタンでも同じ機能を実現できます。見た目や操作方法が異なるので、ユーザーにとって使いやすいと思われるほうを選択するとよいでしょう。

〓06〓リストボックスの表示例

＜丸見出し＞
multiple属性
＜本文＞
multiple属性を指定すると、選択肢の複数選択が可能になります。multiple属性はブール型属性です。
multiple属性が指定されている場合、多くのブラウザーでは、size属性の値が"1"であっても選択肢のすべてを展開して表示します。
複数選択をする場合、ctrlもしくはcmdキーを押しながらリスト項目を選択するといった独自の操作が必要になります〓07〓。この操作に慣れているユーザーは少なく、複数選択が可能なコントロールはあまり使われません。複数選択が必要な場合は、チェックボックスによる提供を検討するとよいでしょう。

〓07〓multiple属性（複数選択したものに差し替え）

＜丸見出し＞
required属性
＜本文＞
input要素と同様にrequired属性を指定できますが、select要素で利用する場合、以下の条件をすべて満たす必要があります。

・multiple属性が指定されていない
・size属性の値が1である（size属性が省略されている場合を含む）
・最初に登場するoption要素の親がselect要素である（optgroup要素ではない）
・最初に登場するoption要素のvalue属性の値が空文字列である

このとき、最初に登場するoption要素を「プレースホルダーラベルオプション（placeholder label option）」と呼びます。required属性を指定した場合、プレースホルダーラベルオプションを選択している状態は未入力状態とみなされ、この状態で送信するとエラーになります。
selected属性は無関係であることに注意してください。また、プレースホルダーラベルオプションは、value属性の値が空文字列であり、かつ先頭になければなりません。〓08〓は不適切な例です。

〓08〓不適切なoption要素の記述例
＜コード＞
<select name="pet" required>
  <option value="dog">いぬ</option>
  <option value="cat">ねこ</option>
  <option value="parakeet">インコ</option>
  <option value="" selected>その他・無回答</option>
</select>

＜本文＞
この例では、初期状態で「その他・無回答」が選ばれ、かつvalue属性の値が空文字列です。しかし、このoption要素は先頭にはないため、プレースホルダーラベルオプションとはみなされません。そのため、どの選択肢を選んで送信してもエラーになりません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
select要素のデフォルトのARIAロールは、size属性とmultiple属性によって変化します。どちらの属性もないか、またはsize=1の場合、ロールはcomboboxです。スクリーンリーダーは、select要素に関連付けされたラベルを読み上げ、さらに「コンボボックス」などと読み上げることがあります。
size属性が2以上、またはmultiple属性がある場合はlistboxロールとなります。スクリーンリーダーは、select要素に関連付けられたラベルを読み上げ、さらに「リストボックス」などと読み上げることがあります。
いずれの場合も、ラベルが関連付けされていないと何を選択するのか伝わらないため、label要素を適切に使用して関連付けておくべきです。

＜中見出し＞
option要素
＜本文＞
option要素はselect要素やdatalist要素とセットで扱い、個々の選択肢を表現します。用例はselect要素、datalist要素を参照してください。

＜小見出し＞
内容モデル
＜本文＞
option要素の内容はテキストです。ただし、label属性とvalue属性の両方が指定されている場合には、option要素の内容モデルはNothingとなり、内容を含めることはできません。

＜小見出し＞
属性
＜本文＞
option要素には、後述するフォームコントロールの共通属性のうちdisabled属性を指定できます。また、value属性、label属性、selected属性を指定できます。

＜丸見出し＞
value属性
＜本文＞
value属性は、フォーム送信時に送信される値を指定します。この属性を省略した場合は、要素の内容となっているテキストが値として送信されます。

＜丸見出し＞
label属性
＜本文＞
label属性を指定すると、選択肢として表示されるラベルを指定できます。この属性を省略した場合は、要素の内容となっているテキストがラベルとなります。通常はこの属性を使用する必要はありません。

＜丸見出し＞
selected属性
＜本文＞
selected属性を指定すると、そのoption要素がデフォルトで選択されている状態になります。selected属性はブール型属性です。

＜小見出し
アクセシビリティ上の注意点
＜本文＞
option要素のデフォルトのARIAロールは、要素のコンテキストによって異なります。listitemロールであるselect要素が祖先の場合、または祖先がdatalist要素である場合は、optionロールとなります。comboboxロールであるselect要素が祖先の場合、特定のロールは持たず、コンボボックスの一部として扱われます。この場合、ブラウザーによっては内部的にmenuitemロールとして扱うことがあります。

＜中見出し＞
optgroup要素
＜本文＞
select要素の中でoptgroup要素を使用すると、option要素をグループ化できます。label属性が必須であり、これがグループの名前となります〓09〓。表示例は〓10〓となります。

〓09〓optgroup要素の記述例
<select>
  <optgroup label="ほ乳類">
    <option>いぬ</option>
    <option>ねこ</option>
  </optgroup> 
  <optgroup label="鳥類">
    <option>インコ</option>
  </optgroup>
</select>

〓10〓〓09〓の表示例

＜本文＞
すべてのoption要素をoptgroup要素に入れる必要はなく、optgroup要素に属さないoption要素を混在させることもできます〓11〓。表示例は〓12〓となります。

〓11〓optgroup要素に属さないoption要素を混在させた例
＜コード＞
<select>
  <optgroup label="ほ乳類">
    <option>いぬ</option>
    <option>ねこ</option>
  </optgroup> 
  <option>その他</option>
</select>

〓12〓〓11〓の表示例

＜小見出し＞
内容モデル
＜本文＞
optgroup要素の内容モデルは0個以上のoption要素です。option要素以外のものを入れることはできません。また、optgroup要素を入れ子にできません。

＜memo＞
option要素は0個でもよいため、意味があるかはともかく、空のoptgroup要素を使うことも可能です。

＜小見出し＞
属性
＜本文＞
optgroup要素には、label属性とdisabled属性を指定できます。optgroup要素はあくまでグループのラベルを表現するもので、この要素自体は選択できません。そのため、selected属性やvalue属性はありません。

＜丸見出し＞
label属性
＜本文＞
label属性でグループの名前を指定します。この属性は必須で、省略できません。

＜丸見出し＞
disabled属性
＜本文＞
disabled属性については、「フォームコントロールの共通属性（P000）」を参照してください。optgroup要素の場合、この要素自身はもともと選択できませんが、disabled属性を指定すると、子のoption要素すべてが無効の状態になります。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
optgroup要素のデフォルトのARIAロールはgroupです。スクリーンリーダーでは、ラベルを読み上げたあとに「グループ」などと読み上げ、選択肢のグループの名前がわかるように伝えるでしょう。

＜中見出し＞
datalist要素
＜本文＞
datalist要素は、ユーザーに提案する定義済み候補のリストを示します。input要素と組み合わせて使用して、対応するinput要素の入力時に入力補完の候補を示します。datalist要素の子孫要素であるoption要素が候補として提示されます。
datalist要素にid属性を指定し、input要素のlist属性でそのIDを指定することにより、候補と結び付けます。〓13〓は、テキスト入力欄に対して入力補完候補を提示する例です。表示例は〓14〓となります。

〓13〓datalist要素の記述例
＜コード＞
<label for="ice-cream-choice">アイスクリームのフレーバー:</label>
<input list="ice-cream-flavors" id="ice-cream-choice" name="ice-cream-choice">

<datalist id="ice-cream-flavors">
  <option value="Chocolate">
  <option value="Coconut">
  <option value="Mint">
  <option value="Strawberry">
  <option value="Vanilla">
</datalist>

〓14〓〓13〓の表示例

＜本文＞
この例では、ユーザーは選択肢から選ぶこともできます。また、選択肢を無視した任意のテキストの入力もできます。
テキスト入力以外にも、日付の入力、範囲の入力、カラーピッカーのコントロールなどに対して候補を提示できます。datalist要素による補完候補を利用できるのは、type属性がtext、search、url、tel、email、date、month、week、time、datetime-local、number、range、colorの場合です。
type=rangeに適用すると、候補リストを表示するのではなく、提示された場所に目盛りが表示され、そこへスナップするような動作になります。具体的な使用例は、Chpter3-9のtype=rangeを参照してください。

＜小見出し＞
内容モデル
＜本文＞
datalist要素の内容モデルは、option要素もしくはPhrasingです。通常はoption要素を入れますが、datalist要素に対応していないブラウザーに対するフォールバックコンテンツを入れることもできます。〓15〓はその一例です。

〓15〓datalist要素に未対応のブラウザにおける記述例
＜コード＞
<label>
  動物の名前を入力してください:
  <input name="animal" list="animals">
</label>
<datalist id="animals">
  <label>
    もしくは、以下から選択してください:
    <select name="animal">
      <option value="">--選んでください--</option>
      <option>猫</option>
      <option>犬</option>
    </select>
  </label>
</datalist>

＜本文＞
datalist要素に対応していないブラウザーの場合、内容であるlabel要素およびselect要素が表示され、option要素はselect要素の選択肢となります。
datalist要素に対応したブラウザーの場合、datalist要素の内容は表示されず、子孫のoption要素がinput要素の入力補完候補として利用されることになります。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
datalist要素のデフォルトのARIAロールはlistboxです。datalist要素と結び付けられたコントロールにフォーカスすると、スクリーンリーダーは「候補リストが表示されました」などと読み上げ、補完候補があることをユーザーに伝えます。

＜中見出し＞
textarea要素
＜本文＞
textarea要素は、複数行のテキストを入力・編集するフォームコントロールを表します。type=textを持つinput要素と異なり、改行が入力可能です。コメント欄やお問い合わせフォームの本文入力欄など、ユーザーが自由記述のテキストを入力するときに利用します。
〓16〓はtextarea要素を使用した例です。表示例は〓17〓となります。

〓16〓textarea要素の記述例
＜コード＞
<label for="advanced">高度な例:
  <textarea id="advanced" name="advanced"
            rows="3" cols="33" maxlength="200">
  rows属性とcols属性でサイズが指定されたtextarea要素。最大文字数は、maxlengthによって200に制限されています。
  </textarea>
</label>

〓17〓〓16〓の表示例

＜小見出し＞
内容モデル
＜本文＞
textarea要素の内容モデルはテキストです。type=textのinput要素ではテキストの初期値をvalue属性で指定しますが、textarea要素では要素の内容が初期値となります。改行を含めることも可能です。

＜小見出し＞
属性
＜本文＞
textarea要素にはフォームコントロールの共通属性を指定できるほか、type=textのinput要素と同様に、以下の属性を指定できます。詳しくはinput要素を参照してください。

・maxlength属性
・minlength属性
・required属性
・placeholder属性
・dirname属性

古いHTML4ではtextarea要素にmaxlength属性が存在しませんでしたが、現在のHTMLでは指定できるようになりました。なお、textarea要素ではpattern属性を使用できないことに注意してください。この他に、textarea要素の挙動を制御するrows属性、cols属性、wrap属性が利用できます。

＜丸見出し＞
rows属性とcols属性
＜本文＞
rows属性を用いて、入力欄を表示する行数を指定できます。指定がない場合のデフォルト値は"2"で、2行分が確保されます。この属性の指定は、入力可能な行数を制限するものではなく、指定した行数を超えた入力ができます。
同様に、cols属性で1行あたりの文字数を指定できます。指定がない場合のデフォルト値は"20"で、20文字分の幅が確保されます。後述のwrap属性を使用してwrap=hardを指定した場合、折り返しの文字数としても利用されます。詳しくはwrap属性を参照してください。
input要素のsize属性と同様、cols属性で指定した文字数が必ずしも入るのではないことに注意してください。文字の幅は文字によって異なるため、使用しているフォントの文字幅の平均によって幅が計算されます。
なお、textarea要素の幅や高さは、スタイルシートによる設定も可能であり、設置した場合、rows属性やcols属性による指定を上書きします。
多くの場合、幅や高さはブラウザー上で変更可能です。文字数と幅や高さによっては、スクロールバーを表示することがあります。

＜丸見出し＞
wrap属性
＜本文＞
wrap属性を指定すると、フォーム送信時の長い行の折り返し処理を制御できます。wrap属性は列挙型属性で、"soft"または"hard"のいずれかを指定します。"hard"を指定すると、フォーム送信時に、入力欄の端で自動的に折り返した部分に改行（CRLF, %0d%0a）が挿入されます。指定がない場合のデフォルト値は"soft"です。この場合、長い行が入力欄の端で自動的に折り返しても、その部分に改行は挿入されません。〓18〓はwrap=hardを指定した例です。表示例は〓19〓となります。

〓18〓wrap=hardを指定した例
＜コード＞
<textarea name="wrapped" wrap="hard" cols="10">
this is a textarea element
</textarea>

〓19〓〓18〓の表示例

＜本文＞
内容のテキストに改行は含まれていませんが、wrap="hard"とcols="10"が指定されているため、10文字ごとに折り返されて改行が挿入されます。GETメソッドで送信すると〓20〓のようになります。なお、wrap=hardを指定した場合はcols属性が必須です。

〓20〓GETメソッドで送信した例
＜コード＞
wrapped=this+is+a+%0D%0Atextarea+%0D%0Aelement%0D%0A

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
textarea要素のデフォルトのARIAロールはtextboxです。多くのスクリーンリーダーは、ラベルを読み上げたのち、「テキストを編集」「複数行テキスト入力」などと読み上げ、そのあとに入力されている内容を読み上げます。
ラベルが指定されていないと何を入力すべきかわからなくなってしまいます。label要素と組み合わせて確実にラベルを指定することを奨めます。

＜中見出し＞
output要素
＜本文＞
output要素は、アプリケーションによって実行された処理の結果や、ユーザー操作によって得られた結果を表します。主にJavaScriptの実行結果の出力先として利用します。実行結果を表すものとしてはsamp要素もありますが、samp要素は実行済みのサンプルを静的に表現するものです。output要素は、動的な実行結果の出力先のプレースホルダーとして利用します。
実行結果の出力先にはspan要素など他の要素も利用できますが、output要素には、JavaScriptによる動的処理に適した以下のような機能があります。

・valueプロパティを通じて値の読み書きができる（ただし、HTMLを書くときにvalue属性の指定はできません）
・id属性だけでなく、name属性でも名前を付けることができる
・デフォルトのARIAロールがstatusであり、値が変化した際に支援技術に対して通知する機能を持つ
・フォーム内に配置した場合、同一フォーム内のリセットボタンで値を初期値に戻すことができる

〓22〓は、簡単な足し算を行う電卓アプリケーションの例です。表示例は〓23〓となります。

〓22〓output要素の記述例
＜コード＞
<form onsubmit="return false" oninput="o.value = a.valueAsNumber + b.valueAsNumber">
  <input id="a" type="number" step="any"> +
  <input id="b" type="number" step="any"> =
  <output id="o" for="a b"></output>
</form>

〓23〓〓22〓の表示例

＜小見出し＞
内容モデル
＜本文＞
output要素の内容モデルはPhrasingです。出力結果に強調などのマークアップを含めることもできます。ただし、output要素のvalueプロパティでは内容のテキストしか取得・設定できません。マークアップを含む内容を扱う場合には、valueプロパティを使わずにDOM操作によって処理する必要があります。

＜小見出し＞
属性
＜本文＞
output要素にはfor属性、form属性、name属性を指定できます。form属性、name属性については、フォームコントールの共通属性（P000）を参照してください。

＜丸見出し＞
for属性
＜本文＞
for属性を利用すると、このoutput要素に関連する入力欄を示すことができます。for属性の属性値には、対応する要素のIDをスペース区切りで記述します。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
output要素のデフォルトのARIAロールはstatusです。statusロールはライブリージョンであり、内容が変化すると支援技術に通知されます。
〓22〓では、ボタンを押すと数値が増加して、その数値が読み上げられます。ボタンからフォーカスを移動しなくても結果を知ることができるため、ユーザーはボタンを連打しながら数値を確認できます。
デフォルトでは、ARIA属性aria-live=politeとaria-atomic=trueが設定されている状態と同じになります。つまり、output要素の内容が変化すると、他の読み上げが一段落したあとで、output要素の内容すべてを読み上げます。ライブリージョンの詳細についてはChapter4-2を参照してください。
また、output要素は「ラベル付け可能要素（labelable element）」に分類されているため、必要に応じてlabel要素と関連付けることもできます。出力内容を単独で読み上げても理解しにくい場合には、ラベルを付けることを検討してもよいでしょう。

＜中見出し＞
progress要素
＜本文＞
progress要素は、タスクの進捗状況を表します。これは通常、プログレスバーとしてレンダリングされます。〓24〓は、進捗率が半分の状態のプログレスバーを表示した例です。表示例は〓25〓となります。

〓24〓progress要素の記述例
＜コード＞
<progress value="0.5">50%</progress>

〓25〓〓24〓の表示例

＜本文＞
この要素は動的な進捗状況を表現するものであることに注意してください。単に割合をグラフとして表示したい場合には、後述のmeter要素などを利用します。 progress要素を実際に利用する場合は、進捗状況を動的に反映させるために、JavaScriptからvalueプロパティの値を操作します。
〓26〓では、updateProgress()関数を外部から呼び出すことでprogress要素の値を更新できます。

〓26〓外部JavaScriptを利用した記述例
＜コード＞
<progress id="progress_bar" max="100" value="0"><span>0</span>%</progress>
  <script>
  const progressBar = document.getElementById('progress_bar');
  function updateProgress(newValue) {
    progressBar.value = newValue;
    progressBar.firstElementChild.textContent = newValue;
  }
</script>

＜小見出し＞
内容モデル
＜本文＞
progress要素の内容モデルはPhrasingです。ただし、progress要素を子孫に持つことはできません。
progress要素の内容は表示されませんが、progress要素を理解しないブラウザーに対するフォールバックとして機能します。先の例のように、テキストを入れて進捗状況がわかるようにしておき、プログレスバーの更新と同時に内容のテキストも更新するとよいでしょう。

＜小見出し＞
属性
＜本文＞
progress要素にはvalue属性とmax属性を指定できます。

＜丸見出し＞
value属性
＜本文＞
value属性で進捗の現在値を表します。属性値は任意の浮動小数点数です。max属性が指定されていない場合、value属性は0.0〜1.0のいずれかの値を取り、1.0の場合に進捗が完了したことになります。負の値も指定可能ですが、プログレスバー上では負の値は表現されず、0のときと同じ表示になります。
value属性を省略すると、値は「不定（indeterminate）」となります。これは、progress要素で表すタスクが処理中であるものの、完了が予測できない状態を表します。多くのブラウザーは、プログレスバー自体がローディング中であるような表示をします。

＜丸見出し＞
max属性
＜本文＞
max属性で進捗の最大値を指定できます。max属性が指定されていると、value属性の値はmax属性の値に対する割合として扱われます。たとえば、max=100を指定すると、value=50のときに半分、value=100のときに最大となります。
なお、max属性に0以下の値の指定はできません。0や負の値を指定すると、不正な値とみなされてmax属性は無視されます（その結果として初期値が採用され、max=1.0を指定した場合と同じように動作します）。
progress要素にmin属性はありません。最小値は変更できず、常に0となります。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
progress要素のデフォルトのARIAロールはprogressbarです。スクリーンリーダーは、進捗の割合を読み上げた上でこのコントロールの名前を読み上げます。たとえば、「50% 進行インジケーター」のように読み上げることがあります。
progress要素は「ラベル付け可能要素（labelable element）」に分類されているため、必要に応じてlabel要素と関連付けることもできます。文脈から何を表しているのかがわかれば問題ありませんが、単独で読み上げても理解しにくい場合には、ラベルを付けることを検討してもよいでしょう。

＜memo＞
ライブリージョンの機能は持たないため、進捗状況が変化しても自動的に読み上げられるわけではありません（プログレスバーが変化するたびに読み上げられると煩わしい場合が多いでしょう）。

＜中見出し＞
meter要素
＜本文＞
meter要素は、一定範囲に収まるスカラー量や、割合で表現できる値を表します。たとえば、ディスク使用量や投票率などです。これは通常、棒グラフのようなゲージとしてレンダリングされます。〓27〓は0.75（75%、3/4）のゲージを表示する例です。表示例は〓28〓となります。

＜memo＞
見た目は前述のprogress要素と似た表現になります。動的に変化する進捗状況を表現したい場合にはprogress要素を、そうでない場合にはmeter要素を使います。

〓27〓meter要素の記述例
＜コード＞
<meter value="0.75">0.75</meter>

〓28〓〓27〓の表示例

＜小見出し＞
内容モデル
＜本文＞
meter要素の内容モデルはPhrasingです。ただし、meter要素を子孫に持つことはできません。
meter要素の内容は表示されませんが、meter要素を理解しないブラウザーに対するフォールバックとして機能します。先の例のように、テキストを入れて進捗状況がわかるようにしておくとよいでしょう。

＜小見出し＞
属性
＜本文＞
meter要素の属性は以下になります。

＜丸見出し＞
value属性
＜本文＞
value属性で割合を表します。属性値は任意の浮動小数点数です。min属性やmax属性が指定されていない場合、value属性は0.0〜1.0までのいずれかの値をとり、1.0の場合に最大となります。
負の値を指定可能ですが、min属性で指定した最小値（min属性がない場合は0）を下回る値は表現できず、最小値のときと同じ表示になります。同様に、max属性で指定した最大値（max属性がない場合は1）を超える値を指定すると、最大値のときと同じ表示になります。

＜丸見出し＞
min属性、max属性
＜本文＞
min属性、max属性を指定すると、それぞれゲージの最小値、最大値を表します。指定できる値は任意の浮動小数点数で、負の値も設定可能です。ただし、min属性とmax属性の両方を指定する場合、min属性の値よりもmax属性の値のほうが大きくなくてはなりません。
〓29〓は、-100℃から200℃までの温度を表現するゲージの例です。

〓29〓温度ゲージの例
＜コード＞
<meter min="-100" max="200" value="10">10℃</meter>

＜丸見出し＞
low属性、high属性
＜本文＞
ときには、値が一定の範囲を超えた場合にゲージの見た目を変えて、ユーザーに注意を促したいこともあるでしょう。このような場合、low属性とhigh属性を使用すると、低い値、高い値の閾値を指定できます。low属性で指定した値以下の値は、低い値であるとみなされます。同様に、high属性で指定した値以上の値は、高い値であるとみなされます。
前出の温度ゲージに閾値を追加し、0℃以下を低温、100℃以上を高温とみなすようにすると、〓30〓のようになります。50℃は適温と判断されて通常の表示となり、-50℃は低温、150℃は高温と判断されて色が変化しています。

〓30〓low属性、high属性の記述例
＜コード＞
<meter min="-100" low="0" high="100" max="200" value="10">10℃</meter>

＜本文＞
value属性の値を-50、50、150にしたもの〓31〓を並べてみると、〓32〓のようになります。
〓31〓value属性の値を-50、50、150に設定
＜コード＞
<meter min="-100" low="0" high="100" max="200" value="-50">-50℃</meter>
<meter min="-100" low="0" high="100" max="200" value="50">50℃</meter>
<meter min="-100" low="0" high="100" max="200" value="150">150℃</meter>

〓32〓Chromeで表示された〓31〓の表示例

＜memo＞
紙面の都合上、見難いかもしれませんが、ゲージが3本並んでおり、左から順にバーが長くなっていく。中央のゲージは緑色で、左右のゲージは黄色で表現されています。

＜丸見出し＞
optimum属性
＜本文＞
optimum属性は、どのレンジの値が適切な値であるのか指定します。先に挙げたlow属性、high属性の使用例では、中間のレンジを適温（適切な値）としていました。optimum属性を利用すると、より低い値や、より高い値を適切な値にできます。
属性値は浮動小数点数で指定し、その値を含むレンジが適切な値であるとみなされます。先の例でoptimum=-100を指定すると〓33〓のようになります。表示例は〓34〓となります。-50℃は適温と判断されて通常の表示となり、50℃は高温と判断されて色が変化しています。150℃は超高温と判断され、さらに色が変化しています。

〓33〓optimum属性の記述例
＜コード＞
<meter min="-100" low="0" high="100" max="200" optimum="-100" value="-50">-50℃</meter>
<meter min="-100" low="0" high="100" max="200" optimum="-100" value="50">50℃</meter>
<meter min="-100" low="0" high="100" max="200" optimum="-100" value="150">150℃</meter>

〓34〓Chromeで表示された〓33〓の表示例

＜memo＞
紙面の都合上、見難いかもしれませんが、ゲージが3本並んでおり、左から順にバーが長くなっていく。左のゲージは緑、中央のゲージは黄色、右のゲージは赤で表現されています。

＜本文＞
optimum属性を省略した場合の初期値は、最小値と最大値の中間の値となります。言い換えればmin属性とmax属性の値の平均です。low属性とhigh属性の平均値ではないことに注意してください。
〓35〓は、〓30〓のmin属性とmax属性の値を変更し、温度の範囲を-273℃から1000℃とした例です。optimum属性は省略されています。この例ではoptimum属性を省略しているため、min属性とmax属性の値の中間である363.5という値が含まれるレンジ、すなわちhigh属性の値以上のレンジが適切であるとみなされます。

〓35〓温度の範囲を変更
＜コード＞
<meter min="-273" max="1000" value="50" low="0" high="100">50℃</meter>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
meter要素にデフォルトのARIAロールはありません。スクリーンリーダーは、ゲージの割合を読み上げた上で「レベルインジケーター」などと読み上げることがあります。lowおよびhigh属性を使用しているケースについては、特別な読み上げはなされず、値が特定のしきい値を超えていることが伝わらない場合があります。
meter要素は「ラベル付け可能要素（labelable element）」に分類されているため、必要に応じてlabel要素と関連付けることもできます。文脈から何を表しているのかがわかれば問題ありませんが、単独で読み上げても理解しにくい場合には、ラベル付けを検討してもよいでしょう。

＜中見出し＞
fieldset要素
＜本文＞
fieldset要素は、一連のフォームコントロールをグループ化します。legend要素を使用してグループにラベルを付けることもできます。主にラジオボタンやチェックボックスのグループにラベルを付けるのに使いますが、他の種類のコントロールをグループ化できます。〓36〓は、いくつかの種類のコントロールをグループ化してラベルを付けた例です。表示例は〓37〓となります。

〓36〓fieldset要素の記述例
＜コード＞
<fieldset>
  <legend>ディスプレイ表示</legend>
  <p><label><input type="radio" name="c" value="0" checked>黒地に白字</label>
  <p><label><input type="radio" name="c" value="1">白地に黒字</label>
  <p><label><input type="checkbox" name="g">グレースケールを使用する</label>
  <p><label>コントラストを強調する <input type="range" name="e" list="contrast" min="0" max="100" value="0" step="1"></label>
  <datalist id="contrast">
    <option label="Normal" value="0">
    <option label="Maximum" value="100">
  </datalist>
</fieldset>

〓37〓〓36〓の表示例

＜小見出し＞
内容モデル
＜本文＞
fieldset要素の内容モデルは、オプションで単一のlegend要素と、Flowです。legend要素は省略可能ですが、使用する場合はfieldset要素の最初の子要素である必要があります。また、legend要素はfieldset要素の直接の子要素でなければならないため、fieldset要素をdiv要素や他の要素で囲むことはできません。
legend要素のあとには、Flowのコンテンツを自由に置くことができます。p要素で説明文を書いたり、ul要素で複数のフォームコントロールをリスト化したりできます。fieldset要素の中に他のfieldset要素を入れ子にもできます。
見出しを入れることもできます。参考として、アウトラインアルゴリズムではfieldset要素はセクショニングルートとなり、見出しを入れた場合に、外のアウトラインとは独立したアウトラインが作られます。

＜小見出し＞
属性
＜本文＞
fieldset要素にはdisabled属性、name属性、form属性が指定できます。fieldset要素のname属性はform要素と同じものです。form要素を参照してください。form属性については、フォームコントロールの共通属性を参照してください。

＜丸見出し＞
disabled属性
＜本文＞
disabled属性については、「フォームコントロールの共通属性」を参照してください。fieldset要素の場合、この要素自身はもともと選択できませんが、disabled属性を指定すると、子孫のフォームコントロールをまとめて無効にできます。
このとき無効になるのは、fieldset要素の子孫であり、かつlegend要素の子孫ではないフォームコントロールです。legend要素の中にあるフォームコントロールは無効になりません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
fieldset要素のデフォルトのARIAロールはgroupです。多くのスクリーンリーダーは、グループ内の最初のフォームコントロールへフォーカスしたときにグループのラベルを読み上げます。legend要素を使用してラベルを付けることをお勧めします。
ラジオボタンやチェックボックスに使用する場合、label要素によるラベルは個々の選択肢の名前となります。選択肢だけを読み上げられても、何に対する選択なのかわからないことが多いため、fieldset要素とlegend要素でグループ全体にラベルを付けるとよいでしょう。
ラジオボタンをグループ化している場合は、role=radiogroupを指定できます。

＜中見出し＞
legend要素
＜本文＞
legend要素は、fieldset要素のキャプションを表します。fieldset要素で表したグループのラベルとして機能します。使い方についてはfieldset要素（P000）を参照してください。

＜小見出し＞
内容モデル
＜本文＞
legend要素の内容モデルはPhrasingですが、オプションで見出し要素を混在させることができます。legend要素に見出しを入れると、グループのラベルと見出しを兼ねさせることができます〓38〓。表示例は〓39〓となります。

〓38〓legend要素に見出しを入れた記述例
＜コード＞
<fieldset>
  <legend><h2>希望する連絡方法</h2></legend>
  <ul>
    <li><label><input type="radio" name="contact" checked>電子メール</label></li>
    <li><label><input type="radio" name="contact">電話</label></li>
    <li><label><input type="radio" name="contact">ファクシミリ</label></li>
  </ul>
</fieldset>

〓39〓〓38〓の表示例

＜本文＞
見出しはあくまでオプションであり、必須ではありません。通常は単にテキストを入れることが多いでしょう。Phrasingが入るので、テキストをマークアップしたり、フォームコントロールを入れたり、label要素を入れたりもできます。ただし、legend要素の内容はグループのラベルとして使用されるものなので、あまり長いテキストを入れると理解が難しくなるかもしれません。
繰り返しになりますが、見出しを除き、Phrasingではない要素を入れることはできません。たとえば、div要素は入れられないので注意してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
legend要素にデフォルトのARIAロールはありません。legend要素はfieldset要素のラベルとして扱われます。スクリーンリーダーは、fieldset要素内のフォームコントロールへフォーカスしたときにlegend要素の内容を読み上げることがあります。