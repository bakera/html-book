＜タイトル＞
セクション
＜リード＞
ここでは、文書全体の構造を表現する要素、主に見出しとセクションに関する要素を紹介します。

＜中見出し＞
アウトラインアルゴリズムによるセクションの決定
＜本文＞
Chapter3-0で触れたように、HTML仕様はアウトラインアルゴリズムを定義しており、マークアップからアウトラインを決定できます。Chapter3で紹介する要素の多くは、このアウトラインの決定に関わります。
アウトラインアルゴリズムにおいて、セクションを決定する方法は2つあります。1つは見出しによる暗黙のセクション、もう1つはセクショニングコンテンツによる明示的なセクションです。

<memo>
Chapter3-0でも言及したように、アウトラインアルゴリズムの実装はほとんど存在しません。マークアップする上での概念として、参考に留めるとよいでしょう。

＜小見出し＞
暗黙のセクション
＜本文＞
HTMLには「見出し（heading）」を表現する要素が用意されています。見出し要素はh1からh6まで6種類が用意されており、セクションの「ランク（rank）」、を表現できます。ある見出しが出現してから、次に同じランクもしくはランクの高い見出しが出現するまでを、1つのセクションとみなすことができます。
このようにして自動的に生成されるセクションのことを「暗黙のセクション（implied section）」と呼びます。見出しを適切に使うだけで、自動的にセクションを表現できるのです〓01〓。

〓01〓見出しと暗黙のセクションの関係
（リデザイン）

＜本文＞
ただし、暗黙のセクションではうまく表現できないケースもあります。〓02〓のマークアップは、本文の途中に注釈を挟み、注釈が終わったあとにまた本文が続く構造を意図しています。

〓02〓注釈の記述例
＜コード＞
<h1>見出し1</h1>
<p>最初の本文です</p>
<div class="note">
  <h2>注意</h2>
  <p>注意書きです</p>
</div>
<p>本文の続きです</p>

＜本文＞
ここでは注釈をdiv要素でマークアップしていますが、div要素はアウトラインに影響はしません。暗黙のセクションでは、各要素は最も近い見出しに所属するものとみなすため、最後の文はh1のランクではなく、h2のランクに所属します。つまり、本文ではなく注釈の一部と解釈されてしまいます〓03〓。

〓03〓 暗黙のセクションを解釈した様子
（作図）
+- - - 暗黙のセクション -+
| 見出し1             　          |
| 最初の本文です               |
+- - - - - - - - - - - -- - +

+- - - 暗黙のセクション -+
| 注意                                |
| 注意書きです                  |
| 本文の続きです               |
+- - - - - - - - - - - -- - +

＜小見出し＞
セクショニングコンテンツによる明示的なセクション
＜本文＞
現在のHTML仕様では、セクションの範囲を明示するための要素が用意されています。前述の例の場合、以下のようにsection要素を使うことで、最後の文がh1に所属することを明示できます〓04〓。

〓04〓明示的なセクションの記述例
＜コード＞
<h1>見出し1</h1>
<p>最初の本文です</p>
<section class="note">
  <h2>注意</h2>
  <p>注意書きです</p>
</section>
<p>本文の続きです</p>

＜本文＞
このようにセクションを明示する機能を持つ要素には、article、section、aside、navの4つがあります。これらは「セクショニングコンテンツ（sectioning content）」と呼ばれます。
逆に、これら以外の要素は明示的なセクションを作りません。header要素やmain要素はセクショニングコンテンツではないため、見出しを直接の子要素にすると暗黙のセクションが作成されます。

＜小見出し＞
セクショニングルート
＜本文＞
見出しやセクショニングコンテンツが単純にアウトラインに組み込まれると困る場合もあります。その典型例は引用です。〓05〓はblockquote要素を使用して文章を引用している例です。引用部分に見出しが含まれますが、これは単に引用元に見出しがあったに過ぎません。

〓05〓はblockquote要素で引用している記述例
＜コード＞
<section>
  <h1>初音ミク</h1>
  <section>
    <h2>はじめに</h2>
    <p>このセクションでは、黎明期の初音ミクについて説明します。</p>
  </section>
  <section>
    <h2>アイテム</h2>
    <p>初音ミクの定番アイテムといえばネギが有名ですが、ここでWikipediaの『初音ミク』の記述を見てみましょう。</p>
    <blockquote>
       <h1>初音ミクとネギ</h1>
       <p>これは派生キャラクターのはちゅねミクを生み出した動画...</p>
    </blockquote>
  </section>
</section>

＜本文＞
このようなケースでは、引用内部の見出しが文書全体のアウトラインに出現すると、混乱が生じます。とはいえ見出しを無視すると、引用部のアウトラインを理解できなくなってしまいます。
HTML仕様では、blockquote要素の内側と外側ではそれぞれ独立したアウトラインを持つことになっています。このように、その要素内に独自のアウトラインを持ち、内側のセクションと見出しが祖先のアウトラインに影響しないものを「セクショニングルート（sectioning root）」と呼びます。
〓05〓では、blockquote要素はセクショニングルートであるため、中の見出しは文書全体のアウトラインには現れません。文書全体のアウトラインは〓06〓のようになります

〓06〓〓05〓のアウトライン
＜作図＞
初音ミク
├ はじめに
└ アイテム

＜本文＞
セクショニングルートとなる要素は他にもあります。代表例の1つはtd要素です。td要素は表のセルを表しますが、セル中に見出しが出現しても文書全体のアウトラインには影響しません。table要素をレイアウト目的に使っていると、意図したアウトラインにならないことがあるので注意が必要です。他にセクショニングルートとなるのは、body要素、details要素、dialog要素、fieldset要素、figure要素です。
body要素もセクショニングルートであることに注意してください。たとえば〓07〓のようにマークアップしたとします。この場合、body要素に対応する見出しがないため、タイトルのないセクションができることになります。アウトラインを解釈するツールで可視化すると、たとえば〓08〓のようになります。

〓07〓body要素に対応する見出しがない例
＜コード＞
<body>
<section>
 <h1>Apples</h1>
 <p>Pomaceous.</p>
</section>
</body>

〓08〓〓07〓のアウトライン
＜作図＞
[body element with no heading]
└ Apples

＜本文＞
ただし、繰り返しになりますが、アウトラインアルゴリズムはほとんど実装されていません。セクショニングルートについてもサポートされておらず、スクリーンリーダー等の支援技術も、セクショニングルートを解釈して見出しの扱いを変えるようなことはありません。

＜中見出し＞
body要素
＜本文＞
body要素は、文書のコンテンツを表します。head要素内のメタデータが原則として画面に表示されないものだったのに対し、こちらは原則として表示される内容を記述するセクションといえます。html要素の2番目の子として、つまりhead要素の弟として、HTML文書に必ず1つのみ存在します。

<memo＞
body要素は開始タグも終了タグも省略可能です。そのため、マークアップ上は<body>タグが現れないこともありますが、その場合でもbody要素は必ず補われてDOMツリーに追加されます。

＜小見出し＞
属性
＜本文＞
body要素にはグローバル属性と、いくつかの固有のイベントハンドラー属性を指定できます。イベントハンドラー属性はJavaScriptと組み合わせて利用するもので、利用頻度も高くないため、本書では説明を省略します。詳細は仕様を参照してください。

＜丸見出し＞
廃止された属性: bgcolor属性、text属性、link属性、alink属性、vlink属性
＜本文＞
かつてのHTML仕様では、body要素にbgcolor、text、link、alink、vlink属性が定義されていました。これらは色を指定するもので、順に、ページの背景色、文字色、リンク色（通常、アクティブ時、訪問済み）を指定します。いずれも見た目の色を指定するものであり、現在ではCSSで指定できるため、これらの属性は廃止されています。色指定はCSSで行います。

＜小見出し＞
内容モデル
＜本文＞
body要素の内容モデルはFlowです。古いHTMLのルールでは、〓09〓のようにbody要素の直接の子要素としてimg要素やテキストを入れることができない場合がありました。現在のHTMLではこのような制限はなく、body要素の直下にテキストを書いたり画像を置いたりできます。

〓09〓古いHTMLのルールでは不適切なbody要素の記述例
＜コード＞
<body>
<img src="image.jpg" alt="">
テキスト
</body>

＜中見出し＞
section要素
＜本文＞
section要素は、文書またはアプリケーションの一般的なセクションを表します。

＜小見出し＞
内容モデル
＜本文＞
section要素の内容モデルはFlowです。
通常、section要素の冒頭にはh1要素などの見出しを配置します。見出しがなくても構文エラーにはなりませんが、タイトルのないセクションができることは望ましくありません。〓10〓は望ましくない例です。

<memo>
見出しがない場合、アウトラインを解釈するツールはエラーとして報告することがあります。

〓10〓最初のsection要素に見出しがない例
＜コード＞
<section>
  <h2>セクションについて</h2>
  <section>
    <p>セクション（section）は、一般には区分や区画といった意味を持ちます。</p>
  </section>
  <section>
    <h3><code>section</code>要素</h3>
    <p><code>section</code>要素は、文書またはアプリケーションの一般的なセクションを表します。
  </section>
</section>

＜本文＞
見出しを持たないようなブロック、たとえば見た目上の単なる囲みや、JavaScriptで制御するためのエリア等が必要な場合は、div要素を使用します。〓10〓は、〓11〓のようにできます。

〓11〓〓10〓に見出しを追加した例
＜コード＞
<section>
  <h2>セクションについて</h2>
  <div><!-- 見た目の囲み -->
    <p>セクション（section）は、一般には区分や区画といった意味を持ちます。</p>
  </div>
  <section>
    <h3><code>section</code>要素</h3>
    <p><code>section</code>要素は、文書またはアプリケーションの一般的なセクションを表します。
  </section>
</section>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
section要素は、通常はデフォルトのロールを持たず、ランドマークとして扱われることもありません。
ただし、section要素がアクセシブルな名前を持つ場合は、デフォルトがregionロールとなり、ランドマークとして扱われます。アクセシブルな名前についてはChapter4-2を参照してください。
通常はsection要素の中に見出しがあるので、aria-labelledby（P000）で参照できます〓12〓。

〓12〓aria-labelledbyで参照した記述例
＜コード＞
<section aria-labelledby="region-title">
  <h3 id="region-title">セクションのタイトル</h3>
  <p>...</p>
</section>

＜本文＞
もっとも、名前を付けてランドマークにすることが常に望ましいわけではありません。section要素は文書内で多用される場合があり、そのすべてがランドマークとして扱われると利用者は混乱します。ランドマークにしたい積極的な理由がなければ、不用意に名前を与えない方がよいでしょう。Chapter4-2も参照してください。

＜中見出し＞
article要素
＜本文＞
article要素は、自己完結型の構造を表します。これは、サイトのページやアプリケーションの中での、ブログの投稿、ニュースの記事、インタラクティブなウィジェットなどが該当します。
section要素と似ていますが、article要素は、そのセクションだけで自己完結するものを表します。
たとえば、Twitterのツイートは、その1つだけで1つのコンテンツとなるため、article要素で表現することが適切です。

<memo>
発言が1つのツイートに収まりきらず、複数回連続でツイートしたならば、それぞれのツイートをsection要素でマークアップしたうえで、一連のツイート全体をarticle要素としてもよいでしょう。コンテンツの長さで使い分けるのではなく、文脈によって使い分けるようにしましょう。

＜小見出し＞
内容モデル
＜本文＞
article要素の内容モデルはFlowです。
＜本文＞
article要素は入れ子にできます。この場合、内側のarticle要素は、原則として外側のarticle要素に関連したものとなります。〓13〓は、ブログエントリーをarticle要素とし、それに対する個々のコメントそれぞれをarticle要素として入れ子にした例です。表示例は〓14〓となります。

〓13〓article要素を入れ子にした記述例
＜コード＞
<article class="entry">
  <header>
    <h2>テスト投稿</h2>
    <p>
      <time>2017-01-23</time>
    </p>
  </header>
  <section>
    <p>テスト投稿だよ。自由にコメントしてね。</p>
  </section>
  <section class="user_comments">
    <article class="user_comment">
      <p>記念にコメントするッスよー！</p>
      <footer>
        <p>
          ななしさん <time>2017-01-23 19:00</time>
        </p>
      </footer>
    </article>
    <article class="user_comment">
      <p>あなたはブログがかけるフレンズなんだね！</p>
      <footer>
        <p>
          ななしさん <time>2017-01-23 19:02</time>
        </p>
      </footer>
    </article>
  </section>
</article>

〓14〓〓13〓の表示例

＜本文＞
article要素内にaddress要素を入れると、そのarticle要素の著作者の連絡先情報を表します。たとえば、複数の著作者が執筆しているブログでは、ブログエントリーそれぞれをarticle要素とし、中にaddress要素を入れることで、記事ごとに異なる執筆者の連絡先を示すことができます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
article要素はデフォルトでarticleロールを持ちます。articleロールはランドマークロールではありませんが、スクリーンリーダーによってはランドマークのように扱うことがあります。たとえば、iOSのVoiceOverは、article要素に差し掛かると「記事 ランドマーク」と読み上げます。

＜中見出し＞
aside要素
＜本文＞
aside要素は、メインコンテンツと副次的には関連するものの、メインコンテンツから分離できるセクションを表します。典型的には、サイドバーや広告、その他の補足情報などを表すのに利用します。

<memo>
メインコンテンツに含まれる注釈や引用などは、コンテンツから切り離してしまうとコンテンツの理解に支障が出ます。このようなものをaside要素でマークアップするべきではありません。

＜小見出し＞
内容モデル
＜本文＞
aside要素の内容モデルはFlowです。広告を挿入するためのiframe要素などを直接含めることも可能です〓15〓。

〓15〓aside要素内にiframe要素を含めた記述例
＜コード＞
<aside>
<iframe src="..." title="広告"></iframe>
</aside>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
aside要素はデフォルトでcomplementaryロールを持ち、ランドマークとして扱われます。スクリーンリーダーでは、任意のaside要素にジャンプしたり、特定のaside要素を丸ごとスキップできる場合があります。

＜中見出し＞
nav要素
＜本文＞
nav要素は、ナビゲーションのセクションを表します。ナビゲーションには、サイトの他のページへのリンクが含まれていることもあれば、ページ内のリンクが含まれることもあります。
1つのページに複数のnav要素があっても構いません。たとえば、グローバルナビゲーションとローカルナビゲーションの両方がある場合、それぞれをnav要素としてマークアップできます。
コンテンツ内のリンクのグループすべてをnav要素に入れる必要はありません。たとえば、ページのフッターにリンクが数件含まれるようなケースはよく見られます〓16〓。
このような問い合わせ先を含む小さなフッターは、単にfooter要素だけで十分です。footer要素の中にnav要素を入れることも可能ですが、無理にnav要素としてマークアップする必要はないでしょう。

〓16〓ウェブサイトに存在するページフッターの例

＜小見出し＞
内容モデル
＜本文＞
nav要素の内容モデルはFlowです。
nav要素の直下にul要素などのリストを入れてリンクのa要素を列挙するパターンがよく見られますが、リストは必須ではなく他の要素を入れることもできます。見出しや説明文などを入れても問題ありません〓17〓〓18〓。

〓17〓nav要素の直下にul要素を入れた記述例
＜コード＞
<nav>
<h2>ナビゲーション</h2>
<ul>
  <li><a href="/">トップページ</a></li>
  <li><a href="/book">本</a></li>
  <li><a href="/computer">コンピュータ</a></li>
</ul>
</nav>

〓18〓〓17〓の表示例

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
nav要素はデフォルトでnavigationロールを持ち、ランドマークとして扱われます。スクリーンリーダーでは、ナビゲーションが不要なときは読み飛ばし、必要なときにジャンプできる場合があるため、利便性が大きく向上します。nav要素を使うかどうか迷った場合は、読み飛ばしやジャンプができると便利ならnav要素にする、と考えるとよいでしょう。
ただし、使い過ぎには注意してください。ページ内に多数のnav要素があると、それぞれの区別が困難になり、ジャンプやスキップの操作も煩雑になります。

<memo>
複数のnav要素がある場合、それぞれに名前を付けることで見分けさせる方法もあります。詳しくはChapter4-2で解説します。

＜中見出し＞
h1-h6要素
＜本文＞
h1-h6要素は、セクションの見出しを表します。これらの要素は、要素名の数字で与えられるランクを持ちます。h1要素が最高ランクを持ち、h6要素が最低ランクを持ちます。また、同じ名前の要素は等しいランクを持ちます。

＜小見出し＞
内容モデル
＜本文＞
h1-h6要素の内容モデルは"Phrasing"です。Flowではないため、h1要素の中にdiv要素などを入れることはできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
h1-h6要素はデフォルトでheadingロールを持ち、要素名の数字に等しいaria-levelを持ちます。

<memo＞
たとえば、h2要素にはデフォルトでrole=headingとaria-level=2が設定されます。

＜本文＞
スクリーンリーダーは一般的に、見出しを（たとえばh2の場合は）「見出し レベル 2」のように読み上げます。また、ユーザーは見出しにジャンプする機能も利用できます。ランドマークに対応していない古いスクリーンリーダーでも、見出しジャンプには対応しているケースがほとんどです。
HTML仕様のアウトラインアルゴリズムはsection要素の入れ子でランクを表現できますが、ほとんどのスクリーンリーダーはこの機能には対応していません。見出しのランクを適切に設定しないと、利用者は混乱することがあります。
見出しランクは6までしかありません（つまりh7要素は存在しません）。7以上のランクを指定したい場合は、aria-level属性を利用して表現できます〓19〓。

〓19〓aria-level属性を利用してh7を表現する例
＜コード＞
<h6>h6見出し</h6>
<h6 aria-level="7">h7見出し</h6>

<memo>
h7のような、深いランクのアウトラインが利用者に理解できるかどうかは別の問題です。また、aria-level属性に対応していないスクリーンリーダーも存在します。深いランクの使用は慎重に検討してください。

＜コラム＞
サブタイトルのマークアップとhgroup要素
＜コラム本文＞
見出しがサブタイトルを伴う場合、どうマークアップするべきかという議論があります。たとえば、〓01〓のような見出しとサブタイトルがあるとしましょう。

〓01〓見出しとサブタイトルの例
＜コード＞
Selectors Level 3
W3C Recommendation 06 November 2018

＜コラム本文＞
単にそれぞれを見出しとしてマークアップすると、見出しが2つできます〓02〓。

〓02〓〓01〓をマークアップ
＜コード＞
<h1>Selectors Level 3</h1>
<h2>W3C Recommendation 06 November 2018</h2>

＜コラム本文＞
この場合、後者がサブタイトルであるということは伝わらず、それぞれ独立した見出しと解釈されてしまいます。本来であれば、これらを1つのまとまりとして扱うべきです。
HTML仕様では、このようなニーズのためにhgroup要素が定義されています。副見出しやキャッチフレーズのような複数レベルの見出しをグループ化し、ひとまとまりにします。〓02〓は〓03〓のようになります。

〓03〓hgroup要素を利用した記述例
＜コード＞
<hgroup>
  <h1>Selectors Level 3</h1>
  <h2>W3C Recommendation 06 November 2018</h2>
</hgroup>

＜コラム本文＞
こうすると、アウトラインアルゴリズムによってhgroup要素内の見出しの扱いが変化し、見出しと副見出しのかたまりとして扱われることが期待されるはずでした。
しかし、ここで繰り返し述べているように、アウトラインアルゴリズムを適切に実装したブラウザーや支援技術は知られていません。残念ながら、hgroup要素が適切に扱われることは期待できないのです。
〓03〓は、たとえば〓04〓のように書き換えることができます。サブタイトル部分があまり長くない場合は、見出しの中に含めてspan要素でマークアップする方法もあります。W3C HTML 5.2の4.13.1にいくつかの書き換え例があるので、参考にするとよいでしょう。

〓04〓〓03〓を書き換えた例
＜コード＞
<div>
  <h1>Selectors Level 3</h1>
  <p>W3C Recommendation 06 November 2018</p>
</div>

<memo できれば側柱の背景を入れてコラム内に配置したい。無理ならコラム直下>
4.13.1. Subheadings, subtitles, alternative titles and taglines
https://www.w3.org/TR/2021/SPSD-html52-20210128/common-idioms-without-dedicated-elements.html#subheadings-subtitles-alternative-titles-and-taglines
＜/コラム＞

＜中見出し＞
header要素
＜本文＞
header要素は、いわゆるヘッダーを表します。もっとも近い祖先のセクショニングコンテンツ、またはセクショニングルートのヘッダーを表します。ヘッダーに一般的に、コンテンツの導入部分やナビゲーション部分が含まれます。
header要素が使われる箇所によって扱いが異なります。body要素の子要素になっている場合など、祖先に他のセクショニングコンテンツがない場合には、ページ全体のヘッダーとして扱われます〓20〓。

〓20〓header要素の記述例
<body>
  <header>
    <h1>メインページのタイトル</h1>
    <img src="logo.png" alt="サイトのロゴ">
  </header>
...
</body>

＜本文＞
header要素を他のセクショニングコンテンツ中に入れた場合、そのセクションのヘッダーを表します。たとえばarticle要素に入れると〓21〓、〓22〓のように記事のヘッダーとして使うことができます。

〓21〓article要素内にheader要素を記述した例
＜コード＞
<article>
  <header>
    <h1>HTML</h1>
    <h2>Living Standard — Last Updated <time datetime="2019-08-30">30 August 2019</span></h2>
  </header>
  <p>HTML Living Standardは随時更新される文章です。</p>
  <p><a href="/20190930">続きを読む...</a></p>
</article>

〓22〓〓21〓の表示例

＜小見出し＞
内容モデル
＜本文＞
header要素の内容モデルはFlowです。ただし、header要素やfooter要素は子孫にできません。
header要素自身はセクショニングコンテンツではないため、新しいセクションを設けません。header要素の後に見出しがないようなケースでは、意図しないアウトラインができてしまうことがあります〓23〓。

〓23〓header要素の後に見出しがない記述例
＜コード＞
<header>
  <h1>このページについて</h1>
  <p>このページは……</p>
</header>
<p>こんにちは、私は……</p>

＜本文＞
この場合、header要素の外にある「こんにちは、私は……」という文は「このページについて」という見出しのセクションに属することになります。section要素で明示的にマークアップするか、見出しを置くようにしましょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
header要素の祖先にセクショニングコンテンツがない場合、デフォルトでbannerロールを持ち、ランドマークとして扱われます。スクリーンリーダーは「バナー ランドマーク」と読み上げることがあります。また、ここにジャンプしてきたり、読み飛ばしたりできる場合があります。
header要素の祖先にセクショニングコンテンツがある場合は、header要素はデフォルトのロールを持たず、ランドマークとしては扱われません。


＜中見出し＞
footer要素
＜本文＞
footer要素は、いわゆるフッターを表現します。最も近い祖先のセクショニングコンテンツ、またはセクショニングルートのフッターを表します。フッターは、著作者に関する情報、関連文書へのリンク、著作権に関する情報などを含みます〓24〓。
footer要素は、多くの点がheader要素と共通しています。body要素の子要素になっている場合など、祖先に他のセクショニングコンテンツがない場合には、ページ全体のフッターとして扱われます。

〓24〓footer要素の記述例
＜コード＞
<footer>
<p>最終更新 2018年5月7日 (月) 11:23 （日時は個人設定で未設定ならばUTC）。</p>
<p>テキストはクリエイティブ・コモンズ 表示-継承ライセンスの下で利用可能です。追加の条件が適用される場合があります。詳細は利用規約を参照してください。</p>
</footer>

＜小見出し＞
内容モデル
＜本文＞
footer要素の内容モデルはFlowです。ただし、header要素やfooter要素は子孫にできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
footer要素の祖先にセクショニングコンテンツがない場合、footer要素はデフォルトでcontentinfoロールを持ち、ランドマークとして扱われます。スクリーンリーダーは「フッター ランドマーク」などと読み上げることがあります。また、ここにジャンプしたり、読み飛ばしたりできる場合があります。

<memo>
footer要素の祖先にセクショニングコンテンツがある場合は、footer要素はデフォルトのロールを持たず、ランドマークとしては扱われません。

＜中見出し＞
address要素
＜本文＞
address要素は連絡先情報を表します。祖先にarticle要素がある場合、最も近いarticle要素の連絡先情報となります。そうでない場合はbody要素と関連づけられ、文書全体の連絡先情報を表します。
連絡先情報の内容に決まりはありません。著作者の名前や電子メールアドレス、SNSのアドレス等が書かれることが一般的ですが、電話番号、郵便番号、住所といったものでも構いません〓25〓。
これらはaddress要素の属する文書や記事に対応する連絡先とみなされることに注意してください。コンテンツとは関係のない住所（たとえば懸賞の送り先など）を提示する場合には、address要素は使わず、単にp要素などでマークアップします。

〓25〓＜中見出し＞
address要素の記述例
＜コード＞
<body>
...
<!-- article要素が祖先になければ、文書全体の連絡先となる -->
<address>
<p>株式会社ボーンデジタル</p>
<p>〒102-0074<br>
東京都千代田区九段南一丁目5番5号<br>
九段サウスサイドスクエア（旧 Daiwa九段ビル）</p>
</address>
</body>

＜小見出し＞
内容モデル
＜本文＞
address要素の内容モデルはFlowです。古いHTMLのルールでは、address要素の中にp要素やul要素などを入れることができなかったのですが、現在のHTML仕様ではそのような制限はありません。

＜小見出し。
アクセシビリティ上の注意点
＜本文＞
address要素にデフォルトのARIAロールはありません。ランドマークとして扱われることもありません。一般的に、連絡先の情報はフッターに入れられることが多いため、footer要素の中に入れておくと見つけやすいでしょう。