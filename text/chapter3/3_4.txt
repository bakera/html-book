＜タイトル＞
テキストレベルセマンティックス
＜リード＞
ここでは、主にテキストをマークアップすることを目的とした、約30存在するテキストレベルセマンティックスとしてHTML仕様で分類されている要素を紹介します。

＜中見出し＞
a要素
＜本文＞
a要素は、「アンカー（anchor）」を表現する要素です。多くの場合はhref属性を指定して、リンクとして利用します。詳細はChapter3-5で紹介します。

＜中見出し＞
em要素
＜本文＞
em要素は、強調、強勢を表します。たとえば、文の一部を強調してニュアンスを変化させることができます〓01〓。

〓01〓em要素の記述例
＜コード＞
<p>猫はかわいい動物です。</p>
<p><em>猫</em>はかわいい動物です。</p>
<p>猫<em>は</em>かわいい動物です。</p>
<p>猫はかわいい<em>動物</em>です。</p>
<p><em>猫はかわいい動物です！</em></p>

＜本文＞
em要素の有無や場所によってニュアンスが違ってきます。「猫」を強調すれば、動物の種類が重要というニュアンスになりますし、「動物」を強調すれば、かわいいけれどあくまで動物であるというニュアンスが出るでしょう。文全体を強調した場合は、この文全体を熱心に伝えたいというニュアンスが出てきます。

＜小見出し＞
内容モデル
＜本文＞
em要素の内容モデルはPhrasingです。em要素自身もPhrasingに属しますから、複数のem要素を入れ子にもできます。これによって、より強いレベルの強調を表現できます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
em要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、em要素について特別な読み上げをしないことに注意してください。em要素の有無で文の意味が大きく変わるような表現は避けたほうがよいでしょう。
典型的なブラウザーのデフォルトスタイルシートでは、em要素はイタリック体（斜体）で表現されます。しかし、em要素はイタリック体のための要素ではなく、CSSによってイタリック体ではないスタイルが与えられることもあるため、イタリック体を表現するために使うべきではありません。英語のようなアルファベット主体の言語において、慣用的にイタリック体にする箇所については、i要素を利用します。
また、em要素は重要性を伝えるものではない点に注意してください。重要性を伝えたい場合には、後述のstrong要素を使います。

<memo>
WAI-ARIA 1.2ではemphasisロールが定義されています。
https://www.w3.org/TR/wai-aria-1.2/#emphasis 

<memo>
em要素の表示でイタリックとなるのは半角英数のみです。漢字やひらがなのような全角文字はイタリックでは表示されません。


＜小見出し＞
strong要素
＜本文＞
strong要素は、重要性、深刻性、または緊急性を表します。見出し、キャプション、段落などの文の中で、本当に重要な部分を区別するために使用します。古いHTMLでは強調を表すとされていましたが、現在では単なる強調に使うことは推奨されません。強調にはem要素を使います。
〓02〓はstrong要素で重要性を表現した例です。

〓02〓strong要素で重要性を表現
＜コード＞
<p><strong>酸性タイプ</strong>の製品と一緒に使う（まぜる）と有害な塩素ガスが出て<strong>危険</strong>。</p>


〓03〓は深刻性を示した例です。警告または注意の通知をマークアップするために使用できます。

〓03〓strong要素で深刻性を表現
＜コード＞
<p><strong>注意。</strong>テレビを見るときは、部屋を明るくして、なるべくテレビから離れて見てね。</p>

〓04〓は緊急性を示した例です。ユーザーに、他の部分より先に読んでほしい箇所を示すために使用しています。これらをブラウザーで表示すると〓05〓となります。

〓04〓strong要素で緊急性を表現
<p>リマインダー</p>
<p>今日のタスク:</p>
<ul>
  <li><p><strong>オーブンの電源を切る。</strong></p></li>
  <li><p>ごみを出す。</p></li>
  <li><p>洗濯する。</p></li>
</ul>

〓05〓ブラウザーで表示した例

＜小見出し＞
内容モデル
＜本文＞
strong要素の内容モデルはPhrasingです。strong要素自身もPhrasingに属しますから、複数のstrong要素を入れ子にもできます。これによって、より強い重要性を表現できます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
strong要素にデフォルトのARIAロールはありません。重要性を伝えるとされているにもかかわらず、多くのスクリーンリーダーは、strong要素について特別な読み上げをしないことに注意してください。strong要素の有無で文の意味が大きく変わるような表現は避けたほうがよいでしょう。


<memo>
WAI-ARIA 1.2ではstrongロールが定義されています。 
https://www.w3.org/TR/wai-aria-1.2/#strong 

＜中見出し＞
small要素
＜本文＞
small要素は、一般的に小さい文字で表記されるような、副次的なコメントを表現します。例としては、補足説明、著作権表示、免責事項、法的な注意書きなどが挙げられます。基本的には、文章のテキストの一部を修飾する形で利用します〓06〓。表示例は〓07〓のようになります。

〓06〓small要素の記述例
＜コード＞
<p>しょうゆ 198円<small>（税込み）</small></p>

〓07〓〓06〓の表示例


＜本文＞
文全体をsmall要素で囲むこともできます。〓08〓は著作権の帰属表示（Copyright）に用いた例です。

〓08〓small要素で文全体を囲んだ記述例
＜コード＞
<p><small>© ボーンデジタル</small></p>

＜本文＞
ただし、長文にsmall要素を利用するべきではありません。たとえば、複数の段落で構成される利用規約を掲載する場合、その利用規約はもはや主題となる内容であって、副次的なコメントとして扱うべきものではありません。
small要素が文を弱める意味を持たないことに注意してください。em要素やstrong要素と反対の意味にはなりません。

＜小見出し＞
内容モデル
＜本文＞
small要素の内容モデルはPhrasingです。em要素と併用して一部を強調したり、strong要素と併用しての重要性の表現も可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
small要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、small要素について特別な読み上げをしないことに注意してください。small要素の有無で意味が大きく変わるような表現は避けたほうがよいでしょう。

＜中見出し＞
s要素
＜本文＞
s要素は、もはや正確でなくなったものや、関連しなくなったものを表現します。ブラウザーのデフォルトスタイルシートでは、多くの場合、打ち消し線を伴って表現されます。以下の例は、価格が値下げされ、値下げ前の価格がもはや正確でないことを表現するためにs要素を用いています〓09〓。
〓10〓が表示例です。

〓09〓s要素の記述例
＜コード＞
<p>ゲーミングキーボード</p>
<p><s>希望小売価格 15000円</s></p>
<p>セール価格 9800円</p>

〓10〓〓09〓の表示例

＜本文＞
s要素は、編集による削除や訂正を表現するものではないことに注意してください。編集による削除を表現したい場合はdel要素を使用します。

＜小見出し＞
内容モデル
＜本文＞
s要素の内容モデルはPhrasingです。他のPhrasingに属する要素をまるごと修飾可能です。p要素など、Phrasingに属さない要素は子にできないため、複数の段落をまるごとs要素で修飾するような使い方はできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
s要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、s要素について特別な読み上げをしないことに注意してください。s要素はテキストの意味を変更する意図で使われることが多いにもかかわらず、そのことが伝わらないことに特に注意が必要です。〓11〓は望ましくない例です。

〓11〓s要素の不適切な記述
＜コード＞
<p>価格<s>98</s>90円</p>

＜本文＞
この例は、98円を90円に訂正したことを意図しています。しかし、s要素の存在が伝わらない場合、9890円と誤解される可能性があります。先に挙げた例のように、前後のテキストからそれぞれの価格がわかるようにするべきです。

＜中見出し＞
cite要素
＜本文＞
cite要素は、作品などのタイトルを表現します。ここでいう作品には、書籍、文書、楽曲、映画、ゲーム、プログラム、美術作品、ウェブページといったさまざまなものが含まれます。
典型的には、引用の際の出典や、参考文献のタイトルを示す際に利用します。たとえば、SIST 02『参照文献の書き方』に従った文献情報は、〓12〓のようにマークアップできます。

〓12〓cite要素の記述例
＜コード＞
<p>Berners-Lee, Tim. <cite>Web の創成 World Wide Web はいかにして生まれどこに向かうのか</cite>. 高橋徹監訳. 毎日コミュニケーションズ, 2001, 279p.</p>

<memo>
科学技術情報流通技術基準
https://jipsti.jst.go.jp/sist/handbook/sist02_2007/main.htm

＜本文＞
著作者名をcite要素に含めていないことに注意してください。cite要素の内容はあくまで作品のタイトルであり、著作者、発言者などの表現に使うべきではありません。タイトルに加えて他の情報を含めることも避けるべきです。〓13〓は望ましくない例です。この場合、〓14〓のように、正式なタイトルのみをcite要素とします。

〓13〓cite要素でタイトル以外を含めた望ましくない記述
＜コード＞
<p>本文は<cite>英語版WikipediaのHTMLの項目</cite>を参考にしました。</p>

〓14〓cite要素でタイトル部分のみを含めた記述
＜コード＞
<p>本文は英語版Wikipediaの<cite>HTML</cite>の項目を参考にしました。</p>

＜小見出し＞
内容モデル
＜本文＞
cite要素の内容モデルはPhrasingです。作品タイトルの一部を強調するようなことは少ないでしょうが、たとえばsup要素やsub要素などを入れることが可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
cite要素にデフォルトのARIAロールはありません。多くの場合、作品のタイトルであることは前後の文脈から伝わると思われますが、cite要素の有無によって意味が変わるような表現は避けたほうがよいでしょう。

＜中見出し＞
q要素
＜本文＞
q要素は、別のソースから引用されたフレージングコンテンツを表します。これは短い引用のためのもので、一定以上の長さのある、段落の塊を引用するような場合にはblockquote要素が適切です。
この要素を用いると、ブラウザーによって要素の前後に引用符が自動的に挿入されます。そのため、要素の前後には引用符の文字を入れてはなりません。逆に、テキスト中の引用箇所に既に引用符が付いているならば、q要素として無理にマークアップする必要はありません。
なお、挿入される引用符の種類は言語に依存し、たとえば日本語ではかぎ括弧（「」）、英語ではクォーテーションマーク（""）となるのが一般的です。また、スタイルシートで引用符の種類も指定できます。
〓15〓はq要素を使用して俳句を引用した例です。一般的なブラウザーのデフォルトスタイルでは、〓16〓のように引用符が挿入されます。

＜memo>
12.3.1 Specifying quotes with the 'quotes' property
https://www.w3.org/TR/CSS2/generate.html#propdef-quotes

〓15〓q要素の記述例
<p lang="ja">松尾芭蕉が<q>五月雨をあつめて早し最上川</q>と詠んだ最上川は……</p>
<p lang="en">The Mogami River, which Matsuo Basho wrote the Japanese poem <q>五月雨をあつめて早し最上川</q>, is ...</p>

〓16〓〓15〓の表示例

＜本文＞
引用ではないものに対してq要素を使用してはなりません。特別な意味で使用する単語や、人物の発言などを引用符で括る表現は一般的ですが、それらは引用ではないため、q要素で表現することは不適切です。

＜小見出し＞
内容モデル
＜本文＞
q要素の内容モデルはPhrasingです。q要素自身もPhrasingに属するため、q要素を入れ子にもできます。つまり、引用を含むフレーズをさらに引用する表現が可能です。

＜小見出し＞
属性
＜本文＞
q要素にはcite属性が定義されています。

＜丸見出し＞
cite属性
＜本文＞
cite属性を指定すると、引用の出典となるURLを示すことができます。指定できる値は、潜在的にスペースで囲まれた妥当なURLであり、これはa要素のhref属性と同様です。
ただし、一般的なブラウザーはリンクとしては扱いません。そのため、このURLがユーザーに伝わるとは限りません。出典へのリンクを設けたい場合は、cite要素とa要素を併用することで実現します。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
q要素にデフォルトのARIAロールはありません。スクリーンリーダーはq要素を特別なものとして読み上げない可能性があります。ただし、前後に補われた引用符は読まれることがあります（記号を読み上げるかどうかはスクリーンリーダーの設定に依存します）。

＜中見出し＞
dfn要素
＜本文＞
dfn要素は、文書中で用語を定義する際の、定義された用語を表します。
この要素を使用する際は、その定義（用語の説明）とセットにする必要があります。dfn要素の最も近い祖先要素となる段落（典型的にはp要素ですが、p要素に限りません）、セクション、あるいは説明リスト（dl要素）のグループに定義の説明を含めなければなりません。
通常は、dfn要素の内容が用語としての定義となります。〓17〓の例では「dfn」という単語を定義していることになります。

〓17〓dfn要素の記述例
＜コード＞
<!-- dfn要素として囲まれたテキスト、dfnが定義 -->
<p><dfn><code>dfn</code></dfn>要素は、用語の定義を表します。</p>

＜本文＞
dfn要素にtitle属性が指定されている場合、title属性で指定した値が用語として定義されます。〓18〓の例では、説明文としては「重曹」という単語を出しながら、「炭酸水素ナトリウム」という用語の定義をしています。
このため、dfn要素にtitle属性を指定する際には、定義される用語以外のものを含めることはできません。


〓18〓dfn要素にtitle属性を指定した記述例
＜コード＞
<!-- title属性の値、炭酸水素ナトリウムが定義 -->
<p><dfn title="炭酸水素ナトリウム">重曹</dfn>は、常温で白い粉末であり……</p>

＜本文＞
また、dfn要素の唯一の子要素がtitle属性を持つabbr要素であった場合は、そのabbr要素のtitle属性の値が用語として定義されたことになります〓19〓。

〓19〓abbr要素のtitle属性の値が用語として定義
＜コード＞
<!-- abbr要素のtitle属性の値、Hypertext Markup Languageが定義 -->
<p><dfn><abbr title="Hypertext Markup Language">HTML</abbr></dfn>は、マークアップ言語の一種であり……</p>

＜小見出し＞
内容モデル
＜本文＞
dfn要素の内容モデルはPhrasingですが、dfn要素を子孫要素に持つことは禁止されています。dfn要素は入れ子にできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
dfn要素のデフォルトのARIAロールはtermです。とはいえ、多くのスクリーンリーダーは特別な読み上げをしません。前後の文脈から、用語の定義であることがわかるようにするとよいでしょう。

＜中見出し＞
abbr要素
＜本文＞
abbr要素は、略語や頭字語を表します。title属性を指定すると、その値は内容の単語を展開したもの（省略しない、完全な表記）を表します〓20〓。

〓20〓abbr要素の記述例
＜コード＞
<abbr title="World Wide Web Consortium">W3C</abbr>
<abbr title="日本銀行">日銀</abbr>

＜本文＞
前後で何の略語かを説明している場合など、展開を示す必要がないケースではtitle属性を指定せずに使うこともできます〓21〓。

〓21〓title属性を指定しない場合の記述例
＜コード＞
<abbr>HTML</abbr>はHyperText Markup Languageの略です。

＜本文＞
ただし、title属性を指定せずにabbr要素を使った場合、同一の略語は同一の展開を持つものとみなされます。異なる言葉が同じ略語になる場合は、それぞれにtitle属性を指定しないと混乱を招きます〓22〓。

〓22〓異なる言葉が同じ略語になる場合はそれぞれにtitle属性を指定
＜コード＞
<p><abbr title="System and Organization Controls">SOC</abbr>レポートの中では、
<abbr title="Security Operation Center">SOC</abbr>によるシステム監視に言及している。</p>

＜本文＞
また、略語や頭字語をすべてabbr要素でマークアップする必要はありません。たとえば、前後に括弧書きを付けることでマークアップすることなく略語であることを示すことができます〓23〓。このような表記ができない場合や、読者に馴染みのない単語で明示的にマークアップしたい場合、スタイル付けしたい場合などにabbr要素を使用するとよいでしょう。

〓23〓括弧書きで略称を明示
＜コード＞
HTML (HyperText Markup Language)はマークアップ言語の一種であり……

＜小見出し＞
内容モデル
＜本文＞
abbr要素の内容モデルはPhrasingです。必要があるかは別として、abbr要素自身を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
abbr要素にデフォルトのARIAロールはありません。スクリーンリーダーがtitle属性の値を読み上げてくれることを期待したいところですが、2021年12月現在、この読み上げを行う支援技術は知られていません。abbr要素はサポートされていないと思った方がよいでしょう。

＜コラム＞
廃止された要素:acronym要素
＜本文＞
古いHTML4では、abbr要素と別に、頭字語を表現するためのacronym要素が定義されており、略語をマークアップする際にどちらを使うべきか迷う局面がよくありました。
現在のHTMLではacronym要素は廃止され、abbr要素に一本化されました。頭字語もabbr要素で表現すればよく、迷う必要はありません。
＜/コラム＞

＜中見出し＞
ルビ関連要素
＜本文＞
ルビ関連要素は複雑であり、仕様の移り変わりも激しいことから、本書では概要の説明に留めます。
ruby要素、rt要素はルビ注釈を付けるための要素です。ルビを付ける範囲全体をruby要素としてマークアップし、ルビとなる文字をrt要素で表します。たとえば〓24〓のようになります。表示例は〓25〓となります。

<memo>
W3C HTML 5.2では正式な要素として定義されていた一方で、2021年10月時点でHTML Standardではrb要素およびrtc要素はdeprecated（旧式の機能）とされています。これらの要素に関してはHTML Standardにも取り込まれるよう、継続して議論が行われています。
https://github.com/whatwg/html/pull/6478 

〓24〓ruby要素とrt要素の記述例
＜コード＞
<ruby>漢<rt>かん</rt>字<rt>じ</rt></ruby>

〓25〓〓24〓の表示例

＜本文＜
ただし、ruby要素を理解しないブラウザーや支援技術は、これを「漢かん字じ」のように表示（読み上げ）する可能性もあります。これでは意味が通じなくなるので、ruby要素を理解しないブラウザーとの互換性のために、rp要素が用意されています。rp要素の内容は、ruby要素を理解するブラウザーには無視されます。〓26〓、ruby要素を理解しないブラウザーでは「漢（かん）字（じ）」のように表示されます。

〓26〓rp要素の記述例
＜コード＞
<ruby>漢<rp>（</rp><rt>かん</rt><rp>）</rp>字<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>

＜中見出し＞
time要素
＜本文＞
time要素は、日付や時刻などの値をマシンリーダブルな形式で表現します。
後述のdatetime属性がない場合は、要素の内容となっているテキストがマシンリーダブルな日時のデータであることを表します。たとえば、2017年1月23日という日付は〓27〓のようにマークアップできます。

〓27〓time要素の記述例
＜コード＞
<!-- 日付 -->
<time>2017-01-23</time>

＜本文＞
time要素で扱うことができる日時データの種類にはさまざまなものがあり、それぞれについて形式が決められています。以下に代表的なものを取り上げます。正確なルールとパターンは、仕様を参照してください〓28〓。

〓28〓time要素で扱うデータの種類
＜コード＞
<time>2017-01</time><!-- 2017年1月 -->
<time>01-23</time><!-- ある年の1月23日 -->
<time>14:56</time><!-- 14時56分 -->
<time>2017-08-29T01:23:45</time><!--日付と時刻-->
<time>-0600</time><!-- タイムゾーンオフセット -->
<time>0789</time><!-- 西暦789年 -->

＜本文＞
形式が適切でない場合はエラーになります。〓28〓の最後の例は西暦789年を表していますが、〓29〓のように書くことはできません。

〓29〓time要素の間違った記述
＜コード＞
<time>789</time><!-- 西暦789年のつもりだが…… -->

＜本文＞
このように誤りやすいパターンもあるため、Nu Html Checkerなどのチェックツールを使って、time要素の書式が正しいかどうかを確認するとよいでしょう。
内容がマシンリーダブルな形式でない場合、後述のdatetime属性を利用してマシンリーダブルなデータを提供します。

＜小見出し＞
内容モデル
＜本文＞
time要素の内容モデルはdatetime属性の有無によって異なります。datetime属性がある場合の内容モデルはPhrasingであり、Phrasingに属する他の要素を子要素にできます。
datetime属性がない場合、time要素の内容は仕様に定められた日時を表現するテキストでなければならず、他の要素を入れることはできません。

＜小見出し＞
属性
＜本文＞
time要素ではdatetime属性によってもマシンリーダブルな形式のデータを提供できます。

＜丸見出し＞
datetime属性
＜本文＞
datetime属性を利用すると、任意の形式で書かれた日時に対してマシンリーダブルなデータを提供できます。〓30〓の例では、日本語で書かれた日付に対してマシンリーダブルな形式のデータを提供しています。

〓30〓日本語の日付をマシンリーダブル形式にした記述例
＜コード＞
<time datetime="2017-01-23">2017年1月23日</time>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
time要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、time要素について特別な読み上げをしません。

＜コラム＞
data要素
＜本文＞
time要素はマシンリーダブルな形式で日時のデータを提供しますが、日時以外のデータをマシンリーダブルにしたい場合もあるでしょう。data要素を使うと、任意の内容に対してマシンリーダブルなデータを提供できます。データはvalue属性で指定します。〓01〓の例は、書名に対してISBNコードのデータを結び付けています。

〓01〓署名にISBNコードを紐付けた記述例
＜コード＞
<data value="978-4-86246-460-6">実践！ユニティちゃん トゥーンシェーダー2.0 スーパー使いこなし術</data>

＜コラム本文＞
Microdataと組み合わせると、コンテンツにメタデータを付与できます。〓02〓以下の例では、製品名に製品のIDを結び付けています。

〓02〓製品名にIDを紐付けた記述例
＜コード＞
<h1 itemscope>
 <data itemprop="product-id" value="9678AOU879">The Instigator 2000</data>
</h1>

＜コラム本文＞
人間に対して提示したいテキストがマシンリーダブルでない場合に、data要素を使ってマシンリーダブルな値を提供できます〓03〓。

〓03〓data要素で漢字の読みを紐付けた記述例
＜コード＞
<data value="20000">弐萬圓</data>

＜/コラム＞

＜中見出し＞
code要素
＜本文＞
code要素は、コンピューターコードを表します。プログラムのソースコードやファイル名など、機械が読み取るコードを表現するのに利用します。HTML仕様では、HTMLの要素名がcode要素でマークアップされています〓31〓。

〓31〓code要素の記述例
＜コード＞
<p><code>code</code>要素は、コンピューターコードを表します。</p>

＜本文＞
pre要素と併用して、複数行にわたるコードを表すこともできます〓32〓。表示例は〓33〓となります。

〓33〓複数行にわたるコードの記述例
＜コード＞
<pre><code>
(() => {
  const target = document.getElementById('target');
  if (target === null) return;
  target.textContent = 'Hello, World';
})();
</code></pre>

〓34〓〓33〓の表示例

＜小見出し＞
内容モデル
＜本文＞
code要素の内容モデルはPhrasingです。var要素など、Phrasingに属する要素を入れることができます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
code要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、code要素について特別な読み上げをしません。

＜中見出し＞
var要素
＜本文＞
var要素は、数式やプログラムコードにおける変数を表します〓35〓。

〓35〓var要素の記述例
＜コード＞
<p><var>n</var>, <var>m</var>はそれぞれ任意の自然数とします。</p>

＜小見出し＞
内容モデル
＜本文＞
var要素の内容モデルはPhrasingです。変数名の一部を修飾したり、sub要素やsup要素の使用もできます〓36〓。表示例は〓37〓となります。
本書では扱いませんが、本格的に数式を扱いたい場合は、MathMLと呼ばれるマークアップ言語を用いた表現も可能です。

〓36〓座標名を装飾する記述例
＜コード＞
<p>2つの点の座標をそれぞれ (<var>x<sub>1</sub></var>, <var>y<sub>1</sub></var>)、(<var>x<sub>2</sub></var>, <var>y<sub>2</sub></var>) とします。</p>

〓37〓〓36〓の表示例

＜memo>
MathMLはSVGと同様にHTMLに取り込まれているにも関わらず、ブラウザーのサポート状況は芳しくありません。これを解消すべく、W3CのMathML Working Groupが次世代となるMathML 4仕様の策定を進めています。
https://www.w3.org/Math/ 

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
var要素にデフォルトのARIAロールはありません。スクリーンリーダーが特別な読み上げをしないことに注意しましょう。

＜中見出し＞
samp要素
＜本文＞
samp要素は、コンピュータープログラムのサンプルや出力結果などを表します〓38〓。表示例は〓39〓となります。

〓38〓samp要素の記述例
＜コード＞
<p>パソコンで<samp>ディスクがいっぱいです。</samp>というエラーメッセージが出力されました。

〓39〓〓38〓の表示例

＜小見出し
内容モデル
＜本文＞
samp要素の内容モデルはPhrasingです。kbd要素やvar要素などと組み合わせて使うこともできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
samp要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、samp要素について特別な読み上げをしません。

＜中見出し＞
kbd要素
＜本文＞
kbd要素はユーザーの入力を表します。入力とは、典型的にはキーボード入力を指しますが、音声や他のデバイスによる入力でも構いません。〓40〓の例では、ユーザーが実際にキーボードで入力する部分をkbd要素としてマークアップしています。表示例は〓41〓となります。

〓40〓kbd要素の記述例
＜コード＞
<p>コピーのショートカットキーは、Windowsでは<kbd>Ctrl+C</kbd>、MacOSでは<kbd>command+C</kbd>です。

〓41〓〓40〓の表示例

＜小見出し＞
内容モデル
＜本文＞
kbd要素の内容モデルはPhrasingです。kbd要素を入れ子にもでき、修飾キーを使った入力などをkbd要素の入れ子で表現できます〓42〓。

〓42〓kbd要素を入れ子にした例
＜コード＞
コピーのショートカットキーは、Windowsでは<kbd><kbd>Ctrl</kbd>+<kbd>C</kbd></kbd>、MacOSでは<kbd><kbd>command</kbd>+<kbd>C</kbd></kbd>です。

＜本文＞
とはいえ、このように細かくマークアップすることが必須というわけではありません。複雑なスタイルを適用しないのであれば、先に挙げた例のように一括りにするだけで十分です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
kbd要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、kbd要素について特別な読み上げをしません。

＜中見出し＞
sup要素およびsub要素
＜本文＞
sup要素は上付き文字（superscript）を、sub要素は下付き文字（subscript）を表します〓43〓。表示例は〓44〓となります。

〓43〓sup要素とsub要素の記述例
＜コード＞
<p>二酸化炭素はCO<sub>2<sub>と書き表せます。
<p>2<sup>8</sup>は256です。

〓44〓〓43〓の表示例

＜本文＞
これらの要素は、上付き・下付きになることが意味のある文字に対して使用します。装飾目的などで、単に文字の表示位置をずらすために使うべきではありません。

＜小見出し＞
内容モデル
＜本文＞
sup要素、sub要素の内容モデルはPhrasingです。読みやすいかどうかはともかく、sub要素やsup要素を入れ子にできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
sup要素、sub要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは特別な読み上げをしないため、文字が上付き・下付きであることは伝わらない可能性があることに注意しましょう。

<memo>
MathMLはSVGと同様にHTMLに取り込まれているにも関わらず、ブラウザーのサポート状況は芳しくありません。これを解消すべく、W3CのMathML Working Groupが次世代となるMathML 4仕様の策定を進めています。
https://www.w3.org/Math/ 

＜中見出し＞
i要素
＜本文＞
i要素は、典型的にイタリック体（斜体）で表されるような、通常のテキストとは異なる部分を表します。
古いHTMLではイタリック体のための要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートではイタリック体で表現されますが、スタイルは変更できるため、必ずイタリック体になるとは限りません。
日本語における伝統的な組版では、そもそもイタリック体で文字を表現することがないため、i要素でマークアップするべきテキストを想定するのは難しいでしょう。無理に使わず、他に適切な要素がないかどうかを検討すべきです。たとえば、強調ならばem要素を使うことができます。

＜小見出し＞
内容モデル
＜本文＞
i要素の内容モデルはPhrasingです。実用上の意義はさておき、i要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
i要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、i要素が使われていることは伝わらない可能性があります。
この要素は一部でアイコンフォントを使用する際に使われることがあり、iconの“i”と理解されていることがあるようですが、HTML仕様ではそのような意味は定義されていません〓45〓。
この目的のためにはspan要素を使用するのが適切です〓46〓。

<memo>
https://github.com/w3c/html/issues/732で議論されたこともありましたが、iconの“i”を表すものではないことが確認されています。 

〓45〓不適切なi要素の記述例
＜コード＞
<!-- 不適切なアイコンフォント -->
<i class="fas fa-address-book"></i>


〓46〓span要素を用いた適切な記述例
＜コード＞
<!-- アイコンフォント -->
<span class="fas fa-address-book"></span>

＜本文＞
もっとも、アイコンフォント自体にウェブアクセシビリティ上の問題が多く、span要素を使ってもそれらの問題は解決しないことに注意してください。

＜中見出し＞
b要素
＜本文＞
b要素は、特に重要ではないものの、注目すべきテキストの範囲を表します。文中のキーワードや記事のリード文など、慣習的に太字にされるようなものを表現できます〓47〓。表示例は〓48〓となります。

〓47〓b要素の記述例
＜コード＞
<h3>山登りの魅力について</h3>
<p><b>そこに山があるから</b></p>
<p>山ならではの四季折々の景色、街の喧騒を離れた自然、登山仲間との交流などなど、いろいろな魅力について記します。</p>

〓48〓〓47〓の表示例

＜本文＞
古いHTMLでは太字を表現する要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートでは太字で表現されますが、スタイルは変更できるため、必ず太字になるとは限りません。
あるテキストを太字にしたい場合、ほとんどのケースでb要素よりも適切な要素があるはずです。見出しを表すならばh1-h6要素を、重要性を表すならばstrong要素を、強調を表すならばem要素を使うべきです。文中のキーワードもmark要素で表現できることがあります。b要素を使うのは、他に適切な要素がない場合の最後の手段です。

＜小見出し＞
内容モデル
＜本文＞
b要素の内容モデルはPhrasingです。実用上の意義はさておき、b要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
b要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、b要素が使われていることは伝わらない可能性があります。

＜中見出し＞
u要素
＜本文＞
u要素は、綴りの誤ったテキストやなど、一般的に下線付きで表現されるようなものを表します。
古いHTMLでは単に下線を引く要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートでは下線付きで表現されますが、スタイルは変更できるため、必ず下線が付くとは限りません。
HTML仕様では、中国語において固有名詞を区別するために下線を使うことがあると述べられています。日本語では、この要素の使用が望ましい状況は稀でしょう。多くの場合、em要素、strong要素、mark要素などといった他の要素がより適切です。

<memo>
Proper name mark - Wikipedia （https://en.wikipedia.org/wiki/Proper_name_mark）では、一部地域で使用されているとあります。 

＜小見出し＞
内容モデル
＜本文＞
u要素の内容モデルはPhrasingです。実用上の意義はさておき、u要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
u要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、u要素が使われていることは伝わらない可能性があります。
u要素のデフォルトスタイルは下線であり、これは慣習的なハイパーリンクの下線のレンダリングと衝突します。WCAG 2.1達成基準1.4.1色の使用の観点からも、この要素は利用しないほうがよいでしょう。

＜中見出し＞
mark要素
＜本文＞
mark要素は、第三者による参照の目的で行われるテキストのハイライトを表します。元の文脈では特に強調されていたわけではない部分を、参照する側の都合でハイライトするものです。
たとえば、引用文の一部を引用者が強調するケースや、検索結果ページ上で検索した語句をハイライトする場合に使います〓49〓。表示例は〓50〓となります。

〓49〓mark要素の記述例
＜コード＞
<p>mark要素のHTML仕様訳によれば、この要素は次のように定義されます。</p>
<blockquote>
<p>mark要素は、別のコンテキストにおいて関連性のために、<mark>参照目的でマークまたは強調表示される</mark>ある文書内の一連のテキストを表す。引用文または文から参照されるテキストのブロック内で使用される場合、ブロックがもともと書かれた際に、もともと存在しないが、<mark>オリジナルの著作者によって重要だと考えられていないかもしれない</mark>だろう、<mark>テキストの一部に読者の注意を喚起する</mark>ために追加されたハイライトを示す。</p>
</blockquote>
<p>※mark要素でのマークアップ部分は引用者による強調です。</p>

〓50〓〓49〓の表示例

＜本文＞
元の文の文意としての強調であればem要素などを使うべきです。また、スペルミスの指摘などであればu要素を使ってもよいでしょう。

＜小見出し＞
内容モデル
＜本文＞
mark要素の内容モデルはPhrasingです。em要素などを含むテキストをまるごとmark要素でのマークアップもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
mark要素にデフォルトのARIAロールはありません。ただし、一部のスクリーンリーダーは「マークあり」などと読み上げます。

<memo>
WAI-ARIA 1.3 (Editor's Draft)ではmarkロールが検討されています。
https://w3c.github.io/aria/#mark

＜中見出し＞
bdi要素およびbdo要素
＜本文＞
bdi要素を使うと、書字方向が異なる可能性のあるテキストの範囲を明示できます。
日本語や英語のテキストは通常、左から右に向かって書かれますが、言語によってはそうでないものもあり、たとえばアラビア語は右から左に向かって書かれます。通常、論理的な順に文字を記述しておけば、ブラウザーが適切に書字方向を切り替えて表示するため、特に問題はありません。
しかし、書字方向の異なる言語が混在する場合は面倒なことになります。特に、アラビア数字（算用数字）や算術記号などは複数の言語で使われるため、書字方向がどちらなのか判別できないことがあります。〓51〓の上では、英語の文中に、アラビア語のユーザー名と日付が出現しています。
この場合、:以降の記号と数字がアラビア語の一部であるのか、英語の一部であるのかは判然としません。ブラウザーは数字をアラビア語の一部と解釈して、右から左に向かって表示する可能性があります。そこで〓51〓の下のように、アラビア語の範囲を明示的にbdi要素でマークアップします。
こうすると、異なる書字方向の可能性があるのはbdi要素の内容だけであり、その外にある記号と数字の部分は英語の書字方向であることが伝わります。
なお、それぞれの表示例は〓52〓となります。

〓51〓英語の文中にアラビア語が混在する記述例
＜コード＞
<p>User <b>إيان</b> : 2012/12/26</p>

<p>User <bdi>إيان</bdi> : 2012/12/26</p>


〓52〓〓51〓の表示例

＜本文＞
bdo要素は、テキストの書字方向規則を明示的に上書きします。HTML文書では通常、論理的な順に文字を記述しますが、もともと表示順に文字が並べ替えられたデータになっているような場合には、表示すると逆転してしまいます。そのような場合、bdo要素を使うと書字方向を強制できます〓53〓。bdi要素とbdo要素のどちらを使うのかよいのかなど、より深い書字方向の設定については、W3C i18n文書を参照ください。

〓53〓bdo要素で方向を強制した記述例
＜コード＞
User <bdo dir="rtl">إيان</bdo> : 2012/12/26


<memo>
W3C i18n文書
https://www.w3.org/International/

＜小見出し＞
内容モデル
＜本文＞
bdi要素とbdo要素の内容モデルはPhrasingです。マークアップを含むテキストをまるごとbdi要素でのマークアップもできます。

＜小見出し＞
属性
＜本文＞
bdi要素、bdo要素には特別な属性はありませんが、dir属性は特殊な扱いを受けます。

＜丸見出し＞
dir属性
＜本文＞
dir属性で書字方向を指定します。"ltr"を指定すると左から右、"rtl"を指定すると右から左となります。"auto"を指定すると、ブラウザーの書字方向アルゴリズムに従って自動処理されます。
dir属性はグローバル属性であり、他の要素にも指定できます。他の要素の場合、dir属性がなければ書字方向は親要素から継承されますが、bdi要素とbdo要素の場合には継承されません。
bdi要素の場合、dir属性を省略すると"auto"の状態になります。親要素の書字方向の指定は無視され、要素内は書字方向アルゴリズムに従って処理します。
bdo要素の場合、dir属性が必須であり、"ltr"か"rtl"のいずれかを指定しなければなりません。"auto"を指定することはできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
bdi要素とbdo要素にデフォルトのARIAロールはありません。bdo要素を利用して書字方向を強制した場合でも、スクリーンリーダーではソースコード上の順で読み上げてしまう可能性があることに注意してください。

＜中見出し＞
span要素
＜本文＞
span要素は、それ自身は何の意味も持たない、汎用のコンテナーです。div要素がまとまったフレーズなどのために用意されるのに対し、span要素は文の一部のフレーズなどに使用します。たとえばclassやlang、dir属性などのグローバル属性と併せて使用する場合に役立ちます。
ほとんどの場合は、他の要素がより適切となるでしょう。より適切な要素が他にないか検討してみてください。
〓54〓の例は、コンピューターコードを色付けする（シンタックスハイライト）ために、span要素とclass属性を使用しています。

〓54〓span要素の記述例
＜コード＞
<pre class="syntax-highlight"><code>
<span class="synComment">&lt;!doctype html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
</code>
</pre>

＜小見出し＞
内容モデル
＜本文＞
span要素の内容モデルはPhrasingです。マークアップを含むテキスト全体をspan要素でマークアップできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
span要素にデフォルトのARIAロールはありません。span要素を使って要素の見た目を変更しても、スクリーンリーダーでは特別な読み上げがなされないことに注意してください。
特に、span要素にonclick属性などを付けてボタンのような挙動にした場合、スクリーンリーダーではボタン扱いされませんし、キーボード操作もできない場合があります。このような問題を解決する方法については、Chapter4-4を参照してください。

<memo>
WAI-ARIA 1.2ではgenericロールが定義されています。
https://www.w3.org/TR/wai-aria-1.2/#generic 

＜中見出し＞
br要素
＜本文＞
br要素は改行を表します。これは単なる改行であり、意味的な区切りではありません。意味的には一連のものである一方で、改行によって行を分割することが有効であるような例としては、住所が挙げられます〓55〓。表示例は〓56〓となります。

〓55〓br要素の記述例
＜コード＞
<p>
〒102-0074<br>
東京都千代田区<br>
九段南一丁目5番5号<br>
九段サウスサイドスクエア（旧 Daiwa九段ビル）
</p>

〓56〓55〓の表示例

住所の他には、詩などの改行を表現するのにも使用できます。
このように、実際にbr要素が必要になるケースは多くありません。改行の位置が意味的な区切りになる場合は、br要素ではなく他のマークアップを利用するべきです。たとえば、それぞれをp要素としてマークアップします〓56〓。

〓56〓様々なbr要素の記述例
＜コード＞
<!-- 濫用されている例 -->
<p><a ...>34件のコメント</a><br>
<a ...>コメントを追加する</a></p>

<p><label>名前: <input name="name"></label><br>
<label>住所: <input name="address"></label></p>

<!-- 適切な例 -->
<p><a ...>34件のコメント</a></p>
<p><a ...>コメントを追加する</a></p>

<p><label>名前: <input name="name"></label></p>
<p><label>住所: <input name="address"></label></p>

＜本文＞
特に、br要素を連続で用いて段落の区切りを表現することは避けるべきです〓57〓。

〓57〓br要素を区切りに用いた不適切な記述例
＜コード＞
<!-- 悪い例 -->
最初の段落です。<br>
<br><!-- 1行の空けることで段落間を表現 -->
次の段落です。

＜本文＞
このような場合、それぞれをp要素としてマークアップし、段落間の空きはCSSで調整するようにします〓58〓。

〓58〓p要素を用いた適切な記述例
＜コード＞
<!-- 問題ない例 -->
<p>最初の段落です。</p>
<p>次の段落です。</p>

＜本文＞
また、段落間に限らず、余白を設ける目的でbr要素を使うべきではありません〓59〓。

〓59〓余白にbr要素を用いた不適切な記述例
＜コード＞
<!-- 悪い例 -->
<p>段落の下に余白を作る<br>
<br>
<br>
</p>

＜本文＞
古いブラウザーは、br要素が連続しても1度しか改行しないことがありました。そのため、〓60〓のようにbr要素をp要素に入れるという工夫をするケースも見られました。

〓60〓br要素をp要素に入れた不適切な記述例
＜コード＞
<!-- 悪い例 -->
<p>段落の下に余白を作る</p>
<p><br></p>
<p><br></p>

＜本文＞
いずれにせよ、余白を設ける目的でbr要素を使うべきではありません。余白を設ける場合はCSSを用います。

＜小見出し＞
属性
＜本文＞
br要素に独自の属性はありませんが、ブラウザーは互換性の目的でclear属性に対応していることがあります。

＜丸見出し＞
廃止された属性: clear属性
＜本文＞
かつてのHTML仕様では、br要素にclear属性が定義されていました。これを指定すると、img要素のalign属性で指定されたフロートを解除し、続くテキストが画像の下から始まるようになります。端的にはCSSのclear:bothと同じ機能です。img要素のalign属性が廃止されるとともに、この属性も廃止されました。フロートの指定や解除はCSSで行います。

＜小見出し＞
内容モデル
＜本文＞
br要素の内容モデルはNothingです。この要素は空要素であり、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
br要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしませんが、br要素は単語の区切りとして扱われることがあることに注意してください。たとえば、〓61〓のようにbr要素を利用すると、文字を縦書きのように見せかけることができます。

〓61〓br要素で縦書きを表現した不適切な記述例
＜コード＞
<!-- 悪い例 -->
<p>
縦<br>
書<br>
き<br>
</p>

＜本文＞
しかし、スクリーンリーダーは1つの単語としては読み上げず、1文字ずつ「たて」「しょ」「き」と読み上げてしまう場合があります。
文字の配置を整えるためにbr要素を使うことは避けるべきです。文字の配置にはCSSを用います。縦書きの場合は、CSSのwriting-modeプロパティで実現できます。

<memo>
writing-mode
https://developer.mozilla.org/ja/docs/Web/CSS/writing-mode

＜中見出し＞
wbr要素
＜本文＞
wbr要素は、その位置で改行が可能であることを表します。br要素と異なり、常に改行されるわけではありません。
たとえば、長いURLが存在するとき、途中にwbr要素を入れておくと、必要に応じてwbr要素の位置で改行されることが期待できます〓62〓。表示例は〓63〓となります。

〓62〓wbr要素の記述例
＜コード＞
<p>http://this<wbr>.is<wbr>.a<wbr>.really<wbr>.long<wbr>.example<wbr>.com/With<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages
</p>

〓63〓〓62〓の表示例

＜小見出し＞
内容モデル
＜本文＞
wbr要素の内容モデルはNothingです。この要素は空要素であり、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
wbr要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしません。
