＜タイトル＞
テキストレベルセマンティックス
＜リード＞
ここでは、HTML仕様でテキストレベルセマンティックスとして分類されている要素を紹介します。これらは主にテキストをマークアップすることを目的とし、要素カテゴリーPhrasingに属するものです。

＜中見出し＞
a要素
＜本文＞
a要素は、「アンカー（anchor）」を表現する要素です。多くの場合はhref属性を指定して、リンクとして利用します。詳細はChapter3-5で紹介します。

＜中見出し＞
em要素
＜本文＞
em要素は、強調、強勢を表します。たとえば、文の一部を強調してニュアンスを変化させることができます〓01〓。

〓01〓em要素の記述例
＜コード＞
<p>猫はかわいい動物です。</p>
<p><em>猫</em>はかわいい動物です。</p>
<p>猫<em>は</em>かわいい動物です。</p>
<p>猫はかわいい<em>動物</em>です。</p>
<p><em>猫はかわいい動物です。</em></p>

＜本文＞
em要素の有無や場所によってニュアンスが違ってきます。「猫」を強調すれば、動物の種類が重要というニュアンスになりますし、「動物」を強調すれば、かわいいけれどあくまで動物であるというニュアンスが出るでしょう。文全体を強調した場合は、この文全体を熱心に伝えたいというニュアンスが出てきます。

＜memo＞
典型的なブラウザーのデフォルトスタイルシートでは、em要素はイタリック体（斜体）で表現されます。しかし、em要素はイタリック体のための要素ではなく、CSSによってイタリック体ではないスタイルを与えることも可能なため、イタリック体を表現する目的で使うべきではありません。英語のようなアルファベット主体の言語において、慣用的にイタリック体にする箇所については、i要素を利用します。

＜本文＞
em要素は重要性を伝えるものではない点に注意してください。重要性を伝えたい場合には、後述のstrong要素を使います。

＜小見出し＞
内容モデル
＜本文＞
em要素の内容モデルはPhrasingです。em要素自身もPhrasingに属しますから、em要素を入れ子にもできます。これによって、より強いレベルの強調を表現できます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
em要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、em要素について特別な読み上げをしません。em要素の有無によって文の意味が大きく変わる表現は避けたほうがよいでしょう。

＜memo＞
WAI-ARIA 1.2ではemphasisロールが導入される予定です。近い将来、em要素はデフォルトでemphasisロールを持つことになるでしょう。
https://www.w3.org/TR/wai-aria-1.2/#emphasis

＜中見出し＞
strong要素
＜本文＞
strong要素は、重要性、深刻性、緊急性を表します。見出し、キャプション、段落などの文の中で、本当に重要な部分を区別するために使用します。〓02〓はstrong要素で重要性を表現した例です。

＜memo＞
古いHTMLでは強調を表すとされていましたが、現在では単なる強調に使うことは推奨されません。強調にはem要素を使います。

〓02〓strong要素で重要性を表現した例
＜コード＞
<p><strong>酸性タイプ</strong>の製品と一緒に使う（まぜる）と有害な塩素ガスが出て<strong>危険</strong>。</p>

〓03〓は深刻性を示した例です。警告または注意の通知をマークアップするために使用できます。

〓03〓strong要素で深刻性を表現した例
＜コード＞
<p><strong>注意。</strong>テレビを見るときは、部屋を明るくして、なるべくテレビから離れて見てね。</p>

〓04〓は緊急性を示した例です。ユーザーに、他の部分より先に読んでほしい箇所を示すために使用しています。これらをブラウザーで表示すると〓05〓となります。

〓04〓strong要素で緊急性を表現した例
<p>リマインダー</p>
<p>今日のタスク:</p>
<ul>
  <li><p><strong>オーブンの電源を切る。</strong></p></li>
  <li><p>ごみを出す。</p></li>
  <li><p>洗濯する。</p></li>
</ul>

〓05〓ブラウザーで〓02〓～〓04〓を表示した例

＜小見出し＞
内容モデル
＜本文＞
strong要素の内容モデルはPhrasingです。strong要素自身もPhrasingに属しますから、strong要素を入れ子にもできます。これによって、より強い重要性を表現できます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
strong要素にデフォルトのARIAロールはありません。重要性を伝えるとされているにもかかわらず、多くのスクリーンリーダーは、strong要素について特別な読み上げをしません。strong要素の有無によって文の意味が大きく変わる表現は避けたほうがよいでしょう。

＜memo＞
WAI-ARIA 1.2ではstrongロールが導入される予定です。近い将来、strong要素はデフォルトでstrongロールを持つことになるでしょう。
https://www.w3.org/TR/wai-aria-1.2/#strong 

＜中見出し＞
small要素
＜本文＞
small要素は、一般的に小さい文字で表記されるような、副次的なコメントを表現します。例としては、補足説明、著作権表示、免責事項、法的な注意書きなどが挙げられます。基本的には、〓06〓のように文章のテキストの一部を修飾する形で利用します。表示例は〓07〓のようになります。

＜memo＞
small要素が文を弱める意味を持たないことに注意してください。em要素やstrong要素と反対の意味にはなりません。

＜本文＞
〓06〓small要素の記述例
＜コード＞
<p>しょうゆ 198円<small>（税込み）</small></p>

〓07〓ブラウザーによる〓06〓の表示例

＜本文＞
文全体をsmall要素で囲むこともできます。〓08〓は著作権の帰属表示（Copyright）に用いた例です。

〓08〓small要素で文全体を囲んだ記述例
＜コード＞
<p><small>© ボーンデジタル</small></p>

＜本文＞
長文にsmall要素を利用するべきではありません。たとえば、複数の段落で構成される利用規約を掲載する場合、その利用規約はもはや主題となる内容であって、副次的なコメントとはいえません。

＜小見出し＞
内容モデル
＜本文＞
small要素の内容モデルはPhrasingです。em要素と併用して一部を強調したり、strong要素と併用しての重要性の表現も可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
small要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、small要素について特別な読み上げをしません。small要素の有無で意味が大きく変わる表現は避けたほうがよいでしょう。

＜中見出し＞
s要素
＜本文＞
s要素は、もはや正確でなくなったものや、関連しなくなったものを表現します。ブラウザーのデフォルトスタイルシートでは、多くの場合、打ち消し線を伴って表現されます。〓09〓では、価格が値下げされ、値下げ前の価格がもはや正確でないことを表現するためにs要素を用いています。
〓10〓が表示例です。

〓09〓s要素の記述例
＜コード＞
<p>ゲーミングキーボード</p>
<p><s>希望小売価格 15000円</s></p>
<p>セール価格 9800円</p>

〓10〓ブラウザーによる〓09〓の表示例

＜本文＞
s要素は、編集による削除や訂正を表現するものではありません。編集による削除を表現したい場合はdel要素を使用します。

＜小見出し＞
内容モデル
＜本文＞
s要素の内容モデルはPhrasingです。他のPhrasingに属する要素をまるごと修飾可能です。p要素など、Phrasingに属さない要素は子にできないため、複数の段落を一括でs要素で修飾するような使い方はできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
s要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、s要素について特別な読み上げをしないことに注意してください。s要素はテキストの意味を変更する意図で使われることが多いにもかかわらず、伝わらない場合があります。〓11〓は望ましくない例です。

〓11〓s要素の不適切な記述例
＜コード＞
<p>価格<s>98</s>90円</p>

＜本文＞
この例は、98円を90円に訂正したことを意図しています。しかし、s要素の存在が伝わらない場合、9890円と誤解される可能性があります。〓09〓のように、前後のテキストからそれぞれの価格がわかるようにするべきです。

＜中見出し＞
cite要素
＜本文＞
cite要素は、作品などのタイトルを表現します。ここでいう作品には、書籍、文書、楽曲、映画、ゲーム、プログラム、美術作品、ウェブページといったさまざまなものが含まれます。
典型的には、引用の際の出典や、参考文献のタイトルを示す際に利用します。たとえば〓12〓のようにマークアップできます。

〓12〓cite要素の記述例
＜コード＞
<p>Berners-Lee, Tim. <cite>Web の創成 World Wide Web はいかにして生まれどこに向かうのか</cite>. 高橋徹監訳. 毎日コミュニケーションズ, 2001, 279p.</p>

＜memo＞
〓12〓の記述例はSIST 02『参照文献の書き方』に従った文献情報です。
SIST 02 参照文献の書き方
https://jipsti.jst.go.jp/sist/handbook/sist02_2007/main.htm

＜本文＞
〓12〓において、cite要素が著作者名を含んでいないことに注意してください。cite要素の内容はあくまで作品のタイトルであり、著作者、発言者などの表現に使うべきではありません。〓13〓のように、タイトルに加えて他の情報を含めることも避けるべきです。〓14〓のように、正式なタイトルのみをcite要素とします。

〓13〓cite要素でタイトル以外を含めた望ましくない記述例
＜コード＞
<p>本文は<cite>英語版WikipediaのHTMLの項目</cite>を参考にしました。</p>

〓14〓cite要素でタイトル部分のみを含む記述例
＜コード＞
<p>本文は英語版Wikipediaの<cite>HTML</cite>の項目を参考にしました。</p>

＜小見出し＞
内容モデル
＜本文＞
cite要素の内容モデルはPhrasingです。作品タイトルの一部を強調するようなことは少ないでしょうが、たとえばsup要素やsub要素などを入れることが可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
cite要素にデフォルトのARIAロールはありません。前後の文脈から作品のタイトルであることは伝わる場合が多いと思われますが、cite要素の有無によって意味が変わるような表現は避けたほうがよいでしょう。

＜中見出し＞
q要素
＜本文＞
q要素は、別のソースから引用されたフレージングコンテンツを表します。

＜memo＞
q要素は文中に短いフレーズを引用するためのものです。一定以上の長さのある、段落のかたまりを引用するような場合は、blockquote要素を利用します。

＜本文＞
この要素を用いると、ブラウザーによって要素の前後に引用符が自動的に挿入されます。そのため、要素の前後には引用符の文字を入れてはなりません。逆に、テキスト中の引用箇所に既に引用符が付いているならば、無理にq要素としてマークアップする必要はありません。

＜memo＞
挿入される引用符の種類は言語に依存します。たとえば、日本語ではかぎ括弧（「」）、英語ではクォーテーションマーク（""）となるのが一般的です。また、引用符の種類はスタイルシートで変更できます。
12.3.1 Specifying quotes with the 'quotes' property
https://www.w3.org/TR/CSS2/generate.html#propdef-quotes

＜本文＞
〓15〓はq要素を使用して俳句を引用した例です。一般的なブラウザーのデフォルトスタイルでは、〓16〓のように引用符が挿入されます。

〓15〓q要素の記述例
<p lang="ja">松尾芭蕉が<q>五月雨をあつめて早し最上川</q>と詠んだ最上川は……</p>
<p lang="en">The Mogami River, which Matsuo Basho wrote the Japanese poem <q>五月雨をあつめて早し最上川</q>, is ...</p>

〓16〓ブラウザーによる〓15〓の表示例

＜本文＞
引用ではないものに対してq要素を使用してはなりません。特別な意味で使用する単語や、人物の発言などを引用符で括る表現は一般的ですが、それらは引用ではないため、q要素で表現することは不適切です。

＜小見出し＞
内容モデル
＜本文＞
q要素の内容モデルはPhrasingです。q要素自身もPhrasingに属するため、q要素を入れ子にもできます。つまり、引用を含むフレーズをさらに引用する表現が可能です。

＜小見出し＞
属性
＜本文＞
q要素にはcite属性が定義されています。

＜丸見出し＞
cite属性
＜本文＞
cite属性を指定すると、引用の出典となるURLを示すことができます。これは、blockquote要素のcite属性と同じです。
blockquote要素のcite属性と同様に、一般的なブラウザーはリンクとして扱わないため、このURLがユーザーに伝わるとは限りません。出典へのリンクを設けたい場合は、cite要素とa要素を併用するとよいでしょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
q要素にデフォルトのARIAロールはありません。スクリーンリーダーはq要素を特別なものとして読み上げない可能性があります。ただし、前後に補われた引用符は読み上げられる場合があります。

＜memo＞
基本的にスクリーンリーダーはq要素に補われた引用符を認識します。ただし、引用符は記号であるため、読み上げられない場合もあります。記号が読み上げられるかどうかは、スクリーンリーダーの設定や読み上げのモードに依存します。

＜中見出し＞
dfn要素
＜本文＞
dfn要素は、文書中で用語を定義する際の、定義された用語を表します。
この要素を使用する際は、その定義（用語の説明）とセットにする必要があります。dfn要素の最も近い祖先要素となる段落、セクション、あるいは説明リスト（dl要素）のグループに定義の説明を含めなければなりません。

＜memo＞
段落は典型的にはp要素ですが、p要素に限定されません。

＜本文＞
通常は、dfn要素の内容が用語としての定義となります。〓17〓の例では「dfn」という単語を定義していることになります。

〓17〓dfn要素で囲まれたテキスト「dfn」が定義となる記述例
＜コード＞
<p><dfn><code>dfn</code></dfn>要素は、用語の定義を表します。</p>

＜小見出し＞
内容モデル
＜本文＞
dfn要素の内容モデルはPhrasingですが、dfn要素を子孫要素に持つことは禁止されています。
〓18〓のように、dfn要素の唯一の子要素がtitle属性を持つabbr要素だった場合は、そのabbr要素のtitle属性の値が用語として定義されたことになります。後述するtitle属性の説明も参照してください。

〓18〓abbr要素のtitle属性の値「Hypertext Markup Language」が用語として定義となる記述例
＜コード＞
<p><dfn><abbr title="Hypertext Markup Language">HTML</abbr></dfn>は、マークアップ言語の一種であり……</p>

＜小見出し＞
属性
＜本文＞
dfn要素に固有の属性はありませんが、title属性は特殊な扱いを受けます。

＜丸見出し＞
title属性
＜本文＞
dfn要素にtitle属性が指定されている場合、title属性で指定した値が用語として定義されます。〓19〓の例では、説明文としては「重曹」という単語を提示しつつ、「炭酸水素ナトリウム」という用語の定義をしています。
このため、dfn要素にtitle属性を指定する際には、定義される用語以外のものを含めることはできません。

〓19〓dfn要素のtitle属性の値「炭酸水素ナトリウム」が定義となる記述例
＜コード＞
<p><dfn title="炭酸水素ナトリウム">重曹</dfn>は、常温で白い粉末であり……</p>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
dfn要素のデフォルトのARIAロールはtermです。ただし、多くのスクリーンリーダーは特別な読み上げをしません。前後の文脈から、用語の定義であることがわかるようにするとよいでしょう。

＜中見出し＞
abbr要素
＜本文＞
abbr要素は、略語や頭字語を表します。多くの場合、title属性を利用して何の略語であるのかを示します。
略語や頭字語をすべてabbr要素でマークアップする必要はありません。たとえば、前後に括弧書きを付けることでマークアップすることなく略語であることを示すことができます〓20〓。このような表記ができない場合や、読者に馴染みのない単語で明示的にマークアップしたい場合、スタイル付けしたい場合などにabbr要素を使用するとよいでしょう。

〓20〓略語の後に括弧書きで完全な表記を示している例
＜コード＞
HTML (HyperText Markup Language)はマークアップ言語の一種であり……

＜小見出し＞
内容モデル
＜本文＞
abbr要素の内容モデルはPhrasingです。必要があるかは別として、abbr要素自身を入れ子にもできます。

＜小見出し＞
属性
＜本文＞
abbr要素に固有の属性はありませんが、title属性は特殊な扱いを受けます。

＜丸見出し＞
title属性
＜本文＞
〓21〓のようにabbr要素にtitle属性を指定すると、その値は内容の単語を展開したもの（省略しない、完全な表記）を表します。

〓21〓abbr要素のtitle属性の記述例
＜コード＞
<abbr title="World Wide Web Consortium">W3C</abbr>
<abbr title="日本銀行">日銀</abbr>

＜本文＞
前後で何の略語かを説明している場合など、展開を示す必要がないケースでは、〓22〓のようにtitle属性を指定せずに使うこともできます。

〓22〓title属性を指定しないabbr要素の記述例
＜コード＞
<abbr>HTML</abbr>はHyperText Markup Languageの略です。

＜本文＞
ただし、title属性を指定せずにabbr要素を使った場合、同一の略語は同一の展開を持つものとみなされます。異なる言葉が同じ略語になる場合は、〓22〓のようにそれぞれにtitle属性を指定して区別します。

〓22〓異なる言葉が同じ略語になる場合にabbr要素でtitle属性を指定した例
＜コード＞
<p><abbr title="System and Organization Controls">SOC</abbr>レポートの中では、
<abbr title="Security Operation Center">SOC</abbr>によるシステム監視に言及している。</p>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
abbr要素にデフォルトのARIAロールはありません。スクリーンリーダーにはtitle属性の読み上げを期待したいところですが、2021年現在、この読み上げを行う支援技術は知られていません。何の略であるか確実に伝えたい場合は、〓20〓のような括弧書きも検討するとよいでしょう。

＜コラム＞
廃止された要素:acronym要素
＜本文＞
古いHTML4では、abbr要素と別に、頭字語を表現するためのacronym要素が定義されていました。略語をどちらでマークアップするべきか迷う場面がよくありましたが、現在のHTMLではacronym要素は廃止され、abbr要素に一本化されています。頭字語もabbr要素で表現すればよく、迷う必要はありません。
＜/コラム＞

＜中見出し＞
ルビ関連要素
＜本文＞
ルビ関連要素は複雑であり、2021年時点で仕様が整理されていないことから、本書では概要の説明に留めます。
ruby要素、rt要素はルビ注釈を付けるための要素です。ルビを付ける範囲全体をruby要素としてマークアップし、ルビとなる文字をrt要素で表します。たとえば〓24〓のようになります。表示例は〓25〓となります。

＜memo＞
W3C HTML 5.2では正式な要素として定義されていた一方で、HTML Standardは2021年時点でrb要素とrtc要素はdeprecated（旧式の機能）とされています。ルビ関連要素がHTML仕様に包括的に取り込まれることを目指し、W3Cで（再）開発が行われる見込みです。
https://github.com/whatwg/html/pull/7405

〓24〓ruby要素とrt要素の記述例
＜コード＞
<ruby>漢<rt>かん</rt>字<rt>じ</rt></ruby>

〓25〓ブラウザーによる〓24〓の表示例

＜本文＜
ただし、ruby要素を理解しないブラウザーや支援技術は、これを「漢かん字じ」のように表示（読み上げ）する可能性もあります。これでは意味が通じなくなるため、ruby要素を理解しないブラウザーとの互換性のために、rp要素が用意されています。rp要素の内容は、ruby要素を理解するブラウザーには無視されます。〓26〓の例は、ruby要素を理解しないブラウザーでは「漢（かん）字（じ）」のように表示されます。

〓26〓rp要素の記述例
＜コード＞
<ruby>漢<rp>（</rp><rt>かん</rt><rp>）</rp>字<rp>（</rp><rt>じ</rt><rp>）</rp></ruby>

＜中見出し＞
time要素
＜本文＞
time要素は、日付や時刻などの値をマシンリーダブルな形式で表現します。
後述のdatetime属性がない場合は、要素の内容となっているテキストがマシンリーダブルな日時のデータであることを表します。たとえば、2017年1月23日という日付は〓27〓のようにマークアップできます。

〓27〓time要素を用いた日付のマークアップ例
＜コード＞
<time>2017-01-23</time><!-- 日付 -->

＜本文＞
time要素で扱うことができる日時データの種類にはさまざまなものがあり、それぞれについて形式が決められています。〓28〓に代表的なものを取り上げます。Chapter2-2
の「日付と時刻」（P000）もあわせて参照してください。

〓28〓time要素で表現可能な日時データの例
＜コード＞
<time>2017-01</time><!-- 2017年1月 -->
<time>01-23</time><!-- ある年の1月23日 -->
<time>14:56</time><!-- 14時56分 -->
<time>2017-08-29T01:23:45</time><!-- 日付と時刻 -->
<time>-0600</time><!-- タイムゾーンオフセット -->
<time>0789</time><!-- 西暦789年 -->

＜本文＞
形式が適切でない場合はエラーになります。〓28〓の最後の例は西暦789年を表していますが、〓29〓のように書くことはできません。

〓29〓間違ったtime要素の記述例
＜コード＞
<time>789</time><!-- 西暦789年のつもり -->

＜本文＞
このように誤りやすいパターンもあるため、Nu Html Checkerなどのチェックツールを使って、time要素の形式が正しいかどうかを確認するとよいでしょう。

＜小見出し＞
内容モデル
＜本文＞
time要素の内容モデルはdatetime属性の有無によって異なります。datetime属性が存在する場合の内容モデルはPhrasingであり、Phrasingに属する他の要素を子要素にできます。
datetime属性が存在しない場合、time要素の内容は仕様に定められた日時形式のテキストでなければならず、他の要素を入れることはできません。

＜小見出し＞
属性
＜本文＞
time要素ではdatetime属性によってもマシンリーダブルな形式のデータを提供できます。

＜丸見出し＞
datetime属性
＜本文＞
datetime属性を利用すると、任意の形式で書かれた日時に対してマシンリーダブルなデータを提供できます。〓30〓の例では、日本語で書かれた日付に対してマシンリーダブルな形式のデータを提供しています。

〓30〓日本語の日付をtime要素でマークアップした例
＜コード＞
<time datetime="2017-01-23">2017年1月23日</time>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
time要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、time要素について特別な読み上げをしません。

＜memo＞
WAI-ARIA 1.2ではtimeロールが導入される予定です。近い将来、time要素はデフォルトでtimeロールを持つことになるでしょう。
https://www.w3.org/TR/wai-aria-1.2/#time

＜コラム＞
data要素
＜本文＞
time要素はマシンリーダブルな形式で日時のデータを提供しますが、日時以外のデータをマシンリーダブルにしたい場合もあるでしょう。data要素を使うと、任意の内容に対してマシンリーダブルなデータを提供できます。データはvalue属性で指定します。
〓01〓の例では、書名とISBNコードを結び付けています。

〓01〓書名にISBNコードを紐付けた記述例
＜コード＞
<data value="978-4-86246-265-7">デザイニングWebアクセシビリティ - アクセシブルな設計やコンテンツ制作のアプローチ</data>

＜コラム本文＞
〓02〓の例では、人間に対して提示したテキストと同じ意味の値を、マシンリーダブルな形で提供しています。

〓02〓data要素で表示と同等の数値データを提供する例
＜コード＞
<data value="20000">弐萬圓</data>

＜コラム本文＞
〓03〓のように、Microdataと組み合わせてメタデータを提供する方法もあります。

〓03〓Microdataを用いて製品名にIDを紐付けた記述例
＜コード＞
<h1 itemscope>
 <data itemprop="product-id" value="9678AOU879">The Instigator 2000</data>
</h1>
＜/コラム＞

＜中見出し＞
code要素
＜本文＞
code要素は、コンピューターコードを表します。プログラムのソースコードやファイル名など、機械が読み取るコードを表現するのに利用します。〓31〓はHTMLの要素名をcode要素として表記する例です。

〓31〓code要素の記述例
＜コード＞
<p><code>code</code>要素は、コンピューターコードを表します。</p>

＜memo＞
WHATWGが提供するドキュメントでも、HTMLの要素名はcode要素でマークアップされています。

＜本文＞
〓32〓のように、pre要素と併用して複数行にわたるコードを表すこともできます。表示例は〓33〓のようになります。

〓32〓pre要素を使用した複数行にわたるコードの記述例
＜コード＞
<pre><code>
(() => {
  const target = document.getElementById('target');
  if (target === null) return;
  target.textContent = 'Hello, World';
})();
</code></pre>

〓33〓ブラウザーによる〓32〓の表示例

＜小見出し＞
内容モデル
＜本文＞
code要素の内容モデルはPhrasingです。var要素など、Phrasingに属する要素を入れることができます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
code要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、code要素について特別な読み上げをしません。

＜中見出し＞
var要素
＜本文＞
var要素は、数式やプログラムコードにおける変数を表します。〓34〓は、数学に関する記述において変数をマークアップした例です。

〓34〓var要素の記述例
＜コード＞
<p><var>n</var>, <var>m</var>はそれぞれ任意の自然数とします。</p>

＜小見出し＞
内容モデル
＜本文＞
var要素の内容モデルはPhrasingです。変数名の一部を修飾できますし、〓35〓のようにsub要素やsup要素も使用できます。表示例は〓36〓のようになります。

〓35〓変数名を装飾する記述例
＜コード＞
<p>2つの点の座標をそれぞれ (<var>x<sub>1</sub></var>, <var>y<sub>1</sub></var>)、(<var>x<sub>2</sub></var>, <var>y<sub>2</sub></var>) とします。</p>

〓36〓ブラウザーによる〓35〓の表示例

＜memo＞
本格的に数式を扱いたい場合は、MathMLと呼ばれるマークアップ言語を用いた表現も可能です。
ただし、MathMLはSVGと同様にHTMLに取り込まれているにも関わらず、ブラウザーのサポート状況は芳しくありません。これを解消すべく、W3CのMathML Working Groupが次世代の仕様となるMathML 4の策定を進めています。
https://www.w3.org/Math/ 

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
var要素にデフォルトのARIAロールはありません。スクリーンリーダーが特別な読み上げをしないことに注意しましょう。

＜中見出し＞
samp要素
＜本文＞
samp要素は、コンピュータープログラムのサンプルや出力結果などを表します。〓37〓はコンピューターが出力したメッセージをマークアップした例で、表示例は〓38〓のようになります。

〓37〓samp要素の記述例
＜コード＞
<p>パソコンで<samp>ディスクがいっぱいです。</samp>というエラーメッセージが出力されました。

〓38〓ブラウザーによる〓37〓の表示例

＜小見出し
内容モデル
＜本文＞
samp要素の内容モデルはPhrasingです。kbd要素やvar要素などと組み合わせて使うこともできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
samp要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、samp要素について特別な読み上げをしません。

＜中見出し＞
kbd要素
＜本文＞
kbd要素はユーザーの入力を表します。典型的にはキーボード入力を指しますが、音声や他のデバイスによる入力でも構いません。〓39〓の例では、ユーザーが実際にキーボード等で入力する部分をkbd要素としてマークアップしています。表示例は〓40〓のようになります。

〓39〓kbd要素の記述例
＜コード＞
<p>コピーのショートカットキーは、Windowsでは<kbd>Ctrl+C</kbd>、MacOSでは<kbd>command+C</kbd>です。

〓40〓ブラウザーによる〓39〓の表示例

＜小見出し＞
内容モデル
＜本文＞
kbd要素の内容モデルはPhrasingです。kbd要素の入れ子も可能で、〓41〓のような修飾キーを使った入力の表現に利用できます。

〓41〓kbd要素を入れ子にした例
＜コード＞
コピーのショートカットキーは、Windowsでは<kbd><kbd>Ctrl</kbd>+<kbd>C</kbd></kbd>、MacOSでは<kbd><kbd>command</kbd>+<kbd>C</kbd></kbd>です。

＜memo＞
〓41〓のように細かくマークアップすることは必須ではありません。複雑なスタイルを適用しないのであれば、〓39〓の例ように一括りにするだけで十分です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
kbd要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは、kbd要素について特別な読み上げをしません。

＜中見出し＞
sup要素およびsub要素
＜本文＞
sup要素は上付き文字（superscript）を、sub要素は下付き文字（subscript）を表します。〓42〓のようにマークアップすると、表示例は〓43〓のようになります。

〓42〓sup要素とsub要素の記述例
＜コード＞
<p>二酸化炭素はCO<sub>2</sub>と書き表せます。
<p>2<sup>8</sup>は256です。

〓43〓ブラウザーによる〓42〓の表示例

＜memo＞
sup要素およびsub要素は、上付き・下付きになることで意味を持つ文字に対して使用します。装飾目的などで、単に文字の表示位置をずらすために使うべきではありません。

＜小見出し＞
内容モデル
＜本文＞
sup要素、sub要素の内容モデルはPhrasingです。読みやすいかどうかはともかく、sub要素やsup要素を入れ子にできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
sup要素、sub要素にデフォルトのARIAロールはありません。多くのスクリーンリーダーは特別な読み上げをしないため、文字が上付き・下付きであることは伝わらない可能性があることに注意しましょう。

＜memo＞
WAI-ARIA 1.2ではsuperscriptロールとsubscriptロールが導入される予定です。近い将来、sup要素はsuperscriptロールを、sub要素はsubscriptロールを持つことになるでしょう。
https://www.w3.org/TR/wai-aria-1.2/#superscript
https://www.w3.org/TR/wai-aria-1.2/#subscript

＜中見出し＞
i要素
＜本文＞
i要素は、典型的にイタリック体（斜体）で表されるような、通常のテキストとは異なる部分を表します。

＜memo＞
古いHTMLではイタリック体のための要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートではイタリック体で表現されますが、スタイルは変更できるため、必ずイタリック体になるとは限りません。

＜本文＞
日本語における伝統的な組版では、そもそもイタリック体で文字を表現することがないため、i要素でマークアップするべきテキストを想定するのは難しいでしょう。無理に使わず、他に適切な要素がないかどうかを検討すべきです。たとえば、強調ならばem要素を使います。

＜memo＞
欧文フォントの多くは、イタリック体を表現する専用の書体を持っています。それに対し、漢字やひらがなにはイタリックの書体がなく、文字を単純に傾ける処理をしたもの（オブリーク体）が表示されることがほとんどです。この場合、文字がつぶれて読みにくくなることがあります。

＜小見出し＞
内容モデル
＜本文＞
i要素の内容モデルはPhrasingです。実用上の意義はさておき、i要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
i要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、i要素が使われていることは伝わらない可能性があります。
〓44〓のように、この要素はアイコンフォントを使用する際に使われることがありますが、HTML仕様ではそのような用法は定義されていません。〓45〓のようにspan要素を使用します。

＜memo＞
現実にi要素がアイコンとして利用されることがあるため、用法のひとつとして認めるべきか議論されたこともありました。しかし、i要素はiconの“i”の意味を表すものではなく、その用途にはspanを使うべきという結論になっています。 
https://github.com/w3c/html/issues/732

〓44〓不適合となるi要素を用いたアイコンフォントの記述例
＜コード＞
<i class="fas fa-address-book"></i>

〓45〓span要素を用いたアイコンフォントの記述例
＜コード＞
<span class="fas fa-address-book"></span>

＜本文＞
もっとも、アイコンフォント自体にウェブアクセシビリティ上の問題が多く、span要素を使ってもそれらの問題は解決しないことに注意してください。

＜中見出し＞
b要素
＜本文＞
b要素は、特に重要ではないものの、注目すべきテキストの範囲を表します。文中のキーワードや記事のリード文など、慣習的に太字にされるようなものを表現できます。〓46〓はリード文をb要素とした例で、表示例は〓47〓のようになります。

〓46〓b要素の記述例
＜コード＞
<h3>山登りの魅力について</h3>
<p><b>そこに山があるから</b></p>
<p>山ならではの四季折々の景色、街の喧騒を離れた自然、登山仲間との交流などなど、いろいろな魅力について記します。</p>

〓47〓ブラウザーによる〓46〓の表示例

＜memo＞
古いHTMLでは太字を表現する要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートでは太字で表現されますが、スタイルは変更できるため、必ず太字になるとは限りません。

＜本文＞
あるテキストを太字にしたい場合、ほとんどのケースでb要素よりも適切な要素があるはずです。見出しを表すならばh1-h6要素を、重要性を表すならばstrong要素を、強調を表すならばem要素を使うべきです。文中のキーワードもmark要素で表現できることがあります。b要素を使うのは、他に適切な要素がない場合の最後の手段と考えましょう。

＜小見出し＞
内容モデル
＜本文＞
b要素の内容モデルはPhrasingです。実用上の意義はさておき、b要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
b要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、b要素が使われていることは伝わらない可能性があります。

＜中見出し＞
u要素
＜本文＞
u要素は、綴りの誤ったテキストなど、一般的に下線付きで表現されるようなものを表します。

＜memo＞
古いHTMLでは単に下線を引く要素として定義されていました。そのため、多くのブラウザーのデフォルトスタイルシートでは下線付きで表現されますが、スタイルは変更できるため、必ず下線が付くとは限りません。

＜本文＞
この要素の使用が望ましい状況は稀でしょう。多くの場合、em要素、strong要素、mark要素などといった他の要素がより適切です。

＜memo＞
HTML仕様では、中国語において固有名詞を区別するために下線を使うことがあると述べられています。しかしWikipediaの記事によれば、中国語においてもあまり一般的な用法ではないようです。
https://en.wikipedia.org/wiki/Proper_name_mark

＜小見出し＞
内容モデル
＜本文＞
u要素の内容モデルはPhrasingです。実用上の意義はさておき、u要素を入れ子にもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
u要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしないため、u要素が使われていることは伝わらない可能性があります。
u要素のデフォルトスタイルは下線ですが、a要素のハイパーリンクも下線付きで表現されることが多いため、u要素を多用するとリンクと見分けにくくなる問題もあります。

＜本文＞
a要素のデフォルトスタイルでは下線だけでなく色もつくため、色で見分けられるという意見もあるかもしれません。しかし、WCAG 2.1達成基準1.4.1「色の使用」では色に依存しないことを求めているため、色の違い以外で見分けられるようにするべきです。

＜中見出し＞
mark要素
＜本文＞
mark要素は、文章作成者の意図によらない強調やハイライトを表します。たとえば、引用文の一部を引用者が強調するケースや、検索結果ページ上で検索した語句をハイライトする場合に使います。〓48〓は、引用文の一部を引用者が強調した例です。表示例は〓49〓のようになります。

〓48〓mark要素の記述例
＜コード＞
<p>バーナーズ＝リーは以下のように述べています。</p>
<blockquote>
<p>ウェブの力はその普遍性にあります。障害の有無にかかわらず誰もがアクセスできるというのが<mrak>ウェブの本質的な側面</mark>なのです。</p>
</blockquote>
<p>※強調は引用者による</p>

〓49〓ブラウザーによる〓48〓の表示例

＜本文＞
元の文の文意としての強調であればem要素などを使うべきです。また、スペルミスの指摘などであればu要素を使う判断もあり得ます。

＜小見出し＞
内容モデル
＜本文＞
mark要素の内容モデルはPhrasingです。em要素などを含むテキストを一括でmark要素でのマークアップもできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
mark要素にデフォルトのARIAロールはありません。ただし、一部のスクリーンリーダーは「マークあり」などと読み上げます。

＜memo＞
WAI-ARIA 1.3 (Editor's Draft)ではmarkロールが検討されています。
https://w3c.github.io/aria/#mark

＜中見出し＞
bdi要素およびbdo要素
＜本文＞
bdi要素を使うと、文字を書き進める書字方向が異なる可能性のあるテキストの範囲を明示できます。

＜memo＞
ここでいう書字方向は右か左のいずれか、すなわち水平方向の書字方向です。テキストを縦書きにしたり縦方向のレイアウトを制御したい場合は、CSSのwriting-modeプロパティを利用します。

＜本文＞
日本語や英語のテキストは通常、左から右に向かって書かれますが、言語によってはそうでないものもあり、たとえばアラビア語は右から左に向かって書かれます。通常、論理的な順に文字を記述しておけば、ブラウザーが適切に書字方向を切り替えて表示するため、特に問題はありません。
しかし、書字方向の異なる言語が混在する場合は面倒なことになります。特に、アラビア数字（算用数字）や算術記号は複数の言語で使われるため、書字方向がどちらなのか判別できないことがあります。〓50〓は、英語の文中に、アラビア語のユーザー名と日付が出現する例です。

＜memo＞
左から右と、右から左のテキストの混在を、「双方向テキスト」(Bidirectional text)といいます。

＜本文＞
〓50〓の上段では、:以降の記号と数字がアラビア語の一部であるのか、英語の一部であるのか、はっきりとしません。ブラウザーは数字をアラビア語の一部と解釈して、右から左に向かって表示する可能性があります。
〓50〓の下段のように、アラビア語の範囲をbdi要素でマークアップすると、異なる書字方向の可能性があるのはbdi要素の内容だけであることが伝わります。その外にある記号と数字の部分は英語の書字方向であると判断されます。それぞれの表示例は〓51〓のようになります。

〓50〓英語の文中にアラビア語が混在する記述例
＜コード＞
<p>User <b>إيان</b> : 2012/12/26</p>

<p>User <bdi>إيان</bdi> : 2012/12/26</p>

〓51〓ブラウザーによる〓50〓の表示例

＜本文＞
bdo要素は、テキストの書字方向規則を明示的に上書きします。HTML文書では通常、論理的な順に文字を記述すれば、ブラウザーが適切な表示順に並び替えます。データがもともと表示順に並べ替えられている場合、ブラウザーの制御によって表示が逆転してしまうことがあります。〓53〓のようにbdo要素を使うことで、書字方向を強制できます。

〓52〓bdo要素で方向を強制した記述例
＜コード＞
User <bdo dir="rtl">إيان</bdo> : 2012/12/26

＜memo＞
bdi要素とbdo要素のどちらを使うのかよいのかなど、より深い書字方向の設定については、関連するW3Cの文書を参照してください。
Authoring HTML & CSS - Text direction
https://www.w3.org/International/techniques/authoring-html?collapse#direction

＜小見出し＞
内容モデル
＜本文＞
bdi要素とbdo要素の内容モデルはPhrasingです。マークアップを含むテキストを一括でbdi要素でのマークアップもできます。

＜小見出し＞
属性
＜本文＞
bdi要素、bdo要素には特別な属性はありませんが、dir属性は特殊な扱いを受けます。

＜丸見出し＞
dir属性
＜本文＞
dir属性は、書字方向を指定するグローバル属性です。"ltr"を指定すると左から右、"rtl"を指定すると右から左となります。"auto"を指定すると、ブラウザーの書字方向アルゴリズムに従って自動処理されます。
通常の要素では、dir属性が指定されていない場合に書字方向を親要素から継承しますが、bdi要素とbdo要素は継承しません。
bdi要素の場合、dir属性を省略すると"auto"の状態になります。親要素の書字方向の指定は無視され、要素内は書字方向アルゴリズムに従って処理します。
bdo要素の場合、dir属性が必須であり、"ltr"か"rtl"のいずれかを指定しなければなりません。"auto"は指定できません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
bdi要素とbdo要素にデフォルトのARIAロールはありません。bdo要素を利用して書字方向を強制した場合でも、スクリーンリーダーはソースコード上の順で読み上げる可能性があることに注意してください。

＜中見出し＞
span要素
＜本文＞
span要素は、特別な意味を持ちません。具体的な使用例としては、スタイルを付ける目的でclass属性と一緒に使用する、あるいはlang属性などを付与するために使用することが挙げられます。
特別な意味を持たない要素としては、span要素の他にdiv要素があります。カテゴリーと内容モデルが異なっており、span要素はテキストの一部だけをマークアップするのに向いています。
テキストの一部をマークアップする場合、より適切な他の要素を利用できることが多いでしょう。この要素は、他に適切な要素がなかった場合の最後の手段として用います。
単なるスタイリングのために用いることもあります。〓53〓の例は、コンピューターコードを色付けする（シンタックスハイライト）ために、span要素とclass属性を使用しています。

〓53〓span要素の記述例
＜コード＞
<pre class="syntax-highlight"><code>
<span class="synComment">&lt;!doctype html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja&quot;</span><span class="synIdentifier">&gt;</span>
</code>
</pre>

＜小見出し＞
内容モデル
＜本文＞
span要素の内容モデルはPhrasingです。マークアップを含むテキスト全体をspan要素でマークアップできます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
span要素にデフォルトのARIAロールはありません。span要素を使って要素の見た目を変更しても、スクリーンリーダーでは特別な読み上げがなされないことに注意してください。
特に、span要素にonclick属性などを付けてボタンのような挙動にした場合、スクリーンリーダーではボタン扱いされませんし、キーボード操作もできない場合があります。このような問題に関しては、Chapter4-3を参照してください。

＜memo＞
WAI-ARIA 1.2ではgenericロールが導入される予定です。将来的には、これがネイティブロールとして提供される可能性があります。
https://www.w3.org/TR/wai-aria-1.2/#generic 

＜中見出し＞
br要素
＜本文＞
br要素は改行を表します。これは単なる改行であり、意味的な区切りではありません。たとえば〓54〓のように、住所の途中で適宜改行したい場合に用いることができます。表示例は〓55〓のようになります。

〓54〓br要素の記述例
＜コード＞
<p>
〒102-0074<br>
東京都千代田区<br>
九段南一丁目5番5号<br>
九段サウスサイドスクエア（旧 Daiwa九段ビル）
</p>

〓55〓ブラウザーによる〓54〓の表示例

＜memo＞
住所の他には、詩などの改行を表現するのにも使用できます。

＜本文＞
実際にbr要素が必要になるケースは多くありません。改行の位置が意味的な区切りになる場合は、br要素ではなく他のマークアップを利用するべきです。たとえば〓56〓は、〓57〓のようにp要素としてマークアップします。

〓56〓br要素を濫用している記述例
＜コード＞
<p><a ...>34件のコメント</a><br>
<a ...>コメントを追加する</a></p>

<p><label>名前: <input name="name"></label><br>
<label>住所: <input name="address"></label></p>

＜本文＞
〓57〓〓56〓を適切な形で記述した例
＜コード＞
<p><a ...>34件のコメント</a></p>
<p><a ...>コメントを追加する</a></p>

<p><label>名前: <input name="name"></label></p>
<p><label>住所: <input name="address"></label></p>

＜本文＞
特に、〓58〓のようにbr要素を連続で用いて段落の区切りを表現することは避けるべきです。〓59〓のようにそれぞれをp要素としてマークアップし、段落間の空きはCSSで調整するようにします。

〓58〓br要素を区切りに用いた不適切な記述例
＜コード＞
最初の段落です。<br>
<br><!-- 1行空けることで段落間を表現 -->
次の段落です。

〓59〓p要素を用いた〓58〓の修正例
＜コード＞
<p>最初の段落です。</p>
<p>次の段落です。</p>

＜コラム＞
br要素による余白
＜本文＞
CSSが利用できなかった時代には、〓01〓のように余白を設ける目的でbr要素が使われたことがありました。

〓01〓余白にbr要素を用いた不適切な記述例
＜コード＞
<p>段落の下に余白を作る<br>
<br>
<br>
</p>

＜本文＞
しかし、古いブラウザーは、br要素が連続しても1度しか改行しないことがありました。そのため、〓02〓のようにbr要素をp要素に入れることでブラウザーに認識させる手法も見られました〓02〓。

〓02〓br要素をp要素に入れた不適切な記述例
＜コード＞
<p>段落の下に余白を作る</p>
<p><br></p>
<p><br></p>

＜本文＞
いずれにせよ、現在ではこのようなことをする必要はありません。余白を設けたい場合はbr要素ではなく、CSSを用います。
＜/コラム＞

＜小見出し＞
属性
＜本文＞
br要素に独自の属性はありませんが、ブラウザーは互換性の目的でclear属性に対応していることがあります。

＜丸見出し＞
廃止された属性: clear属性
＜本文＞
かつてのHTML仕様では、br要素にclear属性が定義されていました。これを指定すると、img要素のalign属性で指定されたフロートを解除し、続くテキストが画像の下から始まるようになります。img要素のalign属性が廃止されるとともに、この属性も廃止されました。フロートの指定や解除はCSSで行います。

＜memo＞
端的に言えば、br要素のclear属性はCSSのclear:bothと同じ機能です。

＜小見出し＞
内容モデル
＜本文＞
br要素の内容モデルはNothingです。この要素は空要素であり、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
br要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしませんが、br要素は単語の区切りとして扱われることがあることに注意してください。たとえば、〓60〓のようにbr要素を利用すると、文字を縦書きのように見せかけることができます。

〓60〓br要素で縦書きを表現した不適切な記述例
＜コード＞
<p>
縦<br>
書<br>
き<br>
</p>

＜本文＞
しかし、スクリーンリーダーは1つの単語としては読み上げず、1文字ずつ「たて」「しょ」「き」と読み上げてしまう場合があります。
文字の配置を整えるためにbr要素を使うことは避けるべきです。文字の配置にはCSSを用います。縦書きの場合は、CSSのwriting-modeプロパティで実現できます。

＜memo＞
writing-mode
https://developer.mozilla.org/ja/docs/Web/CSS/writing-mode

＜中見出し＞
wbr要素
＜本文＞
wbr要素は、その位置で改行が可能であることを表します。br要素と異なり、常に改行されるわけではありません。
たとえば、長いURLが存在するとき、〓61〓のようにwbr要素を入れておくと、必要に応じてwbr要素の位置で改行されることが期待できます。表示例は〓62〓ようになります。

〓61〓wbr要素の記述例
＜コード＞
<p>http://this<wbr>.is<wbr>.a<wbr>.really<wbr>.long<wbr>.example<wbr>.com/With<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages<wbr>/deeper<wbr>/level<wbr>/pages
</p>

〓62〓ブラウザーによる〓61〓の表示例

＜小見出し＞
内容モデル
＜本文＞
wbr要素の内容モデルはNothingです。この要素は空要素であり、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
wbr要素にデフォルトのARIAロールはありません。スクリーンリーダーは特別な読み上げをしません。
