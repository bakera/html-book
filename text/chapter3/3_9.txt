＜タイトル＞
フォーム
＜本文＞
ブラウザーには、ユーザーが入力したデータをウェブサーバーに送信する機能があり、HTMLには、その入力と送信のための要素が用意されています。ここでは、入力フォームの基礎となるform要素とinput要素について説明します。

＜中見出し＞
フォーム概説
＜本文＞
ウェブコンテンツの中には、ユーザーによる入力を受け付けるものがあります。〓01〓は、本書で何度か紹介しているHTMLチェッカー「Nu Html Checker」の画面です。

〓01〓Nu Html Checker

＜本文＞
この画面では、ユーザーがチェック対象のURLを入力します。また、オプションとして何を表示するのかを、チェックボックスで選択できます。さらに、チェック方法も選択できます。一通りの入力と選択を終えたあと、checkボタンを押すとチェックが行われます。
このように、テキストを入力したり、選択肢を選んだりしてから送信ボタンを押すという一連の操作を提供するもの全体を「フォーム（form）」と呼びます。

＜memo＞
フォームは、「入力フォーム」と呼ばれることもあります。

＜本文＞
フォームの中には、テキスト入力欄やラジオボタンなどのさまざまな部品が置かれます。ユーザーはこれらを操作して、値を入力したり、設定したりします。このような、ユーザーが値を入力・設定するための部品を「フォームコントロール（form control）」と呼びます。

＜memo＞
フォームコントロールは、単に「コントロール」と呼ばれることもあります。「ウィジェット（widget）」と呼ばれることもありますが、ウィジェットの方が広い概念で、フォーム入力の操作に限らない、より複雑なインターフェイスも含みます。

＜本文＞
ほとんどのフォームでは、ユーザーが入力・設定した値を、最終的にサーバーに向けて「送信（submit）」します。この送信を行うボタンを「送信ボタン（submit button）」と呼びます。多くのフォームでは、ユーザーが送信ボタンを押すまで情報がサーバーに送信されることはなく、送信する前であれば入力内容を自由に修正できます。
HTMLには、フォームやフォームコントロール表現する要素が多数用意されており、これらを利用することで、基本的なフォームを表現できます。

＜中見出し＞
form要素
＜本文＞
form要素は、フォーム全体を表します。〓02〓は簡単な検索フォームの例です。表示例は〓03〓のようになります。

〓02〓検索フォームを表すform要素の記述例
＜コード＞
<form method="get" action="/search.cgi">
  <input type="text" name="k">
  <button>検索</button>
</form>

〓03〓ブラウザーによる〓02〓の表示例

＜小見出し＞
内容モデル
＜本文＞
form要素の内容モデルはFlowです。フォームコントロール以外にも、見出し、説明文、テーブルなど、さまざまな要素を入れることができます。ただし、子孫要素にform要素を入れ子にはできません。

＜memo＞
フォーム内に複数のボタンがあり、ボタンによってフォームの送信先を変えたいような場合は、form要素を入れ子にするのではなく、ボタンにformaction属性を指定します。

＜小見出し＞
属性
＜本文＞
form要素にはフォーム送信の制御に関する属性がいくつかあります。また、下記の他にautocomplete属性を指定できます。autocomplete属性については、後述のフォームコントロールの共通属性（P000）を参照してください。

＜丸見出し＞
method属性
＜本文＞
method属性でフォーム送信時の送信方法を指定します。method属性は列挙型属性で、get、post、dialogのいずれかを指定します。

・get
getを指定すると、入力内容はHTTPのGETメソッドで送信されます。フォームに入力されたデータは、URLのクエリーに付与されます。HTTPのメソッドについてはChapter1-6を、URLのクエリーについてはChapter1-5を参照してください。
URLのクエリーに付与される値は、application/x-www-form-urlencodedのアルゴリズムでシリアライズされます。詳細は後述のenctype属性（P000）で説明します。
たとえば、〓02〓に「テスト」と入力した場合、〓04〓のようなURLにアクセスします。
method属性を省略した際のデフォルトの値はgetです。method属性を省略しても、フォーム送信は行われることに注意してください。フォームの入力内容をサーバーに送信する必要がない場合、JavaScriptでフォームの送信を明示的に抑制しないと、意図しないデータ送信が行われることがあります。

〓04〓〓02〓のフォームに「テスト」と入力した場合のアクセス先URL
＜コード＞
/search.cgi?k=%E3%83%86%E3%82%B9%E3%83%88

＜本文＞
post
postを指定すると、入力内容がHTTP POSTメソッドで送信されます。この場合、入力された値はHTTPリクエストのリクエストボディに含まれます。HTTPのメソッドについてはChapter1-6を、リクエストボディのデータ形式については後述のenctype属性を参照してください。

dialog
dialogを指定した場合、入力内容はサーバーに対して送信されません。これはdialog要素と組み合わせて使用するもので、入力内容は主にJavaScriptで取得します。
method="dialog"のフォームを送信すると、対応するダイアログが閉じられると同時に、フォーム入力の内容をdialog要素のreturnValueプロパティから読み取れるようになります。使用例はChapter3-11のdialog要素を参照してください。

＜丸見出し＞
action属性
＜本文＞
action属性は、フォーム送信時の送信先となるURLを指定します。
action属性を指定していない場合は、フォームが置いてあるページ自身が送信先となります。action属性がなくても送信が行われることに注意してください。

＜memo＞
action属性に空の値（action=""）を指定することはできず、構文エラーとなります。この場合もエラー処理の結果として、フォームが置いてあるページ自身が送信先となります。
フォーム送信時の処理の詳細は、HTML仕様の「4.10.21.3 Form submission algorithm」を参照してください。
https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm

＜丸見出し＞
enctype属性
＜本文＞
enctype属性を指定すると、method="post"でフォーム送信するときのリクエストボディの形式を指定できます。enctype属性は列挙型属性で、以下のいずれかを指定します。

・application/x-www-form-urlencoded
・multipart/form-data
・text/plain

省略時のデフォルトの値はapplication/x-www-form-urlencodedです。

＜memo＞
通常はapplication/x-www-form-urlencodedを利用し、ファイル送信が必要な場合にはmultipart/form-dataを利用します。text/plainを利用することはほとんどありません。

＜本文＞
application/x-www-form-urlencoded
application/x-www-form-urlencodedは、フォームコントロールの名前と値のペアをURLエンコードして連結したもので、フォーム送信では最もよく利用される形式です。
たとえば、〓02〓の検索フォームで、name="k"が与えられた入力欄に「テスト」と入力した場合は、〓07〓の上のような形式になります。名前と値のペアが複数ある場合は〓07〓の下のように&で連結します。

＜memo＞
application/x-www-form-urlencodedの仕様はURL Standardで定義されています。
https://url.spec.whatwg.org/#application/x-www-form-urlencoded

〓07〓application/x-www-form-urlencoded形式の例
＜コード＞
k=%E3%83%86%E3%82%B9%E3%83%88

name1=value1&name2=value2&

＜本文＞
multipart/form-data
multipart/form-dataは、入力項目それぞれを「バウンダリー（boundary）」で区切った形式で、主にフォームからファイルを送信する際に利用します。たとえば〓08〓のような形式になります。

＜memo＞
boundaryは境界線という意味の英単語です。〓08〓の場合は"--"で始まる行がバウンダリーとなります。

＜本文＞
〓08〓multipart/form-data形式の例
＜コード＞
------WebKitFormBoundarygOTbtF2D0Y0ZT1Ak
Content-Disposition: form-data; name="name1"

value1
------WebKitFormBoundarygOTbtF2D0Y0ZT1Ak
Content-Disposition: form-data; name="name2"

value2
------WebKitFormBoundarygOTbtF2D0Y0ZT1Ak--

＜memo＞
multipart/form-dataの仕様はRFC 7578で定義されています。
RFC 7578
https://datatracker.ietf.org/doc/html/rfc7578

＜本文＞
text/plain
text/plainは、単純に名前=値のペアを改行（CR+LF）で区切った形式です。たとえば〓09〓のようになります。

〓09〓text/plain形式の例
＜コード＞
name1=value1
name2=value2

＜memo＞
text/plainは簡素で人間にも読みやすい形式ですが、現在ではほとんど使われていません。かつては、mailtoスキームのURLと組み合わせてメール送信に利用されたこともありました。

＜丸見出し＞
target属性、rel属性
＜本文＞
form要素にもtarget属性やrel属性を指定できます。これらはa要素の同名の属性と同じものです。Chapter3-5を参照してください。
rel属性には基本的にa要素と同じリンクタイプを指定できますが、そのうちform要素ではリンクタイプalternate、author、bookmark、tagを利用できません。

＜丸見出し＞
novalidate属性
＜本文＞
novalidate属性を指定すると、フォーム送信時の入力値の検証が無効になります。novalidate属性はブール型属性です。
特定の形式の値のみを許すフォームコントロール（type=emailなど）や、required属性、pattern属性などで値が制限されている場合、「クライアント側フォーム検証（Client-side form validation）」が行われ、条件を満たしていないとエラーとなります。
novalidate属性を指定すると、入力時の検証を無効にし、無条件でフォーム送信ができるようになります。

＜memo＞
クライアント側フォーム検証の詳細は、HTML仕様の「4.10.1.4 Client-side form validation」を参照してください。
https://html.spec.whatwg.org/multipage/forms.html#client-side-form-validation

＜丸見出し＞
name属性
＜本文＞
form要素にname属性を指定すると、フォームに名前を付けられます。この名前は、JavaScriptから参照する際に利用できます。フォームコントロールのname属性と異なり、フォーム送信時にこの名前がデータとして送信されることはありません。

＜丸見出し＞
accept-charset属性
＜本文＞
古いHTML4では、accept-charset属性を指定してフォーム送信時の文字エンコーディングの候補を指定できました。
この属性は現在のHTMLでも定義されていますが、現在のHTML仕様では、UTF-8以外は指定できません。属性の省略時もUTF-8を指定したことになります。現在ではこの属性を利用する意義はありません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
form要素のデフォルトのARIAロールはありません。ただし、フォームにアクセシブルな名前が付けられていればformロールとなります。
フォームが検索フォームである場合、searchロールを指定することで、検索フォームであることを明示できます。
なお、formロールやsearchロールはランドマークロールです。ただし、多くのスクリーンリーダーはフォームを扱う専用の機能を持っており、ランドマークロールがなくてもフォームに飛ぶことが可能です。無理にロールを与える必要はないでしょう。

＜memo＞
2021年現在、searchロールに対応するsearch要素が提案されています。
https://github.com/whatwg/html/pull/7320

＜中見出し＞
label要素
＜本文＞
label要素は、ユーザーインターフェイスのキャプションを表す要素で、フォームコントロールにラベルを付けることができます。
単にフォームコントロールの横にテキストを置いた場合、人間にはラベルのように見えても、ブラウザーにはラベルであることが伝わりません。label要素を利用すると、ラベルとフォームコントロールとを明確に関連付けることができ、プログラムによる解釈を可能にします。
ほとんどのブラウザーでは、label要素のラベルをクリックすると、対応するフォームコントロールにフォーカスが当たります。また、対応するフォームコントロールにフォーカスが当たった際、スクリーンリーダーは対応するlabel要素を読み上げます。
label要素でラベルを付けられる要素を「ラベル付け可能要素（labelable element）」と呼びます。具体的には、以下の要素が該当します。

・button要素
・input要素（ただし、type="hidden"のものを除く）
・meter要素
・output要素
・progress要素
・select要素
・textarea要素

＜memo＞
このほか、カスタム要素を定義してformAssociatedプロパティをtrueに設定した場合も、ラベル付け可能要素として扱われます。カスタム要素についてはChapter3-11を参照してください。

＜本文＞
label要素とラベル付け可能要素を結び付ける方法は2種類あります。詳細は、後述の内容モデルとfor属性でそれぞれ説明します。

＜小見出し＞
内容モデル
＜本文＞
label要素の内容モデルはPhrasingです。ただし、label要素を子孫に含むことはできません。また、ラベル付け可能要素を子孫に含む場合は、このlabel要素と関連づけられる必要があり、無関係のラベル付け可能要素を子孫に含めることはできません。
内容モデルがFlowではないことに注意してください。h1などの見出しや、div要素、p要素などを入れることはできません。
内容にラベル付け可能要素が含まれている場合、label要素はその要素に結び付けられます。〓10〓では、入力欄に「クエリー:」というラベルが結び付けられます。

〓10〓入力欄に「クエリー:」ラベルが結び付けられた例
＜コード＞
<label>クエリー: <input name="q" type="text"></label>

＜memo＞
1つのlabel要素を複数のラベル付け可能要素に関連付けることはできません。label要素の子孫にラベル付け可能要素が複数出現した場合はエラーとなり、エラー処理の結果として、最初に出現したラベル付け可能要素だけに結び付けられます。

＜小見出し＞
属性
＜本文＞
label要素にはfor属性があり、フォームコントロールとの結び付けに使用します。

＜丸見出し＞
for属性
＜本文＞
〓11〓のようにラベル付け可能要素にid属性でIDを指定している場合、label要素のfor属性にそのIDを指定することで、ラベルと結び付けることができます。

〓11〓label要素のfor属性とinput要素のid属性で関連付けた例
＜コード＞
<label for="q">クエリー: </label>
<input name="q" id="q" type="text">

＜本文＞
なお、〓12〓のようにlabel要素の中に入れる方法と併用しても問題ありません。

〓12〓for属性とid属性の関連付けと、要素の入れ子の関連付けを併用した例
＜コード＞
<label for="q">クエリー: <input name="q" id="q" type="text"></label>

＜本文＞
ただしこの場合、両方が同じ要素を指すようにしなければなりません。〓13〓は構文エラーとなる例です。この場合、エラー処理の結果としてfor属性による指定が優先され、<input id="text1">はラベルを持たない状態になります。for属性による指定と子孫要素による指定を混在させると混乱のもとになるため、どちらかに統一するとよいでしょう。

〓13〓構文エラーだが結果としてfor属性の指定が優先される例
＜コード＞
<label for="text2">Query: <input id="text1"></label>
<input id="text2">

for属性を利用すると、ラベル付け可能要素をlabel要素の中に入れる必要はないため、配置の自由度が増します。ただし、id属性はページ内で一意でなければならないため、ラベル付け可能要素が複数ある場合、id属性はそれぞれ異なる値にする必要があります。フォームコントロールが動的に増減するような場合は扱いに注意が必要です。
〓14〓のように、1つのラベル付け可能要素に複数のlabel要素を関連付けることも可能です。この場合、<input id="text1">に対して3つのラベルが結び付けられ、ラベル1、ラベル2、ラベル3の順に読み上げることが期待されます。

〓14〓for属性で複数のlabel要素を関連付けた例
＜コード＞
<label>ラベル1<input id="text1"></label>
<label for="text1">ラベル2</label>
<label for="text1">ラベル3</label>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
label要素にデフォルトのARIAロールはありません。
label要素をラベル付け可能要素に結び付けると、そのラベル付け可能要素のラベルとして扱われます。スクリーンリーダーでフォームを操作する際、ラベルが適切に設定されていないと入力欄が何かわからないことがあるため、適切なラベルを必ず設定しましょう。また、ラベルをクリックすると対応するフォームコントロールにフォーカスを移せるため、細かなマウス操作が難しいユーザーにも役立ちます。
label要素を利用する際は、ラベル付け可能要素との結び付けができているか確認しましょう。〓15〓のようにラベル付け可能要素と結び付いていないlabel要素が存在しても、語彙的ルールの観点では問題なく、構文エラーにはなりません。

〓15〓label要素の子孫要素にラベル付け可能要素がない場合
＜コード＞
<!-- label要素が結び付けられていない -->
<label>名前</label>
<input name="name" type="text">

＜本文＞
for属性値の誤りで入力欄との結び付けに失敗している例もよく見かけます。〓16〓のように、for属性が存在しないid属性を参照している場合は構文エラーになります。

〓16〓for属性値の誤りで結び付けに失敗している例
＜コード＞
<!-- for属性に指定したidが間違っている -->
<label for="name">メールアドレス</label>
<input name="email" id="email" type="email">

＜本文＞
しかし、id属性が存在している場合、それが間違っていても構文エラーにならないので注意が必要です。〓17〓の例では、2番目のlabel要素のfor属性の値が間違っています。

〓17〓for属性で誤って別の要素のid属性を指定した場合
＜コード＞
<!-- このlabel要素は問題ない -->
<label for="name">名前</label>
<input name="name" id="name" type="text">

<!-- 上のlabelをコピーし、for属性を直し忘れた -->
<label for="name">メールアドレス</label>
<input name="email" id="email" type="email">

＜本文＞
〓17〓の場合、2つのラベルが両方とも最初の入力欄に結び付きます。構文上は正しいため、HTMLチェッカーでは誤りを検出できないことに注意してください。

＜memo＞
ラベルをフォームコントロールと関連づけることはきわめて重要で、WCAG 2.1の複数の達成基準と関連します。達成基準1.3.1「情報及び関係性」、達成基準3.3.2「ラベル又は説明」、2.5.3「名前 (name) のラベル」、2.4.6「見出し及びラベル」を参照してください。
Success Criterion 1.3.1 Info and Relationships
https://www.w3.org/TR/WCAG21/#info-and-relationships

Success Criterion 3.3.2 Labels or Instructions
https://www.w3.org/TR/WCAG21/#labels-or-instructions

Success Criterion 2.5.3 Label in Name
https://www.w3.org/TR/WCAG21/#label-in-name

Success Criterion 2.4.6 Headings and Labels
https://www.w3.org/TR/WCAG21/#headings-and-labels

＜中見出し＞
input要素
＜本文＞
input要素は、データを入力や編集をするフォームコントロールを表します。input要素が何を表し、どのように動作するかは、type属性の値によって大きく変わります。

＜小見出し＞
1行テキスト入力: textとsearch
＜本文＞
type=textとtype=searchは、1行のプレーンテキスト編集コントロールを表します。〓18〓はtype=searchを使用した例です。

〓18〓type=searchの例
＜コード＞
<label>検索キーワード: <input name="q" type="search"></label>

＜本文＞
1行の入力欄であるため、改行は入力できません。value属性で初期値を指定できますが、value属性の値に改行が含まれている場合はエラーとなり、結果として改行文字は取り除かれます。
type=textとtype=searchの違いは、検索に適したインターフェイスを提供するかどうかです。type=searchを解釈するブラウザーは、入力ボックスの端に×印のアイコンを表示し、入力欄をクリアする機能を提供することがあります。〓19〓のように、入力完了ボタンのラベルが「検索」に変化することもあります。

〓19〓モバイルブラウザーによるtype=searchが使用されたサイトの表示例

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=textの場合、デフォルトのARIAロールはtextboxです。スクリーンリーダーは「エディット」「テキストを編集」などと読み上げたあと、現在入力されている値を読み上げます。空欄の場合は「ブランク」と読み上げることもあります。

＜memo＞
入力欄が空欄で、かつplaceholder属性が指定されている場合は、その値を読み上げることもあります。placeholder属性を参照してください。

＜本文＞
type=searchの場合、デフォルトのARIAロールはsearchboxです。基本の挙動は変わりませんが、スクリーンリーダーは「検索テキスト欄」などと読み上げる場合があります。
なお、有効なlist属性（P000）が指定されている場合には、デフォルトのARIAロールはcomboboxとなります。後述のlist属性を参照してください。

＜小見出し＞
電話番号の入力: tel
＜本文＞
type=telは、電話番号の入力や編集をするコントロールを表します。改行が入力できない点も含め、type=textの入力欄とほとんど同じですが、電話番号の入力に適した機能を提供します。スマートフォンに搭載されるモバイルブラウザーでは、電話番号の入力に最適化された専用のキーパッドを提供することがあります。
後述のtype=urlやtype=emailと異なり、デフォルトでは入力値の検証が行われません。電話番号にはさまざまなパターンがあり、「-」「*」「#」が入力されるケース、国番号（日本の場合+81）を表す「+」が入力されるケースがあるほか、海外では電話番号にアルファベットを含むこともあります。こういった事情から、type=telは改行以外のあらゆる文字を受け入れます。厳密な入力値の検証が必要な場合は、後述のpattern属性と併用するとよいでしょう。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=telの場合、デフォルトのARIAロールはtextboxです。有効なlist属性が指定されている場合には、デフォルトのARIAロールはcomboboxとなります。後述のlist属性を参照してください。
スクリーンリーダーはtype=textの入力欄と同様に読み上げ、電話番号の入力欄であることを伝えない場合があります。電話番号の入力欄であることがわかるラベルを関連付けておくとよいでしょう。

＜小見出し＞
URLの入力: url
＜本文＞
type=urlは、絶対URLの入力や編集をするコントロールを表します。URLについてはChapter1-5を参照してください。
改行が入力できない点も含め、type=textの入力欄とほとんど同じですが、URLの入力に適した機能を提供します。ブラウザーはURLの入力補助のために補完候補を出したり、URLの入力に最適化された専用のキーパッドを表示することもあります。
type=urlの入力欄では、フォーム送信時に入力値の検証が行われます。空でない値が入力されている場合には、絶対URLの形式になっている必要があります。そうでない場合、フォーム送信をしようとすると〓20〓のようにエラーメッセージが表示され、送信できません。

〓20〓type=urlの例

＜memo＞
URLの値の前後にはASCII空白文字が許されており、ASCII空白文字が入っていた場合は自動的に取り除かれます。

＜本文＞
value属性で初期値を指定できますが、この場合も絶対URLの形式になっている必要があります。
URLのスキームがHTTPやHTTPSに限られないことに注意してください。スキームが適切であるかどうかを問わないため、未知のスキームも受け付けます。たとえば、"a:"という値は適切な絶対URLとみなされます。:（コロン）を含む文字列はほぼすべて許可してしまうため、厳密な入力値の検証が必要な場合は、pattern属性（P000）を併用するとよいでしょう。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=urlの場合、デフォルトのARIAロールはtextboxです。有効なlist属性が指定されている場合には、デフォルトのARIAロールはcomboboxとなります。後述のlist属性を参照してください。
スクリーンリーダーはtype=textの入力欄と同様に読み上げ、URLの入力欄であることは伝えない場合があります。URLの入力欄であることがわかるようなラベルを関連付けておくとよいでしょう。

＜小見出し＞
電子メールアドレスの入力: email
＜本文＞
type=emailは、電子メールアドレスの入力や編集をするコントロールを表します。
type=emailの入力欄では、フォーム送信時に入力値の検証が行われます。空でない値が入力されている場合には、適切な電子メールアドレスの形式である必要があります。そうでない場合、フォーム送信をしようとするとエラーメッセージが表示され、送信できません。

＜memo＞
メールアドレスの値の前後にはASCII空白文字が許されており、ASCII空白文字が入っていた場合は自動的に取り除かれます。

＜本文＞
なお、この検証で許される電子メールアドレスの形式は、電子メールに関するルールを定めるRFC 5322の仕様とは異なります。これは「意図的な逸脱（willful violation）」です。たとえば、RFC 5322では電子メールアドレス内のコメントが許可されていますが、type=emailの検証ではコメントを含むメールアドレスはエラーとなります。type=urlの場合と同様、後述のpattern属性との併用も可能です。

＜memo＞
検証ルールの詳細は、仕様の「valid email address」を参照してください。
valid email address
https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address

＜本文＞
type=emailの入力欄には、multiple属性を指定できます。multiple属性が指定されていると、複数のメールアドレスをカンマ区切りで列挙して入力できるようになります。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=emailの場合、デフォルトのARIAロールはtextboxです。有効なlist属性が指定されている場合には、デフォルトのARIAロールはcomboboxとなります。後述のlist属性（P000）を参照してください。
スクリーンリーダーはtype=textの入力欄と同様に読み上げ、電子メールアドレスの入力欄であることは伝えない場合があります。電子メールアドレスの入力欄であることがわかるようなラベルを関連付けておくとよいでしょう。

＜小見出し＞
センシティブな値の入力: password
＜本文＞
type=passwordは、パスワードのようなセンシティブな値を入力するコントロールを表します。type=textと異なるのは、入力した値が伏せられ、ユーザーから直接見えなくなることが期待される点です。これは、人がパスワードなどを盗み見する「ショルダーハック」を防ぐためとされています。
ただし、モバイルデバイスなどでは、入力中の1文字が見えることがあります。また、ブラウザーによっては、ユーザーの操作で値を表示できる機能を持つ場合もあります。
type=passwordの入力欄では、autocomplete属性の挙動が他の入力欄と異なる場合があります。詳しくはautocomplete属性（P000）を参照してください。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=passwordの場合、デフォルトのARIAロールはありません。スクリーンリーダーは「パスワード」「保護されたテキスト」などと読み上げる場合があります。
入力された値を読み上げるかどうかはスクリーンリーダーの設定に依存します。視覚的には隠されていても、スクリーンリーダーは読み上げることがあるので注意が必要です。

＜小見出し＞
日付および時刻のコントロール: month、week、date、time、datetime-local
＜本文＞
type属性に以下の値を指定することで、日付や時刻を入力するコントロールを表現できます。

・type=month：年と月
・type=week：年と週番号
・type=date：年月日
・type=time：時刻
・type=datetime-local：日付と時刻

これらの値を入力するインターフェイスは、ブラウザーによってさまざまです。日付入力の場合、多くのブラウザーでは〓21〓のようなカレンダが表示され、カレンダーから日付を選択できます。

〓21〓ブラウザーの日付や時刻を入力するインターフェイス

＜memo＞
ほとんどのブラウザーでは、初期状態で現在の日付が選択されています。現在日時とかけ離れた日付を入力する場合、日付の選択に大変な労力がかかる場合があるため注意が必要です。後述するmin属性およびmax属性（P000）で日付の範囲を制限すると、使いやすくなる場合があります。

＜memo＞
特に問題になりやすいのは、生年月日を入力する場合です。カレンダーコントロールのほとんどは年を選択する機能を持ち、キーボードでの直接入力も可能ですが、使い方がわかりやすいとはいえません。生年月日はtype=textで入力させたほうがよいという考え方もあるでしょう。

＜本文＞
step属性で値の間隔を指定できます。〓22〓では、10時から20時までの時刻を15分刻みの単位で指定する例です。

〓22〓step属性の記述例
＜コード＞
<input type="time" min="10:00" max="20:00" step="900">

＜本文＞
時刻の場合、step属性の値は秒単位で指定します。デフォルトの間隔は60秒（1分）です。この例では値を900とすることで、900秒=15分を指定しています。
フォーム送信時には、フォームコントロールに応じた、HTML仕様で定義される日時形式の値を送ります。たとえば、2020年11月29日15時40分は〓23〓のようになります。

〓23〓日付と時刻を入力した際に送信される値の例
＜コード＞
2020-11-29T15:40

＜memo＞
日時形式の詳細については、Chapter2-2を参照してください。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=month、week、date、time、datetime-localはいずれも、デフォルトのARIAロールはありません。
このコントロールの表現方法はブラウザーによってさまざまであり、スクリーンリーダーによる読み上げや操作方法もさまざまです。カレンダーが表示される場合、カレンダーをtable要素のようにテーブルとして読み上げることもあります。

＜小見出し＞
数値の入力: number
＜本文＞
type=numberは、ユーザーに数値を入力させるコントロールを表します。ブラウザーは、数値を入力するのに適した機能を提供することがあります。たとえば、数字のみを入力できるキーパッドを表示したり、〓24〓のように、数値を増減させるスピンボタンを表示する場合があります。

〓24〓ブラウザーのスピンボタンの表示例

＜本文＞
入力できる値は、HTML仕様で定義される「妥当な浮動小数点数（valid floating-point number）」です。数字以外の文字も入力できることに注意してください。小数を表す.（ピリオド）や、+や-の正負符号も入力可能です。3.14e+20のような指数表記も可能で、eとEが入力できます。
デフォルトではあらゆる数値を入力できますが、min属性、max属性、step属性を利用すると、値の範囲を指定できます。たとえば、1～100の整数を入力させたい場合は、〓25〓のようにします。

〓25〓1～100の整数を入力させたい場合の記述例
＜コード＞
<input type="number" min="1" max="100" step="1" value="1">

＜本文＞
min属性やmax属性には負の数も指定可能です。また、step属性には小数も指定可能です。-1～1の数値を0.01刻みで入力させたい場合は、〓26〓のようになります。

〓26〓-1～1の値を0.01刻みで入力させたい場合の記述例
＜コード＞
<input type="number" min="-1" max="1" step="0.01" value="0">

＜本文＞
数字で表現されているものが、必ずしも数値とはならないことに注意してください。たとえば、ID番号、郵便番号、クレジットカード番号などは数字で表現されてはいますが、数値を増減させるような操作にはなじみません。そのような数字を入力させる場合は、type=textが適しています。

＜memo＞
type=numberを使用する目安としては、スピンボタンで値を増減することが適当かどうかを考えるのがよいでしょう。

＜本文＞
type=numberの入力欄では、フォーム送信時に入力値の検証が行われます。空でない値が入力されている場合には、浮動小数点数の形式である必要があります。そうでない場合、フォーム送信をしようとするとエラーメッセージが表示され、送信できません。
値の先頭に符号が付いていたり、指数形式で入力していても、値は正規化されずにそのまま送られます。たとえば、"+1e-3"と入力されていた場合、これは"0.001"と同値ですが、"+1e-3"という文字列がそのまま送られます。

＜memo＞
数字のみで構成された値を選択させたい場合は、select要素を検討するとよいでしょう。

＜丸見出し＞
maxlength属性とsize属性の扱い
＜本文＞
input要素にtype=numberを指定した場合、maxlength属性やsize属性は指定できません（最大値を制限したい場合は、max属性を利用します）。
しかし、古いブラウザーはtype=numberを指定したinput要素をtype=textとして扱うため、その場合はmaxlength属性やsize属性が有効になります。この互換性のため、これらの属性は「旧式だが適合する機能（Obsolete but conforming）」という扱いで許容されています。
ただし、チェッカーは好ましくないものとして警告を出します。互換性の観点での必要性がない場合には、これらの属性は指定しないほうがよいでしょう。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=numberの場合、デフォルトのARIAロールはspinbuttonです。スクリーンリーダーは「スピンボタン」「ステッパー」などと読み上げることがあります。

＜小見出し＞
一定範囲内の数値を指定: range
＜本文＞
type=rangeは、一定範囲内の数値を指定するコントロールを表します。多くの場合、スライダーコントロールとして表現されます。スライダーでつまみを動かすインターフェイスであるため、大まかな値を感覚的に指定しやすい反面、細かい値の正確な指定には向いていません。
type=numberと同様、min属性、max属性、step属性で値の範囲を指定できます。これらの指定がない場合は、min=0、max=100、step=1がデフォルトの値となります。
datalist要素と組み合わせると、スライダーに目盛りを付けることができます。目盛りがある場合、ブラウザーは目盛りに近い値を目盛りの値に合わせてくれる（目盛りにスナップさせる）ことがあります。〓27〓は、範囲が0～100、ステップが0.2のスライダーに、50ごとに目盛りを付ける例です。表示例は〓28〓のようになります。

〓27〓スライダーにメモリを付けた記述例
＜コード＞
<input id="range01" type="range" min="0" max="100" step="0.2" value="0" list="scale" />
<datalist id="scale">
<option>0</option>
<option>50</option>
<option>100</option>
</datalist>

〓28〓ブラウザーによる〓27〓の表示例

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=rangeの場合、デフォルトのARIAロールはsliderです。sliderロールは暗黙のaria-orientationの値horizontalを持ちます。これは、要素が水平方向の向きであることを表します。
スクリーンリーダーは「スライダー」などと読み上げることがあります。

＜小見出し＞
色の選択: color
＜本文＞
type=colorは、色を選択するコントロールを表します。ブラウザーは〓29〓のようなカラーピッカーを提供することがあります。

〓29〓ブラウザーのカラーピッカーの例

＜本文＞
フォーム送信時には、「単純な色（simple color）」の値が送られます。これは #（ハッシュ）で始まる6桁の16進数で表現されるRGB値です。たとえば、"#ff00a1"のような値が送信されます。アルファチャンネル値（不透明度; opacity）は指定できません。

＜memo＞
ブラウザーによっては、HSLのような、RGBではない色指定方法のインターフェイスを採用することがあるかもしれませんが、その場合でも結果の値は常にRGBで送信されます。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=colorの場合、デフォルトのARIAロールはありません。このコントロールの表現方法はブラウザーによってさまざまであり、スクリーンリーダーによる読み上げや操作方法もさまざまです。

＜小見出し＞
チェックボックス: checkbox
＜本文＞
type=checkboxは、チェックボックスを表します。チェックボックスは、チェックされている状態と、チェックされていない状態を持ちます。
典型的には、YES/NO、ON/OFFのような二択で選ぶ項目に使うことができます。〓30〓の例は、「利用規約に同意する」というラベルを伴うチェックボックスの例です。

＜memo＞
JavaScriptからHTMLInputElementインターフェイスのindeterminateプロパティをtrueにすると、未確定（indeterminate）状態にできます。こうすると、チェックボックスの現在の状態が表示されなくなります（オンともオフとも異なる見た目になります）。しかし、これが影響するのは見た目だけで、チェック状態や送信される値には影響しません。チェックボックスがチェックされたあとでindeterminateプロパティをtrueに設定しても、チェックが解除されるわけではなく、値がそのまま送信されます。

〓30〓チェックボックスの例
＜コード＞
<label><input type="checkbox" name="agree">利用規約に同意する</label>

＜本文＞
また、〓31〓のように複数選択が可能な選択肢を提示する場合にも使うことができます。表示例は〓32〓のようになります。

〓31〓複数選択が可能なチェックボックスの記述例
＜コード＞
<fieldset>
<legend>所有している機器 (複数選択可能)：</legend>
<label><input type="checkbox" name="gadget" value="desktop">デスクトップパソコン</label>
<label><input type="checkbox" name="gadget" value="laptop">ノートパソコン</label>
<label><input type="checkbox" name="gadget" value="smartphone">スマートフォン</label>
<label><input type="checkbox" name="gadget" value="tablet">タブレット</label>
</fieldset>

〓32〓ブラウザーによる〓31〓の表示例

＜本文＞
フォームを送信する際、チェックされているチェックボックスのname属性で指定した名前とvalue属性で指定した値が送られます。なお、value属性が存在しない場合は"on"という値が送られます。チェックボックスがチェックされていない場合、フォームを送信してもその名前と値は送られません。

＜memo＞
たとえば、〓31〓の例で上2つのチェックボックスをチェックし、下つをチェックしていない場合、gadget=desktop&gadget=laptopという値が送られます。

＜本文＞
checked属性を指定すると、チェックされている状態が初期状態になります。checked属性はブール型属性です。checked属性が指定されていても、ユーザーはチェックを外すことができます。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=checkboxの場合、デフォルトのARIAロールはcheckboxです。スクリーンリーダーは対応するラベルを読み上げたあと、「チェックボックス」などと読み上げます。チェックボックスがチェックされた状態であれば「チェックされています」などと読み上げて現在のチェック状態を伝えます。

＜小見出し＞
ラジオボタン: radio
＜本文＞
type=radioは、ラジオボタンを表します。チェックボックスと同様に、チェックされている状態とチェックされていない状態を持ちますが、選択肢の中から1つのみを選択できるという点が異なります。
同一のフォーム内に、name属性の値が同一のラジオボタンが複数ある場合、それらは「ラジオボタングループ（radio button group）」を構成します。同一のラジオボタングループに属するラジオボタンのうち、チェック状態にできるのは1つだけです。チェックされていないラジオボタンをチェックすると、既にチェックされていたラジオボタンからはチェックが外れます。

＜memo＞
ユーザーの操作に限らず、DOM操作などでチェック状態にした場合も同様です。複数を同時にチェック状態にすることはできません。

＜本文＞
〓33〓は性別を選択するラジオボタンの例です。表示例は〓34〓のようになります。

〓33〓ラジオボタンの記述例
＜コード＞
性別：
<label><input type="radio" name="sex" value="1">男性</label>
<label><input type="radio" name="sex" value="2">女性</label>
<label><input type="radio" name="sex" value="9">その他</label>
<label><input type="radio" name="sex" value="0" checked>回答しない</label>

〓34〓ブラウザーによる〓33〓の表示例

＜本文＞
checked属性を指定すると、初期状態でチェックされている状態になります。checked属性はブール型属性です。上記の例では、「回答しない」が選択された状態で表示されます。

＜memo＞
同一ラジオボタングループ内の複数のラジオボタンにchecked属性を指定した場合は、ソースコード内で最後に現れた項目だけがチェック状態となり、他の項目はチェックが外れた状態になります。

＜本文＞
ラジオボタングループ内のどのラジオボタンにもchecked属性がない場合、初期状態ではどのラジオボタンもチェックされていない状態になります。この場合、一度でもラジオボタンがチェックされると、未選択状態に戻す手段がないことに注意が必要です。

＜memo＞
古いHTML仕様では、ラジオボタングループの中でいずれか1つのラジオボタンを必ずチェック状態にしておく必要があるとされていました。しかし、現在のHTML仕様にはそのような制限はなく、何も選択されていない状態を許しています。

＜memo＞
ラジオボタンを未選択に戻す必要がある場合は、そのような機能をJavaScriptなどで実装するか、リセットボタンを用意する必要があります。リセットボタンは、フォームの他の項目もすべてリセットすることに注意してください。

＜本文＞
チェックボックスと同様に、フォームを送信したときは、チェックされている項目のvalue属性の値が送られます。また、value属性が指定されていない場合は、"on"という値が送られます。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=radioの場合、デフォルトのARIAロールはradioです。スクリーンリーダーは対応するラベルを読み上げたあと、「ラジオボタン」などと読み上げます。ラジオボタンがチェックされた状態であれば、「チェックされています」などと読み上げて現在のチェック状態を伝えます。

＜小見出し＞
ファイルアップロードコントロール: file
＜本文＞
type=fileは、ファイルアップロードコントロールを表します。ユーザーがこのコントロールを操作してローカルのファイルを指定すると、フォーム送信時にファイルの内容がサーバーに送られます。

＜memo＞
File APIを通じてJavaScriptからァイルの内容を読み取るという利用法もあります。

＜本文＞
ファイルアップロードを行うフォームでは、form要素のenctype属性値を"multipart/form-data"にします。enctype属性の詳細はform要素の説明（P000）を参照してください。最低限のファイルの送信フォームは〓35〓のようになります。表示例は〓36〓のようになります。

＜memo＞
MDNのWebアプリケーションからのファイルの使用が参考になります。
https://developer.mozilla.org/ja/docs/Web/API/File/Using_files_from_web_applications

〓35〓type=fileの記述例
＜コード＞
<form enctype="multipart/form-data" method="post" action="/upload.php">
  <label>アップロードするファイルを選択してください：
    <input type="file" name="file">
  </label>
  <button>送信</button>
</form>

〓36〓ブラウザーによる〓35〓の表示例

＜本文＞
multiple属性を設定すると、複数ファイルの指定を可能にします。ブラウザーは、複数ファイルを選択可能なインターフェイスを表示します。多くの場合、ファイル選択インターフェイスの見た目に大きな変化はありませんが、ctrlキーを押しながら選択したり、ドラッグで範囲指定することで、複数のファイルを選択できるようになります。
accept属性を指定することで、ファイルの種類を絞り込むことができます。値として、以下の5種類の指定が可能です。

・文字列"audio/*"を指定した場合：音声ファイルを指定できます
・文字列"video/*"を指定した場合：映像ファイルを指定できます
・文字列"image/*"を指定した場合：画像ファイルを指定できます
・パラメーターのない妥当なMIMEタイプ文字列を指定した場合：;（セミコロン）を持たないMIMEタイプのファイルを指定できます。たとえば、text/htmlという指定はできますが、text/html;charset=utf-8という指定はできません
・.（ピリオド）で始まる文字列を指定した場合：指定された拡張子のファイルを指定できます

複数を組み合わせることも可能で、その場合はカンマで区切って列挙します。この場合、指定されたものすべてが受け入れ可能になります。たとえば、Microsoft Word文書をアップロードさせたい場合、〓37〓のように指定できます。

〓37〓ファイルの種類をMicrosoft Word文書に指定する記述例
＜コード＞
<input type="file" accept=".doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document">

＜本文＞
ただし、この指定は厳密にファイルの種類を指定できるものではありません。拡張子".doc"を持つファイルであってもMicrosoft Wordファイルとは限らず、単なるテキストファイルかもしれません。また、ファイルの種類によっては、MIMEタイプが正式に登録されたものではないかもしれません。accept属性を指定しても、想定していない種類のファイルがアップロードされることは防げませんので注意が必要です。
また、このコントロールにセキュリティ上の制約があることにも注意してください。このコントロールのvalue属性の値はファイル名となりますが、HTMLでvalue属性を指定したり、JavaScriptからvalue属性に値を指定しようとしても、意図したとおりには動作しません。

＜memo＞
JavaScriptを利用してこのコントロールにアップロードファイルを設定する場合は、filesプロパティにファイルの内容を直接設定する必要があります。この制約は、ユーザーの操作を介さないローカルファイルの読み取りを防ぐためのものです。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=fileの場合、デフォルトのARIAロールはありません。
多くのブラウザーはボタンを表示するため、スクリーンリーダーは「ボタン」と読み上げることがあります。関連付けられたラベルが存在する場合は、そのラベルを読み上げてから「ボタン」と読み上げます。ラベルがない場合、現在指定されているファイルのパス名を読み上げることがあります。
多くの場合、multiple属性を使用しても、複数のファイルが選択可能であることはユーザーに伝わりません。複数選択可能であることをテキストで明示するとよいでしょう。

＜小見出し＞
ボタン: submit、reset、button
＜本文＞
type=submit、type=reset、type=buttonは、ボタンを表します。いずれも、同一のtype属性を持つbutton要素と同様の挙動となります。詳しくはChapter3-10のbutton要素（P000）を参照してください。
button要素では要素の内容がボタンのラベルとなりますが、input要素の場合はvalue属性の値をラベルとして扱います。そのため、ボタンのラベルにマークアップを含められないという制約があります。特に理由がなければ、button要素を使うほうがよいでしょう。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=submit、type=reset、type=buttonの場合、デフォルトのARIAロールはbuttonです。
スクリーンリーダーはvalue属性の値を読み上げたあと、「送信ボタン」、「ボタン」などと読み上げます。
value属性の値がラベルとして扱われるため、label要素でラベルを与える必要はありません。label要素を関連付けした場合はそのラベルが優先され、value属性の値は読み上げられなくなります。

＜小見出し＞
イメージボタン：image
＜本文＞
type=imageはイメージボタン、すなわち、画像によって表現された送信ボタンを表します。役割はtype=submitとほぼ同じですが、ボタンとして画像を表示する点と、クリックした画像の座標を送信する点が異なります。
画像の指定はimg要素と同じように、src属性で画像を指定し、alt属性で代替テキストを提供します。width属性とheight属性で画像サイズのヒントを指定できることもimg要素と同様です。ただしsrcset属性は定義されておらず、picture要素と組み合わせることもできません。

＜memo＞
かつては送信ボタンを装飾する手段が限られていたため、ボタンの画像を用意し、type=imageを利用して表示することがよく行われていました。現在ではbutton要素とCSSを組み合わせてさまざまな表現ができるため、type=imageはほとんど利用されません。

＜コラム＞
イメージボタンと座標
＜コラム本文＞
〓01〓は、フォームに2つのイメージボタンを配置した例です

〓01〓フォームにイメージボタンを2つ配置
＜コード＞
<form>
    <input type="image" name="button1" src="button1.png" alt="送信ボタン1">
    <input type="image" name="button2" src="button2.png" alt="送信ボタン2">
</form>

＜コラム本文＞
このボタンをマウスなどのポインティングデバイスでクリックした場合、フォーム送信時にクリックした位置の座標が送信されます。座標は、画像の左上隅を原点(0,0)とし、右方向にx軸、下方向にy軸をとったもので、単位はCSSピクセルです。送信される値は、ボタンのname属性の値と.x=あるいは.y=を連結し、その後に座標値を記述したものとなります。たとえば、〓01〓の例で、button1の原点から右に100ピクセル、下に5ピクセルの位置をクリックした場合、〓02〓の値が送信されます。

〓02〓送信されるボタンの座標
＜コード＞
?button1.x=100&button1.y=5

＜コラム本文＞
座標の値はCSSピクセルの整数であるため、小数点以下の数値になることはありません。ただし、負の値になることはあります。たとえば、CSSでborderやpaddingプロパティが設定されている場合、ボタン画像の外側の領域をクリックでき、画像の原点より左や上の領域をクリックすると座標は負の値となります。なお、クリックを伴わないキーボード操作などでそのボタンを押した場合、座標の値は(0,0)としてx=0、y=0が送信されます。
この座標の値を利用することで、サーバーサイドイメージマップと似た動作を実現できます。ただし、ポインティングデバイスで特定の箇所をクリックする動作ができないユーザーもいるため、この操作にはアクセシビリティ上の問題があります。イメージマップを利用したい場合には、クライアントサイドイメージマップ（area要素）を使うほうが望ましいでしょう。
実務上、座標が必要になるケースはほぼないといえます。単にボタンを画像にしたい場合は、button要素内にimg要素を入れた上で、細かいスタイル調整をするほうがよいでしょう。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=imageの場合、デフォルトのARIAロールはbuttonです。
スクリーンリーダーはalt属性の値を読み上げてから「ボタン」と読み上げます。alt属性の値がラベルとして扱われるため、label要素でラベルを与える必要はありません。label要素を関連付けした場合はそのラベルが優先され、alt属性の値は読み上げられなくなります。

＜小見出し＞
隠しコントロール：hidden
type=hiddenは、ユーザーに値を提示しない、編集もできないコントロールを表します。システム側では値を受け取る必要があり、しかしユーザーに入力・編集させる必要がないような場合に利用します。〓38〓は、ショッピングサイトで商品をカートに入れる際のフォームの例です。

〓38〓type=hiddenの記述例
＜コード＞
<form action="/cart.php" method="post">
  <input type="hidden" name="id" value="item42">
  <input type="hidden" name="price" value="9800">
  <button>この商品をカートに入れる</button>
</form>

＜本文＞
この例では、ユーザーには「この商品をカートに入れる」というボタンだけが見えています。ユーザーがボタンを押すと、商品のIDと価格が送信され、システム側でカートに追加する処理が行われます。
このコントロールの値は秘匿されないことに注意してください。画面上では隠れていても、ユーザーはHTMLのソースを直接読んだり、ブラウザーの開発者ツールで調査して値を読み取れます。また、値を書き換えることも可能です。値を読み取られたり書き換えられたりすると問題がある場合は、このコントロールを利用すべきではありません。

＜memo＞
たとえば〓38〓の例の場合、ユーザーはpriceの値を書き換え、商品を不正な価格で購入しようとするかもしれません。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
type=hiddenの場合、デフォルトのARIAロールはありません。視覚的にも隠されていますし、スクリーンリーダーでも読み上げられることはありません。

＜小見出し＞
内容モデル
＜本文＞
type属性の値が何であれ、input要素の内容モデルはNothingで、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
属性
＜本文＞
input要素は前述のようにtype属性を持ち、これによって大きく挙動が変わります。他の属性もありますが、ほとんどの属性は常に使えるわけではなく、type属性が特定の値のときに限って使えるものです。

＜memo＞
HTML仕様には、属性がどの状態の時に対して使えるかを示す一覧表があります。
https://html.spec.whatwg.org/multipage/input.html#input-type-attr-summary

＜丸見出し＞
type属性
＜本文＞
type属性は列挙型属性で、22種類の値が定義されています。属性値の種類とそれぞれの意味は、先に述べたとおりです。type属性を省略した場合や、ブラウザーにとって未知の値であった場合は、デフォルトの"text"になります。

＜丸見出し＞
maxlengthおよびminlength属性
＜本文＞
入力値として許容する文字列の長さを指定します。maxlength属性は最大の長さを、minlength属性は最小の長さを指定します。
文字列の長さは、基本的には単に文字数と考えればよく、全角・半角などは問わずに文字1つを長さ1と数えます。ただし、漢字の異体字や絵文字など、一部の文字は長さ2と数えることがあります。

＜memo＞
これはJavaScriptで文字列の長さを取得する際と同じ挙動です。JavaScriptの内部では、文字エンコーディングはUTF-16として扱われており、Unicodeスカラー値がU+10000以上の文字は「サロゲートペア」と呼ばれる2つの文字の組み合わせで表現されるため、長さ2とカウントされます。

＜memo＞
textarea要素（P000）の場合は、改行も1文字としてカウントします。改行コードがCR+LFであったり、文字参照で&#13;&#10;と記述してあっても長さ1と数えます。

＜本文＞
minlength属性が指定されていても、それより短い値を入れること自体は可能です。ただし、フォーム送信をしようとするとエラーメッセージが表示され、送信できません。〓39〓は、パスワードとして長さ8以上の文字列を入力しなければならない例です。長さ8未満の状態で送信しようとするとエラーとなり、たとえば〓40〓のように表示されます。

〓39〓文字数を8文字以上に指定
＜コード＞
<label>パスワード<input type="password" minlength="8"></label>

〓40〓〓39〓の表示例

＜本文＞
maxlength属性も同様ですが、maxlength属性の場合、エラーを出す代わりに、入力を抑制してもよいことになっています。多くのブラウザーでは、maxlength属性の指定よりも長い値を入力しようとした場合、キーボードから入力を試みても何も入らない、文字列をペーストした場合は長さを超えた分が切り捨てられる、という挙動になります。
特に、ユーザーが値をペーストした場合や、type="password"の入力欄を利用している場合、値の切り捨てに気づかない可能性があるため、注意が必要です。

＜丸見出し＞
size属性
＜本文＞
size属性は、input要素の見た目の幅を指定します。指定する値は文字数で、デフォルトの値は"20"です。〓41〓の例では、4文字に相当する幅の入力欄が表示されます。

〓41〓size属性の記述例
＜コード＞
<label>名前(姓):
  <input name="name" size="4">
</label>

＜memo＞
size属性で指定できるのは見た目の幅であり、実際に入力できる文字数とは関係ありません。文字数の制限はmaxlength属性やminlength属性で行います。

＜本文＞
〓41〓がちょうど4文字分の幅になるとは限らないことに注意してください。この値はブラウザーによって解釈が異なることが知られており、CSSのwidthプロパティで単位emやexで指定した幅とも異なります。なお、スタイルシートで幅が指定されている場合はsize属性の指定よりも優先されます。正確な幅を指定したい場合はCSSで指定するとよいでしょう。

＜丸見出し＞
readonly属性
＜本文＞
readonly属性は、コントロールが編集可能かどうかを表すブール型属性です。この属性が指定されている場合、コントロールは読み取り専用となり、ユーザーによる入力を受け付けません。

＜memo＞
コントロールの種類によってはreadonly属性を適用できない場合があります。type属性がhidden、range、color、radio、checkbox、file、image、submit、reset、buttonの場合、readonly属性を指定しても無視されます。

＜本文＞
disabled属性とは異なり、入力されている値は送信されことに注意してください。値が入力済みのコントロールに対し、JavaScriptで後からreadonly属性を設定した場合、ユーザーは値を変更できなくなりますが、フォーム送信時は現在の値がそのまま送信されます。

＜丸見出し＞
required属性
＜本文＞
required属性は、コントロールが入力必須かどうかを表すブール型属性です。この属性が指定されたコントロールは入力必須項目として扱われ、値が入力されていないとフォーム送信時にエラーとなります。

＜memo＞
コントロールの種類によってはrequired属性を適用できない場合があります。type属性がrange、color、submit、reset、buttonの場合、required属性を指定しても無視されます。

＜本文＞
〓42〓はユーザー名を必須項目とする例です。空欄のままフォーム送信するとエラーとなり、たとえば〓43〓のように表示されます。

＜本文＞
〓42〓required属性の記述例
＜コード＞
<label>ユーザー名 (必須):
  <input name="username" required>
</label>

〓43〓ブラウザーで空欄のまま送信した場合のエラー表示例

＜本文＞
required属性を指定しただけでは、入力欄が必須項目であることはユーザーに伝わりません。そのため〓42〓では、ラベルに「必須」という単語を含めています。
必須入力欄の色を変えたり、ラベルに *（アスタリスク）をつけたりして表現するケースも見受けられますが、アクセシビリティの観点から、明確に「必須」という単語をラベルに含めることを推奨します。

＜本文＞
required属性でチェックされるのは現在の値が空かどうかであり、ユーザーが入力や編集を行ったかどうかは問いません。value属性で最初から空でない値が設定されている場合、そのまま送信可能です。また、値がASCII空白文字のみである場合も、値は入力されているものとみなされます。
チェックボックスやラジオボタンにもrequired属性を指定できます。チェックボックスの場合、required属性を指定したチェックボックスにチェックを入れることが必須となります。ラジオボタンの場合、同一のラジオボタングループに属するラジオボタンのいずれかにチェックを入れることが必須となります。
〓44〓は、3つの選択肢から選ぶラジオボタンの例です。この例では最初の選択肢のみにrequired属性が指定されていますが、3つの選択肢のいずれかを選ぶことができます。何も選んでいない状態で送信した場合はエラーとなります。

〓44〓1つの選択肢から選ぶラジオボタンの例
＜コード＞
<label><input type="radio" name="opt" value="1" required>1</label>
<label><input type="radio" name="opt" value="2">2</label>
<label><input type="radio" name="opt" value="3">3</label>

＜丸見出し＞
multiple属性
＜本文＞
type属性がemailまたはfileの場合、multiple属性を指定すると、ユーザーが複数の値を指定できるようになります。multiple属性はブール型属性です。詳しくはtype=email、type=fileを参照してください。

＜丸見出し＞
pattern属性
＜本文＞
pattern属性を指定すると、テキスト入力コントロールの値をチェックできます。指定する値は、JavaScriptの正規表現の文字列です。たとえば、http://またはhttps://で始まるURLのみを受け付けたい場合、〓45〓のように書くことができます。

＜本文＞
〓45〓pattern属性の記述例
＜コード＞
<input type="url" pattern="https?://.+" title="httpまたはhttpsで始まるURLを入力してください。">

＜memo＞
この属性が指定できるのは、テキスト入力のコントロールのみです。すなわち、type属性がtext、search、url、tel、email、passwordの場合です。そうでない場合、pattern属性を指定しても無視されます。

＜memo＞
JavaScriptの正規表現については、MDNを参照してください。
https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions

＜本文＞
pattern属性が指定されている場合、値の全体がパターンにマッチする必要があります。値の一部にパターンが含まれるケースはエラーになります。〓45〓の例では、"http://a"はエラーになりませんが、"xxxxhttp://a" のように余計なものがつくとエラーになります。

＜memo＞
正確には、pattern属性の値の前に "^(?:" 、後ろに ")$" をつけた文字列を正規表現として判定します。〓45〓の例では"^(?:https?://.+)$"となります。

＜本文＞
title属性を指定しておくと、エラー時の説明文として表示されることが期待できます〓46〓。pattern属性を指定している場合、どのような値を入力する必要があるのかユーザーに伝わりにくい場合が多いため、title属性を指定しておくべきです。上記の例では、たとえば以下の図のようにエラーが表示されます。

〓46〓ブラウザーによる〓45〓のエラー表示例

＜本文＞
なお、値が空の場合はpattern属性による検証が行われません。〓47〓は3〜4文字の入力を期待している例です。

〓47〓3〜4文字の入力を期待する例
＜コード＞
<input pattern="[0-9]{3,4}" title="3〜4文字の数字を入力してください">

＜本文＞
この場合、1〜2文字の入力や5文字以上の入力ではエラーになりますが、0文字、すなわち何も入力していない場合にはエラーになりません。未入力をエラーにしたい場合はrequired属性を使用します。
pattern属性による値の検証は、セキュリティ上の意味を持つものではないことに注意してください。ユーザーは開発者ツールを用いてpattern属性を削除できますし、ブラウザーを使わずに特殊なツールからサーバーに値を送ることもできます。pattern属性による検証は、あくまでユーザーの利便性のためのものに過ぎず、サーバー側での検証を不要にするものではありません。

＜丸見出し＞
minおよびmax属性
＜本文＞
minおよびmax属性はそれぞれ、数値や日時の最小と最大の値を示します。 たとえば、日付コントロールで2021年7月23日から2021年8月8日までの範囲を指定する場合、〓48〓のようになります。

〓48〓2021年7月23日から2021年8月8日までの範囲を指定した例
＜コード＞
<input type="date" min="2021-07-23" max="2021-08-08">

＜memo＞
min属性とmax属性が指定できるのは、値の範囲を制限できるコントロールのみです。すなわち、type属性がdate、month、week、time、datetime-local、number、rangeの場合です。そうでない場合、min属性やmax属性を指定しても無視されます。

＜本文＞
どちらか片方だけの指定もできます。〓49〓はmin属性を指定し、0以上の数値を入力させるようにした例です。この例ではmax属性の指定がないため、入力できる値に上限はありません。

〓49〓0以上の数値を入力するように指定した例
＜コード＞
<input type="number" min="0">

＜本文＞
min属性とmax属性を同時に指定する場合、原則として、min属性よりもmax属性のほうが大きくなくてはなりません。ただし、type=timeのコントロールの場合は、「反転した範囲」(reversed range)を指定できます。〓50〓の例は、深夜・早朝の時間帯の指定を意図しています。

〓50〓深夜・早朝の時間帯を指定する例
＜コード＞
<input type="time" min="22:00" max="06:00">

＜本文＞
〓50〓では、22:00〜23:59、および00:00〜06:00までの時刻が設定できます。min属性とmax属性の値を入れ替えると、06:00〜22:00と指定することになり、意味が変化することに注意してください。

＜丸見出し＞
step属性
＜本文＞
step属性は、値の刻み幅を制御します。文字列anyまたは正の浮動小数点数を指定できます。属性値に数値を指定した場合、コントロールはstep値の倍数のみを受け入れます。

＜memo＞
step属性を指定できるのは、値の範囲を制限できるコントロールのみです。すなわち、type属性がdate、month、week、time、datetime-local、number、rangeの場合です。そうでない場合、step属性を指定しても無視されます。

＜本文＞
step属性を省略した際のデフォルトの値はコントロールによって異なります。date、month、week、number、rangeの場合、デフォルトの値は"1"です。time、datetime-localの場合は"60"で、これは60秒を意味します。つまり、デフォルトでは1分刻みになります。step=1を指定すれば1秒刻みの値を指定できるようになりますし、step=0.001を指定すれば1ミリ秒単位で指定できるようになります。
step=anyを指定すると、値の刻み幅に制限がない状態となり、任意の制度の値が指定可能になります。これはデフォルトの指定とは異なることに注意してください。"any"の指定は、そのコントロールで実現可能な最小のstepを指定するのと同じ意味になります。

＜丸見出し＞
list属性
＜本文＞
list属性は、ユーザーに提案する定義済み候補のリストを示します。値は、同一文書内のdatalist要素のIDでなければなりません。詳細については、datalist要素を参照ください。

＜memo＞
コントロールの種類によっては定義済み候補のリストを利用できないものがあります。type属性がhidden、password、radio、checkbox、file、image、submit、reset、buttonの場合、list属性を指定しても無視されます。

＜丸見出し＞
placeholder属性
＜本文＞
placeholder属性は、ユーザー入力の支援をするためのヒント（単語や短いフレーズ）を表します。
label要素と似ていますが、label要素のラベルが常に表示されているのに対し、placeholder属性の値は入力欄に値が入力されていない時だけ表示されます。
placeholder属性で提供される入力支援のヒントは、ユーザーが入力を始めると消えてしまい、読み返すことはできません。ヒントを利用するには、入力前に読んで覚えておかなければなりません。これはユーザーの記憶に負担を与えることになります。
フォームコントロールにあらかじめ空でない初期値が設定されている場合、placeholder属性の値は表示されません。ユーザーが入力内容を訂正するフォームでは、placeholder属性の値がまったく役に立たないこともあります。

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
placeholder属性にはアクセシビリティ上の注意点がいくつかあります。
多くのスクリーンリーダーは、プレースホルダーのテキストが表示されている場合、それを読み上げます。入力欄に値が入力されるとプレースホルダーのテキストは表示されなくなりますが、この場合、スクリーンリーダーにも読み上げられなくなります。

＜memo＞
このように、placeholder属性の値は状況によって読まれなくなることがあり、ラベルとは根本的に性質が異なります。ラベルの代替として使用すべきではありません。

＜本文＞
一般に、プレースホルダーテキストはデフォルトで薄い文字色として表示されます。この配色はWCAGで定めるコントラスト比を満たさないことがあり、一部のユーザーはこのテキストを読むことができない場合があります。

＜memo＞
カラーコントラストについては、WCAG 2.1の達成基準1.4.3「コントラスト (最低限)」、および達成基準1.4.6「コントラスト (高度)」を参照してください。
Success Criterion 1.4.3 Contrast (Minimum)
https://www.w3.org/TR/WCAG21/#contrast-minimum
Success Criterion 1.4.6 Contrast (Enhanced)
https://www.w3.org/TR/WCAG21/#contrast-enhanced

＜本文＞
しかしコントラストを高めすぎると、プレースホルダーテキストが入力値であるように見えてしまいます。プレースホルダーテキストを見て、その入力欄が自動的に入力されていると勘違いするユーザーが出てくるかもしれません。
placeholder属性にはさまざまなデメリットがあり、扱いが難しいものです。placeholder属性を用いる場合には、これらに注意するようにしましょう。

＜小見出し＞
フォームコントロールの共通属性
＜本文＞
HTML仕様では、フォームコントロール要素に指定できる共通の属性が定義されています。具体的には、name、dirname、disabled、form、formaction、formenctype、formmethod、formnovalidate、formtarget、autocomplete属性が該当します。これらの属性はinput要素だけでなく、Chapter3-10で紹介する他のフォームコントロールにも指定できます。

＜丸見出し＞
name属性
＜本文＞
name属性は、フォームコントロールに名前を与えます。フォーム送信時には、有効なフォームコントロールのname属性の値が送信されます。name属性が指定されていないと、そのコントロールの値は送信されません。フォーム送信時の動作の詳細については、form要素（P000）も参照してください。
name属性では複数の要素に同じ名前を与えることができます。複数のチェックボックスやラジオボタンに同じname属性を指定すると、それらは同一のグループに属するものとみなされます。詳しくはtype=radio（P000）を参照してください。
フォーム送信時には、同名のname属性があってもまとめられることはなく、すべて個別に送信されます。〓51〓は2つのチェックボックスに同じ名前を指定した例です。

〓51〓name属性の記述例
＜コード＞
<label><input type="checkbox" name="animal[]" value="cat">ねこ</label>
<label><input type="checkbox" name="animal[]" value="dog">いぬ</label>

＜本文＞
このチェックボックスの両方にチェックして送信すると、〓52〓のような値が送られます。名前=値のペアが複数送信されている点に注目してください。

〓52〓51〓で入力した値の送信例
＜コード＞
animal%5B%5D=cat&animal%5B%5D=dog

＜memo＞
フォーム送信を受け取る側の処理系によっては、同名の値をひとつにまとめて処理できることもあります。たとえばPHPでは、名前の末尾に[]がついた値を配列として扱うことができます。〓52〓の例で送信された値は、$_POST['animal']として取得でき、その値は["cat", "dog"]という配列になります。
＜コメント：PDFには衍字あり、「〓52〓のの例」となっている＞

＜丸見出し＞
dirname属性
＜本文＞
テキスト入力を行うコントロールにdirname属性を指定すると、テキストの書字方向の情報を送信できます。詳細は仕様を参照してください。

＜memo＞
dirname属性の詳細は、HTML仕様の「4.10.18.2 Submitting element directionality: the dirname attribute」を参照してください。
https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#submitting-element-directionality:-the-dirname-attribute

＜丸見出し＞
disabled属性
＜本文＞
disabled属性を指定すると、そのフォームコントロールを無効にできます。disabled属性はブール型属性です。この属性をJavaScriptから制御することで、特定の条件を満たした場合にのみ入力可能な入力欄を実現できます。
フォームコントロールが無効の場合、入力や編集、ボタン操作といった動作が行えなくなります。フォーカスを当てることもできません。ブラウザーは多くの場合、フォームコントロールの見た目を薄い色に変更するなど、無効であることがわかるようにします。また、スクリーンリーダーでは「無効なコントロール」などと読み上げられることがあります。
無効になっているフォームコントロールの値は送信されません。ユーザーが値を入力したあとでJavaScriptによってdisabled属性が設定された場合、ユーザーが入力した値が送られなくなることに注意してください。この点はreadonly属性との大きな違いです。

＜丸見出し＞
form属性
＜本文＞
通常、フォームコントロールは祖先要素のform要素と関連付けられています。祖先となっているform要素内の送信ボタンが押されると、コントロールの値が送信されます。
しかし時には、form要素の外にある要素を関連付けしたい場合があります。form属性を利用すると、関連するform要素を明示的に指定できます。〓53〓のように、form要素にid属性を指定し、そのIDをform属性に指定します。

〓53〓form属性の記述例
＜コード＞
<form id="form01">
  <!-- さまざまな入力欄 -->
  <button>送信する</button>
</form>
<!-- さまざまなコンテンツ -->
<button form="form01">送信する</button>

＜本文＞
この例では、2つ目のbutton要素がform要素の外にありますが、form属性でフォームと関連付けられているため、フォーム内に置かれているかのように機能します。このボタンを押すことでフォームを送信できます。

＜丸見出し＞
フォーム送信を制御する属性
＜本文＞
button要素や、ボタンとして機能するinput要素に以下の属性を指定すると、フォーム送信時の挙動を制御できます。

・formaction
・formenctype
・formmethod
・formnovalidate
・formtarget

これらの属性が指定されたボタンを押して送信すると、form要素の対応する属性を上書きするように働きます。〓54〓はformaction属性とformnovalidate属性を利用する例です。

〓54〓formaction属性とformnovalidate属性を利用した記述例
＜コード＞
<form action="register.php" method="post">
  <!-- さまざまな入力欄 -->
  <label>メモ:
    <textarea required name="note"></textarea>
  </label>
  <button name="mode" value="register">登録</button>
  <button formnovalidate formaction="temp-save.php">下書き保存</button>
</form>

＜本文＞
この例ではtextarea要素にrequired属性が指定されているため、未入力のまま「登録」ボタンを押すとエラーとなります。一方、「下書き保存」ボタンにはformnovalidate属性が指定されているため、下書き保存時にはエラー検証が行われず、未入力のままで送信できます。その際、送信先もtemp-save.phpに変化します。

＜丸見出し＞
autocomplete属性
＜本文＞
autocomplete属性を指定すると、ユーザーエージェントに対して、フォームコントロールの入力補完に関するヒントを与えることができます。この属性は大きく分けて2種類あり、1つは自動補完の動作自体を制御するもの（autofill expectation mantle）、もう1つは値の種類を指定するもの（autofill anchor mantle）です。
この属性はform要素にも指定でき、その場合はフォーム内のコントロールのデフォルトの挙動を指定します。個々のフォームコントロールにautocomplete属性が指定されている場合、個々のコントロールに指定された属性が優先されます。

＜丸見出し＞
自動補完の動作を制御する
＜本文＞
自動補完の動作自体を制御しようとする場合、属性値として"on"もしくは"off"を指定します。"off"を指定した場合、該当の入力欄がパスワードのようなセンシティブな値か、再入力すべきでない値を扱うことを示唆します。"on"の場合は、再入力してよい値であり、入力補完が許されるものであることを示唆します。
input type=passwordの入力欄では、autocomplete=offが特殊な扱いを受けることがあります。モダンなブラウザーのほとんどはautocomplete=offの指定があってもユーザーにパスワードを保存するかどうかを尋ね、ユーザーが許可すればパスワードを保存します。

＜memo＞
端的に言えば、type=passwordの入力欄では、autocomplete=offは無視されます。モダンなブラウザーはセキュリティに配慮したパスワード管理機能を持ちますが、この機能を無効にされるとセキュリティの低下につながるため、あえて指定を無視します。
かつては「ブラウザーにパスワードを記憶させないようにする」という要求を見かけることがありましたが、現在では、その要求はセキュリティの低下させると考えられています。

＜本文＞
なお、新しいパスワードを設定するときは、そのことを示す値の種類"new-password"を指定することで、入力欄にパスワードが補完されることを防ぐ効果が期待できます。

＜丸見出し＞
値の種類を指定する
＜本文＞
ブラウザーに対して値の種類を示唆することで、ブラウザーは適切な入力の補完ができます。
たとえば、ユーザーが「氏名」という入力欄に入力した後、別の場所で同様に「氏名」の入力を求められた場合、ブラウザーは先に入力した氏名のデータを記憶しておき、後の入力欄を補完することがあります。ブラウザーは、値の種類が同一かどうかを判断するためにname属性の値を参考にしますが、autocomplete属性を利用すると、その種類を明示的に指定できます。氏名のほかにも、住所、性別、クレジットカード番号、URL、メールアドレスなどを明示できます。
属性値には、4種類のトークンを組み合わせた値を指定します。それぞれ以下のようになります。

・配送先か、請求先か：入力欄が配送先の情報に関するものであれば"shipping"を、請求先に関する情報であれば"billing"を指定します。どちらでもない場合、このトークンは省略します　
＜コメント：行頭の文字「f」を削除する＞
・グループ名：値が何かのグループに属する場合、"section-"で始まるグループ名を指定できます。グループ名は任意に付けることができます。配送元と配送先の両方の住所を入力しなければならない場合など、同種の情報を区別する必要がある場合に利用します。省略可能です
・値の種類：値の種類を示すキーワードを指定します。キーワードは仕様で規定されており、"name"、"nickname"、"country"、"photo"など40種類以上が存在します。詳しくは仕様を参照してください
・追加の種類：電話番号やメールに対して、自宅や職場といった追加情報を指定できます。省略可能です

＜memo＞
HTML §4.10.18.7.1 Autofilling form controls: the autocomplete attribute 
https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofilling-form-controls:-the-autocomplete-attribute 

＜本文＞
複数のトークンを指定する場合は、スペースで区切ります。たとえば、フォームで2つの配送先住所がある場合、〓55〓のようにマークアップできます。

〓55〓複数のトークンを指定する場合の記述例
＜コード＞
<fieldset>
  <legend>1つ目のギフトの配送先</legend>
  <p><label>郵便番号: <input name="bp" autocomplete="section-blue shipping postal-code"></label>
  <p><label>都道府県: <input name="bc" autocomplete="section-blue shipping address-level1"></label>
  <p><label>住所:     <textarea name="ba" autocomplete="section-blue shipping street-address"></textarea></label>
</fieldset>

<fieldset>
  <legend>2つ目のギフトの配送先</legend>
  <p><label>郵便番号: <input name="rp" autocomplete="section-red shipping postal-code"> </label>
  <p><label>都道府県: <input name="rc" autocomplete="section-red shipping address-level1"> </label>
  <p><label>住所:     <textarea name="ra" autocomplete="section-red shipping street-address"></textarea></label>
</fieldset>

＜丸見出し＞
アクセシビリティ上の注意点
＜本文＞
ここまでで説明したように、autocomplete属性を用いることで、どのような入力欄であるかを伝えることができます。ブラウザーは、autocomplete属性を手がかりに、あるフォームで入力した値を記憶し、別のフォームの入力欄を自動補完できます。入力の操作が困難なユーザーにとっては、アクセシビリティが向上することになります。積極的に利用するとよいでしょう。

＜memo＞
autocomplete属性を用いることは、WCAG 2.1達成基準1.3.5「入力目的の特定」を満たす方法の1つとなっています。
WCAG 2.1 Success Criterion 1.3.5 Identify Input Purpose
https://www.w3.org/TR/WCAG21/#identify-input-purpose

H98: Using HTML 5.2 autocomplete attributes 
https://www.w3.org/WAI/WCAG21/Techniques/html/H98 
なお、本書で述べていますが、HTML 5.2は廃止された仕様です。
