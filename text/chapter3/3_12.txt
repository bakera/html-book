＜タイトル＞
スクリプティング
＜本文＞
ここでは、JavaScriptによる処理を扱うscript要素と、関連するいくつかの要素を紹介します。

＜中見出し＞
スクリプト言語とJavaScript
＜本文＞
「スクリプト言語（script language)」とは、比較的簡易な記述でプログラミングを行えるプログラミング言語を指します。ウェブのサーバー側実装でよく利用されるPerl、PHP、Ruby、Pythonなどもスクリプト言語です。スクリプト言語は、単に「スクリプト（script)」と呼ばれることもあります。

＜memo＞
scriptという英単語は、Unicodeの用字（たとえば、漢字、平仮名、片仮名など）のスクリプトを指すことがありますが、これはプログラミング言語とは関係ありません。

＜本文＞
ブラウザー上ではJavaScriptと呼ばれるスクリプト言語が動作します。JavaScriptを利用することで、ユーザーの操作に応じてウェブページの内容を動的に変化させる、コンテンツを動的に読み込んで表示するなど、さまざまな処理が可能になります。
以前のHTML仕様では、利用できるスクリプト言語の種類までは規定しておらず、たとえばかつてのInternet ExplorerではJavaScriptのほかにVBScriptも動作していました。しかし、現在のHTML仕様はJavaScriptのみを想定しており、ブラウザー上で動作するスクリプト言語は事実上、JavaScriptのみとなっています。

＜memo＞
モダンブラウザーではWebAssembly（wasmとも呼ばれる）も動作しますが、このコンパイル前の言語には特に制限がなく、C++、C#、Rustなどで書いたコードを動作させることも可能になります。WebAssemblyの詳細はMDNを参照してください。
https://developer.mozilla.org/ja/docs/WebAssembly 

＜本文＞
JavaScriptによるプログラミングについては本書の範囲外となるため、その詳細は扱いません。

＜memo＞
JavaScriptの言語仕様は、Ecma InternationalのTechnical Committee 39 (TC39)が中心になって策定されており、ECMA-262がコアの仕様となっています。必要に応じて参照してください。
ECMA-262
https://www.ecma-international.org/publications-and-standards/standards/ecma-262/

＜本文＞
また、ここでのJavaScriptのサンプルコードは要素説明のための便宜的なものであり、実用性はありません。

＜memo＞
特に、サンプルコードではdocument.write()メソッドを利用していることがありますが、仕様ではこのメソッドの利用を推奨していないことに注意してください。
8.4.3 document.write()
https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#document.write()

＜中見出し＞
script要素
＜本文＞
script要素を利用すると、HTML内にJavaScriptを埋め込んだり、外部のJavaScriptを参照できます。

＜memo＞
script要素はテキストをマークアップするものではなく、特定のセマンティクスを持ちません。他のHTML要素とは異なり、ユーザーに何かを提示するものではありません。

＜本文＞
script要素は、ほとんどの要素の子要素になることができます。この要素は、MetadataでありFlowでありPhrasingでもあり、さらにscript-supporting elementにも分類されます。
script-supporting elementは、通常は他の要素が配置できない場所にも使用できます。たとえば、ul要素の子要素は通常li要素のみであり、div要素などを置くことはできませんが、script要素はul要素の直下に記述できます。〓01〓は構文上、問題のないマークアップです。

〓01〓ul要素の子要素としてscript要素を記述する例
＜コード＞
<ul>
  <script>
    document.write('<li>');
    document.write(new Date);
    document.write('</li>');
  </script>
</ul>

＜memo＞
このように、script要素はたいていの要素の子要素となることができますが、本書では読みやすさのために、各要素の内容モデルの説明からscript-supporting elementを省いています。

＜小見出し＞
内容モデル
＜本文＞
script要素の内容モデルは複雑です。有効なsrc属性が指定されている場合には、意味のある内容を含めることはできません。含めることのできる内容は、スペース、タブ、改行（LF）およびJavaScriptのコメントと解釈される値のみです。src属性も参照してください。
有効なsrc属性が指定されていない場合は、特定の文字列を除いた任意の内容を含めることができます。内容はそのままスクリプトエンジンに渡され、JavaScriptとして解釈されます。ただし、後述するように、script要素がデータブロックである場合は何もしません。

＜memo＞
HTML仕様の13.2.5 Tokenizationにある"Script data..."で始まる項目はすべてscript要素の内容を解析するためのものです。HTMLのすべての字句を解析するのに必要なステートが全部で80種類であり、そのうちの17種類がscript要素関連ですから、2割以上がscript要素のために費やされています。

＜丸見出し＞
script要素の内容の指針
＜本文＞
script要素の内容の挙動は、後述するように、過去との互換性の都合もあって非常に複雑なものとなっています。そのため、以下のような指針をもとに作成するとよいでしょう。

・可能な限りscript要素に内容を含めず、src属性で外部リソースを指定する
・script要素に内容を含める必要がある場合は、文字列<!--および-->を含めないようし、文字列</がもしあればこれをエスケープする

＜丸見出し＞
script要素の終了タグの扱い
＜本文＞
script要素内に</scriptという文字列が出現した場合、script要素の終了タグとみなされることがあります。〓02〓はJavaScriptの構文エラーとなる例です。

〓02〓JavaScriptの構文エラーとなるscript要素の例
＜コード＞
<script>
  document.write('<script>alert(1)</script>');
</script>

＜本文＞
この場合、最初の</script>でscript要素が終了したものとみなされるため、JavaScriptとして解釈されるのはdocument.write('<script>alert(1)の部分までで、JavaScriptの構文エラーとなります。後ろにある');という文字列はscript要素の外のテキストノードとみなされ、ウェブページの内容として表示されます。

＜memo＞
〓02〓の例はHTMLの構文エラーにもなります。最後の</script>に対応する開始タグがないとみなされるためです。

＜本文＞
この構文エラーを避けるためには、script要素内に</という文字列が出現しないようにエスケープする必要があります。</という文字列さえ出現しなければ書き方は問いません。たとえば〓03〓のような書き方ができます。

〓03〓文字列</をエスケープした記述例
＜コード＞
<script>
  document.write('<script>alert(1)<\/script>');
  document.write('<script>alert(2)<\u002fscript>');
  document.write('<script>alert(3)<' + '/script>');
  document.write('<script>alert(4)</scr' + 'ipt>');
</script>

＜memo＞
古いHTML4仕様では、文字列</が出現するとscript要素が終了するルールだったため、〓03〓の4番目の例は仕様上、構文エラーとなっていました。現在のHTML構文では</の後ろに"script"という文字列が出現するかどうかまで判定するため、このような書き方でも問題ありません。同じ理由で、</script>以外の終了タグもエスケープ不要になっています。

＜丸見出し＞
要素内容におけるHTMLコメントの扱い
＜本文＞
script要素内にHTMLのコメント形式の文字列が挿入されるケースを見かけることがあります。〓04〓は、script要素内に文字列<!--と-->が含まれる例です。

＜memo＞
きわめて古いブラウザーではscript要素が解釈できず、中身をそのまま表示することがあったため、互換性のために〓04〓のような書き方をすることがありました。

＜本文＞
〓04〓script要素内に文字列<!--と-->が出現する例
＜コード＞
<script>
<!--
  alert('hello');
-->
</script>

＜本文＞
HTML構文の場合、script要素内に<!--という文字列があっても、HTMLのコメントとしては扱わず、内容の一部として扱われます。<!--や-->はそのままスクリプトエンジンに渡され、スクリプトエンジンの側でJavaScriptの1行コメントとして扱われます。
データブロックの場合にも、単なる文字列として扱われ、そのまま渡されます。〓05〓は、JavaScriptの実行結果として、<!---->という文字列が表示されます。

＜memo＞
XML構文の場合にはXMLのコメントとみなされ、内容がスクリプトエンジンに渡りません。

＜memo＞
ECMAScript 2015では、互換性のためのHTML-likeコメントが正式に仕様に追加され、HTMLのコメント区切り子（<!--および-->）をECMAScriptの1行コメントして解釈するよう定めています。つまり、これらは//と同じ効力を持つことになります。
https://262.ecma-international.org/6.0/#sec-html-like-comments 

〓05〓データブロックとなるscript要素内に<!--と-->を記述した例
＜本文＞
<script id="data" type="text/x-data">
<!---->
</script>
<script>
  alert(document.getElementById("data").textContent);
</script>

＜丸見出し＞
HTMLコメントの構文解析への影響
＜本文＞
script要素内の<!--という文字列は、HTMLの構文解析ルールにも影響を与えます。〓06〓は、HTMLの構文エラーとなる〓02〓の例に対して、文字列<!--と-->を追加しただけのものです。〓02〓と同様にHTMLの構文エラーになると予想されるかもしれませんが、〓06〓は問題なく動作します。
〓06〓のようにscript要素内に<!--が出現し、さらに<scriptが出現した場合、</scriptが出現してもscript要素の終了タグとみなさない処理が行われます。そのため、〓06〓はscript要素中に</script>を含んでいるにもかかわらず、問題なく動作します。

〓06〓〓05〓のscript要素内に文字列<!--と-->を追加した例
＜コード＞
<script>
<!--
  document.write('<script>alert(1)</script>');
-->
</script>

＜memo＞
HTMLパーサーの字句解析器の挙動としては、<!--が出現すると"Script data escaped state"という状態に遷移し、そこで<scriptが出現すると"Script data double escaped state"に遷移します。このときに</scriptが出現しても終了タグとみなさず、単に"Script data escaped state"に戻ります。

＜本文＞
逆に、この処理が意図しない挙動を招くこともあります。〓07〓は仕様で挙げられている、意図どおりに解析されない例です。
〓07〓には<!--および<script>という文字列が含まれているため、その後の</script>はscript要素の終了タグとみなされません。</script>という文字列はscript要素の内容の一部として扱われ、これ以降の内容もscript要素の内容とみなされます。

〓07〓意図どおりに解析されないscript要素の記述例
＜コード＞
<script>
  var example = 'Consider this string: <!-- <script>';
  console.log(example);
</script>

＜小見出し＞
属性
＜本文＞
script要素はtype属性の値によって性質が変化し、その値によって併用できる属性が異なります。また、src属性により外部スクリプトとして呼び出すことができます。

＜丸見出し＞
type属性
＜本文＞
type属性は、スクリプトの種類を指定します。多くの場合、属性値としてMIMEタイプを指定します。MIMEタイプについてはChapter1-6を参照してください。
type属性の値によって、script要素は「クラシックスクリプト（classic script）」、「モジュールスクリプト（module script）」、「データブロック（data block）」のいずれかに分類されます。

＜丸見出し→改行見出し?＞
クラシックスクリプト
＜本文＞
type属性にJavaScriptとみなされるMIMEタイプの値を指定すると、クラシックスクリプトとして扱われます。また、script要素の内容、もしくはsrc属性で指定したリソースはJavaScriptのスクリプトとして解釈され、実行されます。
type属性を省略した場合や、空の値を指定した場合もクラシックスクリプトとみなされます。古いHTML4ではscript要素のtype属性は必須でしたが、現在では省略可能です。クラシックスクリプトを意図する場合は省略することが推奨されています。

＜memo＞
クラシックスクリプトとみなされる値の正確な一覧は、MIME Sniffing Living Standardで定義されています。
https://mimesniff.spec.whatwg.org/#javascript-mime-type

よく利用されるのは"application/javascript"と"text/javascript"です。RFC 4329では"application/javascript"が推奨されていましたが、RFC 4329を廃止して"text/javascript"に一本化する仕様が策定中です。
RFC 4329 Scripting Media Types
https://datatracker.ietf.org/doc/html/rfc4329
ECMAScript Media Types Updates
https://datatracker.ietf.org/doc/html/draft-ietf-dispatch-javascript-mjs
 
＜丸見出し→改行見出し?＞
モジュールスクリプト
＜本文＞
type属性の値として"module"を指定すると、モジュールスクリプトとして扱われます。script要素の内容、もしくはsrc属性で指定したリソースはJavaScriptのモジュールとして読み込まれます。

＜memo＞
モジュールはECMAScript 2015で新たに導入されたもので、JavaScriptをモジュールに分割して扱えるようにしたものです。モジュールではexportで必要な機能を公開し、それをimportで読み込んで利用できます。詳細はMDNなどを参照してください。
JavaScript モジュール - JavaScript | MDN
https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Modules
ECMAScriptモジュール · JavaScript Primer
https://jsprimer.net/basic/module/

＜本文＞
モジュールは比較的新しい機能であるため、モジュールを扱えない古いブラウザーにフォールバックを提供するためのnomodule属性が定義されています。詳しくは後述のnomodule属性を参照してください。
モジュールスクリプトは即時に実行されず、常に遅延読み込みされます。そのため、defer属性を指定しても無視されます。詳しくはdefer属性、async属性を参照してください。

＜丸見出し＞
データブロック
＜本文＞
type属性が妥当なMIME typeであり、かつJavaScriptとみなされないものである場合、script要素はデータブロックとして扱われます。

＜memo＞
ブラウザーは、データブロックに対して何の処理も行いません。内容がJavaScriptとして実行されることも、ウェブページに表示されることもありません。script要素の属性のうち、type属性以外の属性は指定できません（idなどのグローバル属性は有効です）。次の7つの属性は、データブロックに指定しても無視されます：src、async、nomodule、defer、crossorigin、integrity、referrerpolicy

＜本文＞
内容をJavaScriptから参照できるため、ウェブページに表示したくないデータを埋め込むのに利用できます。また、クローラーによって処理される場合もあります。〓08〓は、データブロックを利用してテキストデータを埋め込んでいる例です。

＜memo＞
正確には、クラシックスクリプトにもモジュールスクリプトにも当てはまらない値はすべてデータブロックとみなされます。しかし仕様では、type属性はMIMEタイプでなければならないとされています。これは、将来の仕様でtype属性に"module"以外のキーワードが使えるようになったときに、誤動作しないようにするためです。

〓08〓データブロックを利用してテキストデータを埋め込んだ記述例
＜コード＞
<script type="text/x-message-data" id="data1">
  Welcome!
  You are lucky!
</script>
<script>
  const data = document.getElementById("data1").text;
  alert(data);
</script>
 
＜本文＞
script要素が2つありますが、最初のものがデータブロックです。続くscript要素がクラシックスクリプトで、このJavaScriptによってデータの内容を取得し、表示しています。
JSONデータを埋め込むこともできます。〓09〓のようにJSON-LDによるメタデータを埋め込むと、検索エンジンのクローラーがこれを認識してメタデータを取得することがあります。

＜word＞
JSON
JavaScript Object Notationの略で、ジェイソンと発音。RFC 8259/ECMA-404 2nd editionで定義される、JavaScript構造データオブジェクトの表記法をベースにしたフォーマット。
https://datatracker.ietf.org/doc/html/rfc8259
https://www.ecma-international.org/publications-and-standards/standards/ecma-404/ 

＜memo＞
JSON-LD (JSON for Linked Data)は、メタデータをJSON形式で表現する構造化データのフォーマットです。構造化データとは、HTML文書に含まれる要素や属性の意味を伝えるためのもので、RDFaやMicrodataなども構造化データです。
JSON-LDの仕様は、JSON-LD 1.1としてW3C勧告となっています。
https://www.w3.org/TR/json-ld11/ 

〓09〓JSON-LDによるメタデータを埋め込んだ記述例
＜コード＞
<script type="application/ld+json">
{
  "@context":"https:\/\/schema.org",
  "@type":"BreadcrumbList",
  "itemListElement": [
    {
      "@type":"ListItem",
      "position":1,
      "item":{
        "@id":"https:\/\/www.example.com",
        "name":"example"
      }
    } 
  ]
}
</script>

＜丸見出し＞
廃止された属性：language属性
＜本文＞
古くに書かれたHTMLでは、type属性の代わりにlanguage属性が指定されていたこともありました。現在のHTMLではlanguage属性は廃止されています。
ただし、過去との互換性のために、ブラウザーはlanguage属性によるタイプ判定をすることがあります。type属性が指定されておらず、かつlanguage属性に空でない値が指定されている場合、"text/"に続けてlanguage属性の値を連結した値がtype属性に指定されているものとみなします。

＜memo＞
たとえば、type属性がなく、language=vbscriptが指定されている場合は、type=text/vbscriptが指定されているものとみなします。これは結果としてデータブロックになります（仮にVBScriptが書かれていても、現在のHTML仕様上は、実行されることはありません）。language=javascriptが指定されている場合は、type=text/javascriptとみなされてクラシックスクリプトとして扱われます。

＜本文＞
type属性が指定されている場合、language属性は無視されます。language属性が指定された古いHTMLを修正する機会があれば、language属性は削除し、クラシックスクリプト以外のものにだけtype属性を指定するとよいでしょう。

＜丸見出し＞
src属性とインラインスクリプト
＜本文＞
src属性を利用すると、外部JavaScriptのURLを指定して読み込むことができます。src属性が指定されていない場合、script要素の内容がJavaScriptとして解釈されます。
src属性を指定している場合、script要素の内容に意味のあるJavaScriptを書くことはできません。内容があるとエラーとなりますが、その場合、内容は無視されてsrc属性の指定が優先されます。

＜memo＞
JavaScriptのコメントと改行、空白類文字のみが許されます。詳細は仕様を参照してください。
https://html.spec.whatwg.org/multipage/scripting.html#inline-documentation-for-external-scripts 

＜本文＞
ただし、script要素がデータブロックである場合にはsrc属性を指定できず、src属性は無視されます。

＜memo＞
script要素がデータブロックとして扱われる条件については、type属性の項を参照してください。

＜本文＞
src属性を用いた外部JavaScriptの指定は、たとえば〓10〓のようになります。内容が空であっても、script要素の終了タグが省略できないことに注意してください。

〓10〓src属性を用いた外部JavaScriptの指定例
＜コード＞
<script src="sample.js"></script>
<script type="module" src="libs.mjs"></script>

＜丸見出し＞
defer属性およびasync属性
＜本文＞
src属性で外部JavaScriptを指定して読み込む場合、defer属性やasync属性を使用すると、JavaScriptの読み込みや実行のタイミングを制御できます。defer属性とasync属性はいずれもブール型属性です。
通常、ブラウザーはHTMLを先頭から順に解析していきますが、script要素に遭遇すると、解析を中断してJavaScriptを実行します。JavaScriptの読み込みや実行に時間がかかると、HTMLの解析処理が長時間ブロックされ、ウェブページの表示に時間がかかることになります。
defer属性を指定すると、HTMLの解析と並行してJavaScriptを読み込みます。そのJavaScriptは、JavaScriptの読み込みとHTMLの解析の両方が終わったときに実行されます。

＜memo＞
言い換えると、defer属性が指定されたスクリプトは、DOMContentLoadedイベントが発生するタイミングで初めて実行されます。

＜本文＞
async属性の場合、HTMLの解析と並行してJavaScriptを読み込む点はdefer属性と同様ですが、async属性ではHTMLの解析完了を待たずにJavaScriptを実行します。このため、実行開始時点でHTMLの解析が終わっていないことがあります。

＜memo＞
async属性が指定されたスクリプトの実行開始のタイミングは不定です。async属性を指定したscript要素が複数ある場合、HTMLソースでの出現順とは異なる順で実行されることもあります。

＜本文＞
defer属性とasync属性を同時に指定した場合は、async属性の挙動になります。

＜memo＞
互換性のためにdefer属性とasync属性を同時に指定することがあります。両方を指定すると、async属性を理解しない古いブラウザーではdefer属性の挙動になります。

＜本文＞
なお、モジュールスクリプトの場合には、デフォルトで並行読み込みが行われ、HTMLの解析完了を待って実行されます。これはdefer属性が指定されている場合の振る舞いと同様です。言い換えると、モジュールスクリプトではdefer属性は無視され、常にdefer属性があるかのような動作になります。async属性を指定した場合には動作が変わり、HTMLの解析完了を待つことなく実行されるようになります。
〓11〓はHTML仕様に掲載されている図で、defer属性およびasync属性の動作のタイミングをタイムラインで示したものです。＜コメント：仕様から修正した図を掲載予定のはず＞

〓11〓defer属性およびasync属性の動作
＜SCG形式＞

＜本文＞
JavaScriptの処理内容によっては、単純にdefer属性やasync属性を指定するとうまく動作しないことがあります。たとえば、document.write()メソッドを実行するとエラーとなり、Chromeではコンソールに次のエラーメッセージが出力されます。
＜囲み＞
Failed to execute 'write' on 'Document': It isn't possible to write into a document from an asynchronously-loaded external script unless it is explicitly opened.
＜/囲み＞
document.write()メソッド以外にも、HTMLのDOMツリーを参照するような処理が動作しなくなることがあります。DOMContentLoadedイベントをトリガーにして動作させるなど、JavaScript側で遅延実行を想定した実装をしておく必要があります。
なお、defer属性やasync属性を指定できるのは、src属性で外部JavaScriptを読み込んでいる場合だけです。src属性がないscript要素にはこれらの属性を指定できず、指定すると構文エラーとなります。

＜丸見出し＞
script要素を後から挿入した場合の挙動
＜本文＞
DOM操作でscript要素を生成した場合、DOMツリーに挿入されてDOMツリーと「結びつけられた（becomes connected）」時点でスクリプトが実行されます。

＜memo＞
スクリプト実行までのプロセスの詳細は、仕様の「4.12.1.1 Processing model」を参照してください。
https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model

＜本文＞
ただし、〓12〓のようにcreateElement()メソッドでscript要素を生成した場合、最初からasyncプロパティがtrueになっていることがあります。〓12〓で生成したノードをそのままDOMツリーに挿入すると、非同期で実行されます。

〓12〓asyncプロパティがtrueの状態
＜コード＞
<script>
  // 特に属性を指定せずにscript要素を生成
  const scriptElement = document.createElement('script');
  // 最初からasyncプロパティがtrueになっている
  alert(scriptElement.async); // true
</script>

＜本文＞
document.write()メソッドでscript要素を書き込んだ場合は、defer属性やasync属性を指定していない限り同期実行になります。この場合、HTMLの解析がブロッキングされ、パフォーマンスに悪影響が出る場合があることに注意してください。

＜memo＞
冒頭でも述べたように、document.write()メソッドの利用は推奨されません。

＜本文＞
なお、innerHtmlやouterHTMLプロパティでscript要素を書き込んだ場合は、そのJavaScriptは実行されません（非同期で一定時間後に実行されるのではなく、一切実行されません）。

＜丸見出し＞
nomodule属性
＜本文＞
nomodule属性を利用すると、モジュールを扱えない古いブラウザーにフォールバックを提供できます。〓13〓は、モジュールスクリプト"app.mjs"と、フォールバック用のクラシックスクリプト"classic-app.js"を扱う例です。

〓13〓app.mjsとclassic-app.jsを扱う例
＜コード＞
<script type="module" src="app.mjs"></script>
<script nomodule src="classic-app.js"></script>

＜本文＞
モジュールスクリプトをサポートするブラウザーは、nomodule属性が指定されたクラシックスクリプトを無視します。そのため、"app.mjs"のみを実行します。
一方、モジュールをサポートしないブラウザーはtype=moduleを不明な属性として無視するため、モジュールスクリプトは無視されます。そしてnomodule属性を理解しないため、"classic-app.js"を実行します。

＜丸見出し＞
crossorigin属性
＜本文＞
crossorigin属性を指定すると、src属性で指定されたリソースをクロスオリジンで参照する場合のCORSの挙動を制御できます。オリジンとCORSについてはChapter1-5を参照してください。
script要素がクラシックスクリプトとして扱われる場合、crossorigin属性が指定されていないと、単なるGETリクエストでリソースを取得します。
crossorigin属性が指定されている場合、CORSによるリクエストを行います。

＜memo＞
crossorigin属性が指定されている場合、リクエストにCORSに関連するHTTPヘッダーが追加されます。また、エラー時にはwindow.onerrorイベントハンドラーで詳細なエラー情報が取得できます。

＜本文＞
crossorigin属性に指定された値によって、HTTP認証やCookieなどのクレデンシャル情報の扱いが以下のように変化します。

・"anonymous": HTTP認証やCookieなどのクレデンシャル情報は、同一オリジンに対してのみ送信されます。クロスオリジンの場合には送信されません。
・"use-credentials": オリジンにかかわらずクレデンシャル情報が常に送信されます。

crossorigin=""が指定されている場合、あるいは単にcrossoriginとだけ指定されている場合は、crossorigin="anonymous"と同じ挙動になります。
なお、この属性はあくまでscript要素のsrc属性で指定したリソースの取得を制御するもので、JavaScript内部からのリクエストには影響しません。JavaScript内部からのCORSリクエストについては、たとえばXmlHttpRequestを用いたJavaScriptでwithCredentialsプロパティを設定するなどの対応が必要です。
モジュールスクリプトの場合、crossorigin属性が指定されていなくても、常にCORSによるリクエストが行われます。crossorigin属性を指定すると、クレデンシャル情報の扱いを変更できます。

＜丸見出し＞
integrity属性
＜本文＞
integrity属性を使用すると、「サブリソース完全性（Subresource Integrity）」の仕様に沿って外部リソースの完全性をチェックできます。これにより、サブリソースとして取得したJavaScriptが改竄されていないことを確認できます。

＜memo＞
Subresource Integrity
https://w3c.github.io/webappsec-subresource-integrity/

＜本文＞
外部のサイトから読み込んでJavaScriptを実行している場合、その外部のサイトが攻撃を受けてJavaScriptが改竄されると、読み込んでいる側のサイトまで攻撃の影響を受けてしまいます。サブリソース完全性はこのようなリスクに対応する仕組みで、ハッシュ値の照合によってリソースの改竄チェックを行います。
integrity属性の値は、ハッシュアルゴリズムを示す接頭辞と、base64でエンコードされたハッシュ値を‐（ハイフン）で繋いだ文字列です。integrity属性が指定されており、指定されたハッシュ値がリソースのハッシュ値と一致しなかった場合、リソースは読み込まれず、ネットワークエラーで取得に失敗した扱いとなります。
integrity属性は、スペースで区切って複数の値を指定できます。〓14〓はSubresource Integrity仕様で挙げられている例です。

＜memo＞
ハッシュアルゴリズムの接頭辞として現在利用できるものは、sha256、sha384、sha512です。

＜本文＞
〓14〓Subresource Integrity仕様で挙げられているintegrity属性の使用例
＜コード＞
<script src="hello_world.js"
  integrity="sha384-H8BRh8j48O9oYatfu5AZzq6A9RINhZO5H16dQZngK7T62em8MUt1FLm52t+eX6xO
  sha512-Q2bFTOhEALkN8hOms2FKTDLy7eugP2zFZ1T8LCvX42Fp3WoNr3bjZSAHeOsHrbV1Fu9/A0EzCinRE7Af1ofPrw=="
  crossorigin="anonymous"></script>
  
＜本文＞
この例では、SHA384とSHA512という強度の異なるハッシュ値を指定しています。このように強度の異なるハッシュ値を列挙すると、ブラウザーが対応している中で最も強度の高いものが採用されます。
〓15〓のように強度が同一のハッシュ値を列挙した場合、ブラウザーはその全てを採用します。

〓15〓強度が同一のハッシュ値を複数指定した場合の例
＜コード＞
<script src="https://example.com/example-framework.js"
  integrity="sha384-Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7
  sha384-+/M6kredJcxdsqkczBUjMLvqyHb1K/JThDXWsBVxMEeZHEaMKEOEct339VItX1zB"
  crossorigin="anonymous"></script>

＜本文＞
この場合、ブラウザーはハッシュ値のいずれかがマッチした場合に整合性のあるリソースであると判断します。

＜memo＞
外部リソースに更新の予定がある場合、更新前後のハッシュ値を両方とも指定しておくと、更新のタイミングに合わせてintegrity属性を書き換える必要がなくなります。

＜本文＞
なお、integrity属性を指定できるのは、src属性で外部JavaScriptを読み込んでいる場合だけです。src属性がないscript要素にはこの属性を指定できず、指定すると構文エラーとなります。

＜丸見出し＞
referrerpolicy属性
＜本文＞
referrerpolicy属性を使用すると、JavaScriptを参照する場合の「リファラポリシー（Referrer Policy）」を指定できます。Chapter3-5を参照してください。
script要素にreferrerpolicy属性を指定した場合、そのJavaScriptからimportで読み込まれるリソースにもポリシーが適用されます。〓16〓はHTML仕様で挙げられている例です。

〓16〓referrerpolicy属性の記述例
＜コード＞
<script referrerpolicy="origin">
  fetch('/api/data');
  import('./utils.mjs');
</script>

＜本文＞
referrerpolicy属性で指定したポリシーはfetch()メソッドで読み込むリソースには適用されませんが、import()で読み込むリソースには適用されます。

＜丸見出し＞
廃止された属性：charset属性
＜本文＞
以前のHTMLではscript要素にcharset属性を指定できましたが、現在は廃止されています。これは、外部JavaScriptファイルの文字エンコーディングを指定するものでした。
現在のHTMLでは、外部JavaScriptファイルの文字エンコーディングはHTTPレスポンスヘッダーのcharsetパラメーターに依存します。charsetパラメーターがない場合はUTF-8とみなされます。

＜memo＞
charset属性の値が"utf-8"の場合（大文字小文字は区別しません）のみ、「旧式だが適合する機能」として仕様に適合します。"utf-8"以外の値が指定されている場合は構文エラーですが、ブラウザーは互換性のために、その値をヒントとして利用することがあります。
外部スクリプト取得時の文字コード判定の詳細は、HTML仕様およびRFC4329を参照してください。

8.1.4.2 Fetching scripts
https://html.spec.whatwg.org/multipage/webappapis.html#fetch-a-classic-script

RFC4329 4.2. Character Encoding Scheme Detection
https://www.rfc-editor.org/rfc/rfc4329.html#section-4.2

＜中見出し＞
noscript要素
＜本文＞
noscript要素を用いると、ブラウザーのJavaScriptが無効になっている場合のフォールバックコンテンツを提供できます。JavaScriptが有効である場合、この要素の内容は表示されません。
たとえば、スクロールしてから画像が表示されるような場所に配置されるimg要素に対し、JavaScriptを用いて遅延読み込み（Lazy load）を行う場合、〓17〓のように記述することで、JavaScriptが無効の環境でも画像を表示させることができます。

＜memo＞
noscript要素を利用できるのは、HTML構文の場合のみです。XML構文ではnoscript要素は使用してはならないと定められています。

〓17〓noscript要素の記述例
＜コード＞
<img src="blank.jpg" data-src="target.jpg" alt="">
<noscript><img src="target.jpg" alt=""></noscript>

＜本文＞
フォールバックコンテンツの表現には、必ずしもnoscript要素は必要ありません。たとえば〓18〓のように、JavaScript無効時のコンテンツをHTMLに書いておき、JavaScriptによるDOM操作で書き換える方法があります。このようにすると、HTMLに書いたメッセージがフォールバックとして機能します。

〓18〓noscript要素を使用せずにフォールバックコンテンツを記述する例
＜コード＞
<p id="message">（JavaScript無効時のフォールバックコンテンツ）</p>
<script>
  document.getElementById("message").textContent="JavaScript有効時のコンテンツ"
</script>

＜小見出し＞
内容モデル
＜本文＞
noscript要素の内容モデルは、JavaScript有効時と無効時で異なります。
JavaScript有効時、noscript要素の内容は単なるテキストとみなされ、noscript要素の終了タグ以外のマークアップは解釈されません。

＜memo＞
ただし、script要素やnoscript要素の開始タグ・終了タグをすべて取り除いたときにHTMLとして適切な構文になっていないと、構文エラーとされます。

＜本文＞
JavaScript無効時は以下のようになります。

・noscript要素がhead要素の内側で出現した場合、子要素にできるのはlink、style、meta要素だけです
・noscript要素がhead要素の外側で出現した場合、内容モデルがTransparentであるように振る舞います。ただし、子孫にnoscript要素を入れることはできません

＜中見出し＞
canvas要素
＜本文＞
canvas要素は、JavaScriptで任意のビットマップを描画できるキャンバスを表します。グラフや画像、映像などの描画に利用できます。
〓19〓はcanvas要素に円弧を描画する例です。表示例は〓20〓のようになります。

〓19〓canvas要素に円弧を描画する記述例
＜コード＞
<canvas id="canvas01" width="100" height="100">
  <img src="sample.png" alt="[図] 円弧の例">
</canvas>
<script>
  const canvas = document.getElementById('canvas01');
  const c = canvas.getContext('2d');
  c.strokeStyle = '#ff6600';
  c.beginPath();
  c.arc(50, 50, 40, 0, 0.5 * Math.PI, true);
  c.stroke();
</script>

〓20〓ブラウザーによる〓19〓の表示例

＜memo＞
canvas要素にはさまざまなものを多岐にわたる方法で描画できます。具体的な描画の仕方は、MDNのチュートリアルなどを参照してください。
Canvas チュートリアル
https://developer.mozilla.org/ja/docs/Web/API/Canvas_API/Tutorial

＜小見出し＞
内容モデル
＜本文＞
canvas要素の内容モデルはTransparentです。ただし、インタラクティブ要素を子孫要素にはできません。

＜memo＞
インタラクティブ要素には、a要素、button要素、tabindex属性が指定された要素などが含まれます。詳しくはChapter3-0を参照してください。

＜本文＞
canvas要素の内容は、canvas要素が利用できない場合のフォールバックコンテンツとして機能します。canvas要素が画像として使用されている場合は、代替となるimg要素などを入れておくとよいでしょう。より複雑な機能を提供している場合は、可能な限りその機能を代替できる内容を入れておくべきです。

＜小見出し＞
属性
＜本文＞
width属性とheight属性でcanvas要素のピクセルサイズを指定できます。省略時のデフォルト値はwidthが"300"、heightが"150"です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
canvas要素にデフォルトのARIAロールはありません。canvas要素はさまざまな視覚表現ができますが、canvas要素自体はセマンティクス上の意味を持たないことに注意してください。
canvas要素以外で表現できるものにcanvas要素を利用するのは避けたほうがよいでしょう。特に、見出しやナビゲーションをcanvas要素に置き換えると、支援技術でナビゲーションできなくなるなど、アクセシビリティ上の問題が発生することがあります。

＜memo＞
かつて、ナビゲーションをすべてFlashで実装する企業サイトが流行し、アクセシビリティ上の大きな問題となりました。canvas要素も同じような使い方ができますが、同じ問題を繰り返さないようにしたいものです。

＜中見出し＞
Web Components
＜本文＞
Web Componentsは、HTML要素をコンポーネント化する技術群の総称です。主要な技術としては、以下の3つで構成されています。

・カスタム要素
・Shadow DOM
・HTMLテンプレート（template要素、slot要素）

本書では、HTML要素として存在するtemplate要素、slot要素と、カスタム要素について簡単に紹介します。

＜memo＞＜コメント：1行目の「たとえば」で始まる文字列が抜けている＞
Web Componentsの詳細は、MDNを参照してください。
https://developer.mozilla.org/docs/Web/Web_Components

＜中見出し＞
template要素
＜本文＞
template要素は、それ自身は何も表さない、HTML断片のコンテナーです。template要素は、その内容も含めレンダリングされません。主に、JavaScriptによって文書に挿入するためのHTMLの断片を書いておくために使用します。
JavaScriptから使用するデータをHTMLに含めるという意味では、script要素によるデータブロックにも似ていますが、template要素の内容はHTMLとして解析され、DOMツリーが作られるという点で異なります。このDOMツリーはどこにも挿入されず、template要素のcontentプロパティからDocumentFragmentオブジェクトとして取得できます。

＜memo＞
template要素の利用法については、MDNを参照してください。
<template>: コンテンツテンプレート要素
https://developer.mozilla.org/ja/docs/Web/HTML/Element/template

＜小見出し＞
内容モデル
＜本文＞
template要素の内容モデルはNothingと定義されています。前述のように、template要素の内容はHTMLとして解析されますが、DOMツリーに直接挿入されることはなく、あたかもtemplate要素の内容が空であるように振る舞います。

＜中見出し＞
slot要素
＜本文＞
slot要素は、Shadow DOMにおけるスロット、可変値を挿入するためのプレースホルダーを定義します。
slot要素には、name属性で名前を与えることができます。Shadow DOMを利用する際、要素にslot属性で名前を指定して渡すと、対応する名前のslot要素の箇所に挿入されます。

＜memo＞
slot要素の利用法については、MDNを参照してください。
<slot>: ウェブコンポーネントのスロット要素
https://developer.mozilla.org/ja/docs/Web/HTML/Element/slot

＜小見出し＞
内容モデル
＜本文＞
slot要素の内容モデルはTransparentです。slot要素はプレースホルダーであり、その内容は何かに置換される想定ですが、内容を入れておくと、置換されない場合のデフォルト値として利用できます。

＜中見出し＞
カスタム要素
＜本文＞
「カスタム要素（Custom Elements）」は、Web Componentsを構成するものの1つです。
古くから、独自に定義した要素を利用したいというニーズがコンテンツ制作者にあります。そのような独自の要素を実際に使用すると、ブラウザーは柔軟に解釈することがある一方で、古いHTML仕様ではそのような独自の要素は定義されていないため、構文エラーとなります。
現在のHTML仕様では、カスタム要素として、コンテンツ制作者が自由にHTMLの要素名を一定の制約のもとで定義できます。これにより、HTML仕様に適合させながら、独自に定義した要素を利用できます。

＜小見出し＞
要素名の制約
＜本文＞
カスタム要素の要素名の制約は、大まかには以下の2点となります。

・アルファベットの小文字で始まること
・1つ以上の-（ハイフン）を含むこと

＜memo＞
要素名にハイフンを含む要素は、ほぼカスタム要素といえます。ただし、MathMLやSVGではハイフンを含む要素名が存在し、これらと同一の要素名をカスタム要素として利用できません。
要素名についての正確な制約は、HTML仕様に示されるPotentialCustomElementNameで定義されています。
https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname

＜本文＞
〓21〓はカスタム要素の使用例です。これは、Googleの検索結果で使用されている5つ星の評価のマークアップです。

〓21〓カスタム要素の記述例
＜コード＞
<g-review-stars><span class="fTKmHE99XE4__star-default" role="img" aria-label="5 点中 3.5 点の評価、"><span style="width:46px"></span></span></g-review-stars>

＜小見出し＞
カスタム要素の種類
＜本文＞
カスタム要素には、大きくわけて次の2種類があります。

・自律カスタム要素（autonomous custom element）: 任意の要素を表すHTMLElementインターフェイスを拡張する
・カスタマイズされた組み込み要素（customized built-in element）: HTML仕様で定義された要素を拡張する。たとえば、HTMLButtonElementインターフェイスであればbutton要素をもとに拡張できる

カスタム要素を利用する際は、JavaScriptを用いて、カスタム要素自身と、その動作を定義していくことになります。詳細についてはGoogle Developersの記事などを参照してください。

＜memo＞
Custom Elements v1: Reusable Web Components  |  Web Fundamentals  |  Google Developers 
https://developers.google.com/web/fundamentals/web-components/customelements
