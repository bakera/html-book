＜タイトル＞
グルーピングコンテンツ
＜リード＞
ここでは、テキストのかたまりをグループ化する際に関係する、グルーピングコンテンツについて説明します。

＜中見出し＞
p要素
＜本文＞
p要素は「段落（paragraph）」を表します。段落は、いくつかの文で構成される、文のかたまりです。後述するように、ここでいう段落は「構造的（structural）」なまとまりであり、必ずしも「論理的（logical）」なまとまりであるとは限りません。
基本的に、特別な役割を持たない文のかたまりはp要素でマークアップして差し支えありません。文のかたまりが特別な役割を持ち、その役割を表現する適切な要素があるなら、その要素を使うべきです。〓01〓の例では、セクションの末尾にある作成日と著作者の連絡先をp要素でマークアップしています。

〓01〓p要素の記述例
＜コード＞
<section>
  <!-- セクションの本文（省略）-->
  <p>作成日: 2012-03-21</p>
  <p>作者: info@example.com</p>
</section>

〓01〓は構文的には問題ありませんが、〓02〓のように、footer要素やaddress要素を使うとよいでしょう。p要素はfooter要素の中に入れることもできるので、〓03〓のようなマークアップも考えられます。

〓02〓〓01〓の適切な記述例
<section>
  <!-- セクションの本文（省略）-->
  <footer>作成日: 2012-03-21</footer>
  <address>作者: info@example.com</address>
</section>

〓03〓footer要素内にp要素を入れた記述例
＜コード＞
<section>
  <!-- セクションの本文（省略）-->
  <footer>
    <p>Last modified: 2001-04-23</p>
    <address>Author: fred@example.com</address>
  </footer>
</section>

＜小見出し＞
内容モデル
＜本文＞
p要素の内容モデルはPhrasingです。p要素の中にはh1要素などの見出しやdiv要素などは入れられません。p要素に別のp要素を入れることもできないため、p要素は入れ子にできません。

＜memo＞
p要素の終了タグは省略可能であるため、p要素に入れられない要素を入れようとした場合、終了タグが補われて解釈されます。

＜本文＞
ul要素やol要素などのリストも入れられない点に注意してください。文中で箇条書きを使いたくなることはありますが、〓04〓のようなマークアップは正しくありません。

〓04〓p要素内にul要素を記述しようとした不適切な記述例
＜コード＞
<p>ウェブページは、
<ul>
  <li>HTML</li>
  <li>CSS</li>
  <li>JavaScript</li>
</ul>
の3つの技術から構成されます。</p>

〓04〓は、〓05〓のように解釈されます。

〓05〓ブラウザーによる〓04〓の解釈
＜コード＞
<p>ウェブページは、</p>
<ul>
  <li>HTML</li>
  <li>CSS</li>
  <li>JavaScript</li>
</ul>
の3つの技術から構成されます。<p></p>

＜本文＞
このようなケースの対応方法の1つとして、リストの前後をそれぞれp要素としてマークアップする方法があります〓06〓。

〓06〓リストの前後をp要素でマークアップした記述例
＜コード＞
<p>ウェブページは、</p>
<ul>
  <li>HTML</li>
  <li>CSS</li>
  <li>JavaScript</li>
</ul>
<p>の3つの技術から構成されます。</p>

＜本文＞
それぞれの段落中の文は中途半端な場所で途切れていますが、構文上は問題ありません。このように、p要素は単に構造上のまとまりに過ぎないことがあり、論理的な意味でのまとまりになるとは限りません。
文が途中で切れるのを避けたい場合や、見た目をひとかたまりにしたい場合は、〓07〓のようにdiv要素でマークアップする方法もあります。

〓07〓div要素でマークアップした例
＜コード＞
<div>ウェブページは、
<ul>
  <li>HTML</li>
  <li>CSS</li>
  <li>JavaScript</li>
</ul>
の3つの技術から構成されます。</div>

＜小見出し＞
属性
＜本文＞
p要素にはalign属性がありましたが、現在では廃止されています。

＜丸見出し＞
廃止された属性：align属性
＜本文＞
かつてのHTMLでは、p要素にalign属性が定義されていました。要素の内容の配置を指定するもので、主にテキストの左寄せや右寄せ、センタリングの指定に用いられました。

＜memo＞
現在では、文字寄せの指定にはCSSのtext-alignプロパティを使用します。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
p要素にはデフォルトのARIAロールはありません。

＜memo＞
WAI-ARIA 1.1では「段落」に相当するARIAロールが定義されていません。WAI-ARIA 1.2ではparagraphロールが導入される予定です。近い将来、p要素はデフォルトでparagraphロールを持つことになるでしょう。

＜本文＞
2021年時点では、p要素について特別な読み上げをするスクリーンリーダーは知られていません。特別扱いする必要がない文について、p要素とするかどうかを神経質に考える必要はないでしょう。

＜中見出し＞
hr要素
＜本文＞
hr要素は、段落レベルのテーマの区切りを表します。小説であれば場面の変化で、論説であれば別の話題に移行するときなどに使用します。
section要素やh1-h6要素を使っている場合、それだけでテーマの変更を表現できるため、hr要素を併用する必要はありません。明示的に切れ目を表現したいが見出しは置けない、という場合にhr要素を使うことがあります〓08〓。

〓08〓hr要素を用いた記述例
＜コード＞
<p>ウェブでもっともよく目にする動物といえば、なんといっても猫でしょう。…</p>
<hr>
<p>そうはいっても、現実世界の道ばたで人と一緒に散歩しているのは犬です。…</p>

＜本文＞
多くのビジュアルブラウザーでは、デフォルトスタイルで水平線が表示されます。しかし、この要素は線を表す目的で使うべきではありません。スタイル目的で線を引く場合はCSSを使います。

＜小見出し＞
内容モデル
＜本文＞
hr要素の内容モデルはNothingです。この要素は空要素であり、内容を持つことはできません。終了タグを書くこともできません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
hr要素はデフォルトでseparatorロールを持ちます。スクリーンリーダーは「区切り」などと読み上げることがあります。また、スクリーンリーダーによっては、次の区切りにジャンプする機能が提供されていることもあります。

＜memo＞
古いHTMLではhr要素は「横罫線（horizontal rule）」として定義されていたため、hr要素を「横方向分割バー」と読み上げるスクリーンリーダーも存在します。

＜中見出し＞
pre要素
＜本文＞
pre要素は、「整形済みテキスト（preformatted text）」を表します。整形済みテキストとは、テキストが空白や改行によって整形され、その整形された見た目に一定の意味があるものです。例としては、電子メールの文面、コンピューターコードの断片、アスキーアートなどが挙げられます。
通常は、要素内のテキストに改行を入れたり、スペースを複数入れたりしても、見た目には反映されません。〓09〓は、Python言語で書かれたコードの断片をp要素に入れた例です。これは、〓10〓のように表示されます。

〓09〓コードの断片をp要素に入れた記述例
＜コード＞
<p>
with open(filename, 'w') as fp:
    fp.write(body.encode('UTF-8'))

print('saved:' + filename)
</p>

〓10〓ブラウザーによる〓09〓の表示例

＜本文＞
p要素の場合、〓10〓のように改行はスペースとなります。複数のスペースや改行が連続しても、1つのスペースにまとめられます。

＜memo＞
この整形はHTMLのルールではなく、CSSのwhite-space: normalの指定による処理です。ほとんどの要素はデフォルトスタイルでwhite-space: normalが設定されています。
3. White Space and Wrapping: the white-space property
https://www.w3.org/TR/css-text-3/#propdef-white-space

＜本文＞
Pythonのコードでは空白や改行に意味があるため、〓09〓のような表示をそのままコピーしても意図どおりには動作しません。
pre要素を使うと、改行やスペースを維持してそのまま表示します。

＜memo＞
この整形が行われるのは、pre要素のデフォルトスタイルがwhite-space: preであるためです。スタイルを上書きしてwhite-spaceプロパティの値を変更すれば、pre要素を通常の要素のような振る舞いにすることもできます。しかし、そのようなスタイルの上書きは混乱の元になるため、避けるべきでしょう。

＜本文＞
HTML構文では、<pre>タグ直後の改行はinter-element whitespaceとみなされて除去されます。つまり、〓11〓と〓12〓の２つは同じように表示されます。

〓11〓<pre>タグ直後に改行のない記述例
＜コード＞
<pre>with open(filename, 'w') as fp:
    fp.write(body.encode('UTF-8'))

print('saved:' + filename)
</pre>

〓12〓<pre>タグ直後で改行した記述例
<pre>
with open(filename, 'w') as fp:
    fp.write(body.encode('UTF-8'))

print('saved:' + filename)
</pre>

＜memo＞
XML構文ではinter-element whitespaceは除去されないため、〓12〓のようにすると先頭に空行が追加されます。xml:space属性を指定しても効果はなく、この挙動は変更できません。
https://html.spec.whatwg.org/multipage/dom.html#global-attributes:attr-xml-space

＜小見出し＞
内容モデル
＜本文＞
pre要素の内容モデルはPhrasingです。Phrasingに属する要素は入れられるため、〓13〓のように一部をマークアップすることもできます。

〓13〓ユーザーが入力する部分をkbd要素でマークアップした例
＜コード＞
<pre>
&gt; <kbd>copy before.txt after.txt</kbd>
after.txt を上書きしますか? (Yes/No/All): <kbd>No</kbd>
        0 個のファイルをコピーしました。
&gt;
</pre>

＜本文＞
pre要素の中でも文字参照は展開されます。文字として&や<を書きたい場合は、それぞれ&amp;、&lt;とする必要があります。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
pre要素にはデフォルトのロールはありません。スクリーンリーダーが特別な読み上げをすることはありません。
pre要素を使ってアスキーアートを表現する場合、スクリーンリーダーでは無意味な記号の羅列として読み上げてしまうことがあります。その場合、明示的にrole=imgを指定するとよいでしょう。〓14〓はARIA in HTMLで紹介されている例です。

＜memo＞
ARIA in HTML EXAMPLE 6
https://www.w3.org/TR/html-aria/#example-6

＜本文＞
〓14〓pre要素にrole=imgを指定した例
＜コード＞
<figure>
  <pre role="img">
  o           .'`/
    '      /  (
  O    .-'` ` `'-._      .')
      _/ (o)        '.  .' /
      )       )))     ><  <
      `\  |_\      _.'  '. \
        '-._  _ .-'       '.)
    jgs     `\__\
  </pre>
  <figcaption id="fish-caption">
    Joan G. Stark, "<cite>fish</cite>".
    October 1997. ASCII on electrons. 28×8.
  </figcaption>
</figure>

＜本文＞
pre要素でアスキーアートを表現し、figure要素とfigcaption要素でキャプションを付けています。支援技術がrole=imgを解釈する場合、アスキーアートの中身を読み上げずに、キャプションを読み上げることが期待できます。

＜中見出し＞
blockquote要素
＜本文＞
blockquote要素は、別のソースから引用されているセクションを表します。

＜小見出し＞
内容モデル
＜本文＞
blockquote要素の内容モデルはFlowです。テキストをそのまま書くことも可能であり、p要素やul要素などを入れても構いません。
h1要素などの見出しを入れることも可能です。Chapter3-2で紹介したように、アウトラインアルゴリズムでは、blockquote要素はセクショニングルートとなります。〓15〓のようにblockquote要素の中に見出しが入っていても、文書全体のアウトラインには影響しません。

〓15〓blockquote要素の中に見出しが入っている例
＜コード＞
<h4>著作権法について</h4>
<p>以下引用</p>
<blockquote>
  <h3>（保護を受ける著作物）</h3>
  <p>第六条　著作物は、次の各号のいずれかに該当するものに限り、この法律による保護を受ける。</p>
</blockquote>

＜小見出し＞
属性
＜本文＞
blockquote要素の属性について解説します。

＜丸見出し＞
cite属性
＜本文＞
cite属性を利用すると、引用元のURLを示すことができます。しかし、現在のHTML仕様では、cite属性で指定したURLをブラウザーが解釈することを想定していません。
cite属性で指定したURLは、ユーザーには伝わらないことがあります。
引用元を表現したい場合は、明示的に記述するべきです。たとえば〓16〓のように、blockquote要素の直後に書いてもよいでしょう。

〓16〓blockquote要素の直後にcite属性を記述した例
＜コード＞
<blockquote>
  <p>吾輩は猫である。名前はまだ無い。</p>
</blockquote>
<p>—夏目漱石 『<cite>吾輩は猫である</cite>』</p>

＜本文＞
参考までに、W3C HTML 5.2では、footer要素を使用してblockquote要素の内側に書く方法が示されていました〓17〓。

〓17〓blockquote要素の内側にfooter要素を記述した
＜コード＞
<blockquote>
  <p>吾輩は猫である。名前はまだ無い。</p>
  <footer>—夏目漱石 『<cite>吾輩は猫である</cite>』</footer>
</blockquote>

＜本文＞
冗長ではありますが、figure要素とfigcaption要素を使って、明示的に引用文と引用元を関連付けることもできます〓18〓。

〓18〓figure要素とfigcaption要素を利用した記述例
＜コード＞
<figure>
  <blockquote>
    <p>吾輩は猫である。名前はまだ無い。</p>
  </blockquote>
  <figcaption>夏目漱石 『<cite>吾輩は猫である</cite>』</figcaption>
</figure>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
blockquote要素にデフォルトのARIAロールはありません。

＜memo＞
WAI-ARIA 1.1では「引用」に相当するARIAロールが定義されていません。WAI-ARIA 1.2ではblockquoteロールが導入される予定です。近い将来、blockquote要素はデフォルトでblockquoteロールを持つことになるでしょう。

＜本文＞
多くのスクリーンリーダーは、この要素に差し掛かると「引用」と読み上げ、この要素から抜けるときに「引用終了」と読み上げます。このように、スクリーンリーダーはblockquote要素を明確に引用として伝えます。引用ではない箇所にこの要素を使ってはなりません。

＜中見出し＞
ol要素
＜本文＞
ol要素は、リストを表します。後述するul要素と異なり、ol要素は順序を持ち、順序に意味がある項目、たとえば料理のレシピやスポーツ競技の順位結果などに用います。

＜memo＞
一般的に、ol要素のリスト項目には番号が振られます。この番号はスタイルシートによってリストマーカーとして付与されたものです。多くのブラウザーではlist-style-type: decimalをデフォルトとしており、算用数字が表示されます。CSSによって文字種を変更したり、表示しないようにすることも可能です。
DOMツリーにはリスト項目の番号は含まれていないことに注意してください。ol要素を選択してコピーした際、番号はコピーされない場合があります。利用規約の条文など、番号が重要な意味を持つ場合は、あえてol要素を使用せずに番号をテキストで書くという判断もありえます。

＜小見出し＞
内容モデル
＜本文＞
ol要素の内容モデルは「Zero or more li and script-supporting elements.」と定義されています。基本的にはli要素だけが子要素になると考えて差し支えありません。〓19〓のように、ol要素でリスト全体を、li要素で個々のリスト項目を表現します。

＜memo＞
li要素の個数は0個でもよいので、中身が空のol要素も構文上は許されています。最初は空のol要素だけ置いておき、JavaScriptで後からli要素を挿入するという利用法もあります。

〓19〓ol要素でリスト全体を、li要素で個々のリストを表現
＜コード＞
<ol>
  <li>豚肉を2cm幅に切る<li>
  <li>もやしは洗ってザルに上げて水気をきる</li>
...
</ol>

＜本文＞
リスト項目の中に別のリストを入れることもできます。ol要素を他のol要素の直接の子要素にはできませんが、li要素の子要素にはできるため、〓20〓のようにリストを入れ子にできます。li要素の終了タグの位置に注目してください。

〓20〓ol要素をli要素の子要素にした記述例
＜コード＞
<ol>
  <li>1番目の項目</li>
  <li>2番目の項目    <!-- ここには終了タグはない -->
    <ol>
      <li>2番目の項目の、1番目のサブ項目</li>
      <li>2番目の項目の、2番目のサブ項目</li>
      <li>2番目の項目の、3番目のサブ項目</li>
    </ol>
  </li>            <!-- ここに終了タグを記述し、要素を閉じる -->
  <li>3番目の項目</li>
</ol>

＜小見出し＞
属性
＜本文＞
ol要素の固有の属性について解説します。

＜丸見出し＞
reversed属性
＜本文＞
通常、ol要素は昇順リストとなり、番号は1, 2, 3, … のように振られます。reversed属性を指定すると、降順リスト（…, 3, 2, 1）を表すことができます。

＜丸見出し＞
type属性
＜本文＞
type属性を使用すると、リストマーカーの種類を指定できます。たとえば、10進数の数字の代わりに、アルファベットやローマ数字を表示させることができます。ただし、CSSのlist-style-typeプロパティによる指定のほうが優先されるため、必ずしもHTMLで指定したマーカーの種類になるとは限りません。指定できる値の種類も、list-style-typeプロパティのほうが豊富です。

＜丸見出し＞
start属性
＜本文＞
start属性を使用すると、先頭のリストマーカーの値を指定できます。属性の値は整数です。〓21〓の例では、リストマーカーは1から始まってカウントダウンすることになります。結果として、1, 0, -1というリストマーカーが付けられます。

〓21〓start属性の記述例
＜コード＞
<ol start="1" reversed>
  <li>このリストは1から始まって</li>
  <li>カウントダウンしていくという</li>
  <li>やや風変わりな例です。</li>
</ol>

＜memo＞
type属性とstart属性は、HTML4の仕様では「非推奨（deprecated）」とされていましたが、現在のHTMLでも廃止されることなく定義されています。HTML4ではCSSで代用する想定でしたが、リストマーカーの数値は単なる装飾ではなく、意味を持つ場合もあるため、HTMLの属性として情報を持つことができるようになっています。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
ol要素のデフォルトのARIAロールはlistです。スクリーンリーダーは、これがリストであることを伝えます。伝え方はスクリーンリーダーによって異なり、「リストの開始位置」とだけ読み上げるもの、「リスト2項目」のように項目数を読み上げるものなどがあります。
ほとんどの場合、リストマーカーの数字も読み上げられます。リストマーカーの種類を変えたり、start属性で開始番号を変更した場合の挙動は、ブラウザーやスクリーンリーダーによって異なります。見た目どおりに読み上げる場合もあれば、開始番号の指定が無視されて1から順に読み上げられる場合もあります。リストマーカーの種類や開始番号を変更している場合、そのことがスクリーンリーダーに伝わらない可能性があることに注意してください。

＜中見出し＞
ul要素
＜本文＞
ul要素はリストを表します。ol要素と異なるのは、項目の順序が重要ではない点です。つまり、項目の順序を変更しても文書の意味が実質的に変わらないようなリストを表します。ul要素はリスト全体を表現し、個々のリスト項目はli要素で表現します。

＜小見出し＞
内容モデル
＜本文＞
ul要素の内容モデルはol要素と同一です。li要素が子要素となる点、空のul要素が許される点、li要素の中に別のリストを入れられる点も同様です。
〓22〓のように、ul要素とol要素を組み合わせた入れ子も可能です。

〓22〓、ul要素とol要素を組み合わせた入れ子の記述例
＜コード＞
<ul>
  <li>（順番が重要でない）1番目の項目</li>
  <li>（順番が重要でない）2番目の項目    <!-- ここには終了タグはない -->
    <ol>
      <li>2番目の項目の、（順番に意味がある）1番目のサブ項目</li>
      <li>2番目の項目の、（順番に意味がある）2番目のサブ項目</li>
      <li>2番目の項目の、（順番に意味がある）3番目のサブ項目</li>
    </ol>
  </li>           <!-- ここに終了タグを記述し、要素を閉じる -->
  <li>（順番が重要でない）3番目の項目</li>
</ul>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
ul要素のデフォルトのARIAロールはlistであり、ol要素と同様です。スクリーンリーダーは、ol要素と同様にリストであることを伝えます。
ul要素の場合、リストマーカーの数字が読み上げられることはありませんが、スクリーンリーダーによっては、このリスト項目がリスト全体の何番目なのかわかるように、「2分の1」などと読み上げる場合があります。

＜中見出し＞
li要素
＜本文＞
li要素は、リストに含まれる個々の項目を表します。これまでに取り上げたol要素やul要素の子要素として利用できます。具体的な使用例については、ol要素やul要素を参照してください。

＜小見出し＞
内容モデル
＜本文＞
li要素の内容モデルはFlowです。他のほとんどの要素を入れることができます。先に述べたように、ol要素やul要素を入れ子にできます。
h1などの見出しを入れることも可能です。ただし、li要素はセクショニングルートにならないため、見出しを入れると暗黙のセクションが作られます。リストの途中で新たなセクションが始まり、複数のセクションに分割されるような構造は望ましくないことが多いでしょう。

＜小見出し＞
属性
＜本文＞
li要素の属性について解説します。

＜丸見出し＞
value属性
＜本文＞
li要素の親がol要素である場合、value属性を指定するとリストマーカーの番号を変更できます。〓23〓の例では、3番目のli要素にvalue=2を指定しています。

〓23〓value属性の記述例
＜コード＞
<ol>
  <li>最初の項目</li>
  <li><del>2番目の項目を削除</del></li>
  <li value="2">3番目だった項目を2番手に昇格</li>
  <li>4番目だった項目</li>
</ol>

＜本文＞
この場合、リストマーカーの番号は順に1、2、2、3となります。後続のli要素も変更の影響を受けることに注意してください。

＜memo＞
value属性はHTML4の仕様では非推奨とされていましたが、現在のHTMLでも廃止されることなく定義されています。リストマーカーの数値は単なる装飾ではなく、意味を持つ場合もあるため、HTMLの属性として情報を持たせることができるようになっています。

＜memo＞
番号を決定するアルゴリズムの詳細は、HTML仕様を参照してください。
4.4.8 The li element
https://html.spec.whatwg.org/multipage/grouping-content.html#ordinal-value

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
li要素のデフォルトのARIAロールはlistitemです。スクリーンリーダーによる扱いは、親要素がol要素の場合とul要素の場合とで異なります。ol要素やul要素を参照してください。

＜コラム＞
もう1つのリスト: menu要素
＜本文＞
li要素を親にできる要素は、ol要素やul要素のほかにもう1つあります。それがmenu要素です。
menu要素はHTML 2.0の頃から存在していた要素で、当時はリスト項目の内容が1行で収まるものとされていました。現在のHTML仕様では意味が再定義され、ユーザーが操作可能なボタンやリンクなどを列挙するツールバー、メニューバーなどを表すものと定義されています。
しかし、2021年現在、ウェブサイトでmenu要素を見かけることはほとんどありません。menu要素についての詳細は、仕様を参照してください。
＜/コラム＞

＜中見出し＞
dl要素、dt要素、dd要素
＜本文＞
dl要素は、名前と値のグループから構成される、説明リスト（description list）あるいは関連リスト (association list) を表します。名前と値のグループの例としては、用語とその定義、メタデータのトピックと値、質問と回答などが挙げられます。

＜memo＞
古いHTMLでは用語の定義のために用いられており、定義リスト（definition list）と呼ばれていました。現在は意味が再定義され、用語定義以外の用途にも使えるようになっています。

＜小見出し＞
内容モデル
＜本文＞
dl要素の内容モデルは以下のように定義されています。

＜囲み＞
Either: Zero or more groups each consisting of one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements.
Or: One or more div elements, optionally intermixed with script-supporting elements.
＜/囲み＞

dl要素を使用する場合、名前をdt要素、値をdd要素で表現します。名前と値の対応は、必ずしも1対1である必要はありません。〓24〓の例は、1つの定義を2つの用語に対応させている例です。

〓24〓dl要素、dt要素、dd要素の記述例
＜コード＞
<dl>
 <dt lang="ja"> <dfn>色</dfn> </dt>
 <dt lang="en-GB"> <dfn>colour</dfn> </dt>
 <dd>光の波長の違い（色相）によって受ける感覚。
 また、明るさ（明度）や鮮やかさ（彩度）によっても異なるように感じる。</dd>
</dl>

＜本文＞
多くの場合、dl要素の直下にdt要素とdd要素を入れますが、名前と値のグループをdiv要素で囲むこともできます。〓25〓の例は、メタデータをマークアップするdl要素の使用例です。最後のグループが、2つのメタデータラベル（「著作者」と「編集者」）と2つの値（"Robert Rothman"と"Daniel Jackson"）を持ちます。

〓25〓メタデータをマークアップするdl要素の記述例
＜コード＞
<dl>
  <div>
    <dt>最終更新日</dt>
    <dd>2004-12-23T23:33Z</dd>
  </div>
  <div>
    <dt>推奨の更新間隔</dt>
    <dd>60秒</dd>
   </div>
  <div>
    <dt>著作者</dt>
    <dt>編集者</dt>
    <dd>Robert Rothman</dd>
    <dd>Daniel Jackson</dd>
  </div>
</dl>

＜本文＞
このようにdiv要素で囲む場合、dl要素直下にはdiv要素だけが出現しなければならず、dt要素やdd要素が直接出現することはできません。〓26〓のように混在させると構文エラーとなります。

〓26〓dl要素直下にdt要素やdd要素を記述した構文エラーとなる記述例
＜コード＞
<dl>
  <dt>最終更新日</dt>
  <dd>2004-12-23T23:33Z</dd>
  <dt>推奨の更新間隔</dt>
  <dd>60秒</dd>
  <div>
    <dt>著作者</dt>
    <dt>編集者</dt>
    <dd>Robert Rothman</dd>
    <dd>Daniel Jackson</dd>
   </div>
</dl>

＜本文＞
dt要素とdd要素の内容モデルは基本的にはFlowです。ただし、dt要素には追加の制約があり、見出しやセクションなどを含めることができません。詳しくは仕様を確認してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
dl要素のアクセシビリティ上の扱いには注意が必要です。2021年現在のARIA in HTMLによる定義では、dl要素にはデフォルトのARIAロールはなく、dt、dd要素のロールはそれぞれterm、definitionとなります。
しかし、2018年6月時点のARIA in HTMLでは、dl要素はlistロール、dt要素とdd要素はlistitemロールとされていました。そのため、スクリーンリーダーによっては、dl要素を単なるリストとし、dt要素とdd要素を等しくリスト項目として扱うことがあります。たとえば、〓26〓の例は1つの名前と値の組み合わせがですが、「2件のリスト」と読み上げられる場合があります。

〓27〓dt要素とdd要素を組み合わせた記述例
＜コード＞
<dl>
  <dt>name</dt>
  <dd>value</dd>
</dl>

＜memo＞
なお、2021年現在で勧告候補となっているWAI-ARIA 1.2では、termロールはdfn要素に対応するものとされ、definitionロールはdd要素と無関係なものと位置付けられています。
また、2021年12月時点のEditor's DraftのWAI-ARIA 1.3では、dl、dt、dd要素に対応するassociationlist、associationlistitemkey、associationlistitemvalueというロールが新たに定義されています。
このように、dl要素に関連するロールの仕様はかなり流動的です。当面の間、スクリーンリーダーによるdl関連要素の扱いは安定しないものと考えられます。

＜本文＞
dl要素は一見便利に利用できますが、本当にdl要素が適切かどうかは慎重に検討してください。
dt要素は見出しではないため、小見出しのようなものをdt要素とすると、見出しにジャンプする機能は提供されません。dd要素の内容が長文になるようなケースでは、見出しを利用したほうがよいでしょう。
対談や会話の表現にdl要素を利用し、話者をdt要素、発言をdd要素で表現するケースも見られますが、HTML Standardでは単純にp要素で表現することを勧めています。

＜memo＞
4.14.3 Conversations
https://html.spec.whatwg.org/multipage/semantics-other.html#conversations

＜本文＞
ただし、発言に対する返答が階層構造になるような複雑なケースについては、dl要素で表現するケースも例示されています。対応関係や階層構造を表現する必要がある場合はdl要素を利用し、そうでない場合は他の要素を検討するとよいでしょう。

＜中見出し＞
figure要素
＜本文＞
figure要素は、文書の本文から参照される自己完結型のコンテンツを表します。figureという単語は図や挿絵といった意味ですが、単なる図の他にも画像、図表、例、コード断片などに使用できます。以下の性質をすべて満たすものはfigure要素としてマークアップ可能です。

・本文から参考として参照されている
・本文から切り離しても、本文が意味不明にならず成立する
・自己完結しており、本文とあわせて読まなくても、単独で1つのコンテンツとして成立する

たとえば、文の一部となっている画像は、文から切り離すと成立しなくなるため、figure要素にすることは不適切です。逆に1つの段落全体が画像で表現されているような場合は、前後の文と切り離しても単独で成立するため、figure要素にできると考えられます。

＜memo＞
figure要素をまるごと別ページや付録に移動したと仮定して、それでも意味不明にならずに成立するかどうかを考えてみるとよいでしょう。

＜小見出し＞
内容モデル
＜本文＞
figure要素の内容モデルは、以下のように定義されます。

＜囲み＞
Either: one figcaption element followed by flow content.
Or: flow content followed by one figcaption element.
Or: flow content.
＜/囲み＞

まず、この要素の子要素としてFlowに属する要素を入れることができます。それに加えて、figcaption要素を1つ置くことができます。figcaption要素の内容は、そのfigure要素のキャプションとみなされます。figcaption要素はなくても構いませんが、複数置くことはできません。また、figcaption要素はfigure要素の中の先頭か末尾に置く必要があります。〓28〓は、figure要素の内容の末尾にfigcaption要素を置いた例です。

〓28〓figure要素の内容の末尾にfigcaption要素を記述した例
＜コード＞
<figure id="fig2">
  <img src="saji.png" alt="匙が山のように積み上がっている絵">
  <figcaption>図 2. 投げた匙の数</figcaption>
</figure>

＜memo＞
アウトラインアルゴリズムにおいて、figure要素はblockquote要素と同様にセクショニングルートとなります。セクショニングルートについてはCahpter3-2を参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
figure要素のデフォルトのARIAロールはfigureです。一方、figcaption要素にデフォルトのARIAロールは規定されていません。

＜memo＞
WAI-ARIA 1.1では「キャプション」に相当するARIAロールが定義されていません。WAI-ARIA 1.2ではcaptionロールが導入される予定です。近い将来、figcaption要素はデフォルトでcaptionロールを持つことになるでしょう。

＜本文＞
figcaption要素がある場合、その内容はfigure要素のキャプションとみなされます。figure要素の子要素にimg要素を入れている場合、figcaption要素でalt属性と同じ内容を指定すると、スクリーンリーダーは同じ内容を2回読み上げるため注意が必要です。

＜中見出し＞
main要素
＜本文＞
main要素は、文書の主要なコンテンツを表します。とくに、スクリーンリーダーのユーザーが長いヘッダーやナビゲーション部分を読み飛ばして本文のあるmain要素にジャンプする、いわゆるスキップリンクのような挙動を期待できます。〓29〓はmain要素を使用した例です。

〓29〓main要素の記述例
＜コード＞
<nav>
...多数のナビゲーションリンク...
</nav>
<main>
  <h1>...</h1>
  <article>
    <h2>...</h2>
    <p>...</p>
  </article>
</main>

＜本文＞
main要素はその性質上、原則として、1つのHTMLページに1つしか置くことができません。例外として、hidden属性を指定したmain要素は複数存在しても構いません。〓29〓の例のように、1つを除いてhidden属性を指定することで、複数のmain要素を1つのHTMLに置くことができます。これは、HTMLにあらかじめ複数のmain要素を配置しておき、JavaScriptで表示を切り替えるようなケースが想定されています。

〓30〓hidden属性を使用してmain要素を2つ記述した例
＜コード＞
<main>
  <h1>Home</h1>
  ...
</main>
<main hidden>
  <h1>About</h1>
  ...
</main>
<main hidden>
  <h1>Contact</h1>
  ...
</main>

また、main要素は基本的にbody要素の直下に置く必要があります。div要素やアクセシブルな名前を持たないform要素を挟むことは許されますが、他の意味のある要素の子孫要素にはできません。このため、main要素を他のランドマーク要素の中に入れることはできません。

＜小見出し＞
内容モデル
＜本文＞
main要素の内容モデルはFlowです。見出しや段落など、多くの要素を自由に子要素にできます。ただし、この要素は文書の主要な箇所を示すものです。主要でない部分を内容に含めないように注意してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
main要素のARIAロールは、要素名と同じmainです。mainロールはランドマークロールであり、スクリーンリーダーはこの要素に差し掛かると「メインランドマーク」のように読み上げることがあります。
ページのmain要素にグローバルヘッダー部分を含めているケースがありますが、その場合、mainランドマークロールにジャンプしてもナビゲーションをスキップできません。ヘッダーやフッター、サイトナビゲーションを除いた範囲を文書の主要部分として、main要素を指定するのがよいでしょう。

＜中見出し＞
div要素
＜本文＞
div要素は、特別な意味を持ちません。具体的な使用例としては、スタイルを付ける目的でid属性やclass属性と一緒に使用する、あるいはlang属性などを付与するために使用することなどが挙げられます。〓31〓は、単にスタイリングのためにdiv要素を使用している例です。

＜memo＞
特別な意味を持たない要素としては、div要素の他にspan要素があります。カテゴリーと内容モデルが異なっており、div要素のほうがより大きなグループ化に向いています。つまり、div要素は汎用のグループ化のための要素といえます。

〓31〓div要素の記述例
＜コード＞
<!-- スタイリングのために、入れ子にする例 -->
<div class="wrapper">
  <div class="inner">
    <p>...</p>
  </div>
</div>

〓32〓のように、文書の一部で異なる言語が使われていることを示すこともできます。

〓32〓div要素で異なる言語を明示した例
＜コード＞
<!-- 異なる言語であることを明示する例 -->
<div lang="lzh">
國破山河在
</div>

<div lang="ja">
国破れて山河在り
</div>

＜本文＞
またこの要素は、他に適切な要素がなかった場合の最後の手段としても使われます。たとえば、section要素が定義されていなかった頃のHTMLでは、セクションを示すためにdiv要素を使用するケースがありました〓33〓。

〓33〓section要素がなかった頃の古い記述例
＜コード＞
<div class="section">
  <h1>見出し</h1>
  <p>本文...</p>
</div>

＜本文＞
しかし、適切な要素が別にある場合は、その要素を使用すべきです。上記の例は、現在では〓34〓のように書いたほうがよいでしょう。

〓34〓現在推奨されている記述例
＜コード＞
<section>
  <h1>見出し</h1>
  <p>本文...</p>
</section>

＜小見出し＞
内容モデル
＜本文＞
通常、div要素の内容モデルはFlowです。多くの要素を子要素にできるため、柔軟なグルーピングが可能です。
例外として、div要素がdl要素の子要素として使われている場合、dt要素とdd要素のみが子要素となります。この用法についてはdl要素を参照してください。

＜小見出し＞
属性
＜本文＞
div要素の属性はalign属性がありましたが、現在では廃止されています。

＜丸見出し＞
廃止された属性: align属性
＜本文＞
かつてのHTMLでは、div要素にalign属性が定義されていましたが、p要素のalign属性と同様に廃止されています。詳しくはp要素の説明を参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
div要素にデフォルトのARIAロールはありません。div要素自体は意味を持たないため、スクリーンリーダーのユーザーには何の意味も伝わりません。何か意味を伝えたい場合、div要素以外の適切な要素が他にあるならば、その要素を使用するべきです。
他に適切な要素がない場合、WAI-ARIAと併用して意味を伝える方法もあります。WAI-ARIAについてはChapter4-2を参照してください。
