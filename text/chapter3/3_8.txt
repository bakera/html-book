＜タイトル＞
テーブル
＜本文＞
ここでは、テーブル（表）を表現するtable要素と、関連する要素について説明します。

＜中見出し＞
テーブルとは
＜本文＞
要素の説明の前に、テーブルについて確認しておきましょう。ここでいうテーブルとは、複数のデータを縦横に並べて、テーブルの形式にまとめたものを指します。データが入っている1つ1つの項目を「セル（cell）」、テーブルを水平方向に切ったときのまとまりを「行（row）」、垂直方向に切ったときのまとまりを「列（column）」と呼びます〓01〓。

〓01〓テーブルの構成部品

＜本文＞
テーブルにはタイトル（見出し、表題）が付けられることもあります。また、行や列にもラベルを付けることがあり、一般的に、行や列の先頭のセルにラベルを入れることで表現します。このようなラベルとなっているセルを「見出しセル（header cell）」と呼びます。
行や列はグループ化されることもあります。

＜中見出し＞
テーブル全体：table要素
＜本文＞
HTMLでは、前述のようなテーブル構造となったデータをtable要素で表現できます。table要素でテーブル全体を表現し、その中にテーブル中の行を表すtr要素を入れ、さらにその中にセルを表すtd要素を入れるのが基本となります。〓02〓は、2行3列のテーブルをマークアップした例です。これは〓03〓のように表示されます。

〓02〓table要素の記述例
＜コード＞
<table>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

〓03〓〓02〓の表示例

＜小見出し＞
内容モデル
＜本文＞
table要素の内容モデルは複雑です。caption要素、colgroup要素、thead要素、tbody要素、tfoot要素が子要素となり得ます。それぞれの要素については、この後で説明します。要素の省略の可否や入れられる個数についても各要素を参照してください。
table要素には最低でもtbody要素が1つ以上必要です。しかし、tbody要素は開始タグと終了タグが共に省略可能であるため、何も書かなくてもパース時にtbody要素が補われます。そのため、table要素の内容に何も書かない場合でも構文違反にはなりません。また、上記の例のように、tr要素をtable要素の直接の子要素であるかのような記述も可能です。ただしこの場合、tr要素はtbody要素の子要素になります。tbody要素についての説明も参照してください。
table要素直下には、これらテーブルに関連する要素のほかにscript要素とtemplate要素を入れることができますが、他の要素やテキストは入れられません。本来入れられない要素がtable要素の内部に出現した場合、"foster parenting"と呼ばれる特殊なエラー処理が行われ、該当の要素がtable要素の前に挿入されます。このエラー処理の詳細については、Chapter2-8を参照してください。

<memo>
空のtable要素は意味のないマークアップなので、HTML Checkerで報告されないからといってそのように記述してはなりません。

＜小見出し＞
属性
<本文＞
ここではtable要素の廃止された属性について説明します。

＜丸見出し＞
summary属性
＜本文＞
古いHTML4では、主にスクリーンリーダーに向けたテーブルの内容の要約・説明を記述するtable要素にsummary属性が定義されていました。現在のHTML仕様ではこの属性は廃止されています。
ウェブアクセシビリティのために導入された属性ですが、画面表示されないスクリーンリーダーのためだけの説明を設定・保守するのは困難だったこともあり、適切な利用法は普及しませんでした。ブラウザーのCSSのサポートが貧弱であった時代では、レイアウトの目的でtable要素が使われていたこともあり、summary="layout table"という無意味な指定が一部で普及してしまいました。この用法は、Techniques for WCAG 2.1 F46において名指しで否定されています。
そのような利用状況を鑑みて、現在のHTML仕様では削除されています。テーブルの説明を提供したい場合は、地の文やcaption要素などで提供します。そのほかにもHTML仕様で複数の実装パターンが説明されています。

<memo>
Failure of Success Criterion 1.3.1 due to using th elements, caption elements, or non-empty summary attributes in layout tables
https://www.w3.org/WAI/WCAG21/Techniques/failures/F46.html

<memo＞
4.9.1.1 Techniques for describing tables
https://html.spec.whatwg.org/multipage/tables.html#table-descriptions-techniques

＜丸見出し＞
見た目を制御する属性
＜本文＞
古いHTML4では、テーブルの枠線の制御するborder属性、frame属性、rules属性、テーブルセルに余白を取るためのcellpadding属性、cellspacing属性が定義されていました。これらはいずれもテーブルの見た目を制御する属性であり、現在のHTML仕様では廃止されています。テーブルの見た目の制御はCSSで行います。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
table要素のデフォルトのARIAロールはtableです。
スクリーンリーダーについては基本的に、テーブルのデータを先頭から順に読み上げていくことになります。しかしこれだけでは、テーブルの利点であるデータの比較が難しくなります。そこで、多くのスクリーンリーダーは、テーブルを読み上げる専用のモードを用意し、データの比較が行いやすいようにしています。
table要素でテーブルをマークアップすることで、スクリーンリーダーはテーブルであることを理解します。次のテーブルに飛ぶ、テーブル内のセルを上下左右に移動しながら読み上げる、テーブルの行や列の見出しを読み上げる、現在のセルが何行目何列目かを読み上げるといった、テーブル読み上げのためのさまざまな機能を提供します。table要素を利用せず、単にコンテンツを表のように配置して並べても、このような機能は利用できません。
なお、CSSでtable要素のdisplayプロパティをdisplay: table以外のものに変更した場合、tableとして認識しなくなるスクリーンリーダーも存在するので注意が必要です。
逆に、テーブルでないものに対してtable要素を使うと、それはテーブルとして伝わってしまうことになります。かつてはスタイルシートが仕様、実装ともに未成熟なこともあって、table要素を駆使したレイアウトが多数見られました。しかし現在では、CSS FlexboxやCSS Gridなどのスタイルシート技術で複雑なレイアウトを実現できるようになっています。レイアウトのためのテーブルは歴史的な誤用であり、レイアウトはスタイルシートで実現すべきです。
何らかの事情によりやむを得ずテーブルでレイアウトを提供せざるを得ない場合は、table要素にrole="presentation"を指定することにより、デフォルトのtableロールを上書きします。こうすることで、そのtable要素が意味のあるテーブルではなく、レイアウトのために利用されているものであることを支援技術に伝えることができます。繰り返しになりますが、原則としてtable要素をレイアウト目的に用いるべきではありません。
table要素にrole="grid"を付与してロールを上書きすると、このtable要素がウィジェット（操作可能なユーザーインターフェイス）であることを伝えます。テーブルの形式で表現され、かつ個々のセルに対して選択などの操作ができるもの、たとえばカレンダー状のデートピッカーや、座席の予約に使用する座席表などに使用します。

＜memo＞
実装パターンはWAI-ARIA Authoring Practicesが参考になります。
3.12 Grids : Interactive Tabular Data and Layout Containers
https://www.w3.org/TR/wai-aria-practices/#grid 

＜中見出し＞
テーブルの行：tr要素
＜本文＞
tr要素はテーブルの行を表します。

＜小見出し＞
内容モデル
＜本文＞
tr要素の内容モデルはtd要素、th要素です。それぞれの役割は後述します。
なお、内容モデルの定義ではth要素もtd要素も0個以上となっており、tr要素の内容を完全に空にできるように見えます。しかし、空の行が存在するとテーブル構造が不正になるため、"table model error"となります。基本的にはth要素かtd要素のいずれかが1つ以上必要だと考えてください。

＜memo＞
マークアップの意味として誤りとなるために、Nu Html Checkerではエラーとして報告されます。

＜本文＞
他の要素を入れることはできず、入れた場合は"foster parenting"と呼ばれる特殊なエラー処理が行われます。詳細はChapter2-8を参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
tr要素のデフォルトのARIAロールはrowです。table要素で説明したように、スクリーンリーダーはテーブルの行と列を認識して特別な読み上げを行うことがあります。現在のセルが何行目かを読み上げる機能を持つものもあります。

＜中見出し＞
テーブルのセル: td要素とth要素
＜本文＞
td要素はテーブルのデータセルを表し、th要素はテーブルの見出しセルを表します。通常のデータセルはtd要素でマークアップしますが、見出しに相当するセルはth要素で表現します。
〓02〓のテーブルのコード例に列見出しを付けると、〓04〓のようになります。表示例は〓05〓です。

〓04〓列見出し
＜コード＞
<table>
  <tr>
    <th>国名</th>
    <th>首都</th>
    <th>五大州</th>
  </tr>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

〓05〓〓04〓の表示例

＜小見出し＞
内容モデル
＜本文＞
td要素、th要素の内容モデルはいずれもFlowです。ただし、th要素の子孫にはheader要素、footer要素、セクショニングコンテンツ、見出し要素を入れることはできません。th要素の内容はそれ自体が見出しとなるため、子孫にさらに見出しを含むことはできないようになっています。td要素にはそのような制限はなく、見出しを入れることも可能です。
段落やリストも入れられるため、1つのセルに複数のデータが含まれるような場合には、セル内を箇条書きにする表現も可能です。
また、table要素を入れることもでき、テーブルの入れ子も可能です。もっとも、入れ子のテーブルは理解が難しくなるため、基本的には避けた方がよいでしょう。

＜小見出し＞
属性
＜本文＞
tr要素の属性を紹介します。

＜丸見出し＞
scope属性
＜本文＞
th要素にscope属性を指定することで、見出しの範囲を指定できます。
scope属性は列挙型属性で、row、col、rowgroup、colgroupのいずれか4つのキーワードを指定します。rowは行（水平方向）の見出しであることを、colは列（垂直方向）の見出しであることを表します。rowgroupやcolgroupは、それぞれ行グループや列グループの見出しであることを表します（行グループと列グループについては後述します）。デフォルトではコンテキストに基づくauto状態で、セルの配置場所などから、4つのうちどのキーワードの状態なのかを推測します。
先に挙げた例ではth要素にscope属性が付けられていませんでしたが、列の先頭にあることから列見出しであると推測されます。明示的にscope属性を付けると〓06〓のようになります。

〓06〓scope属性の記述例
＜コード＞
<table>
  <tr>
    <th scope="col">国名</th>
    <th scope="col">首都</th>
    <th scope="col">五大州</th>
  </tr>
  <tr>
<!-- (以下略) -->

＜本文＞
行と列の両方が見出しを持つような場合、ある見出しセルが行、列どちらの見出しなのか自明でない場合があります。そのような場合はscope属性で明示的に関連付けるとよいでしょう。
なお、td要素にはscope属性を指定できません。

＜丸見出し＞
headers属性
＜本文＞
th要素にid属性を指定し、td要素のheaders属性でそのIDを指定すると、セルに対応する見出しを結びつけることができます。scope属性とは逆に、データセルの側から見出しを参照する形になります。
headers属性で参照する対象となるのはth要素のみで、かつ、同じtable要素に属している必要があります。なお、headers属性はth要素にも指定でき、見出しセルのさらに親となる見出しを参照できます。
scope属性では同じ行か列に属するセルしか結びつけられませんが、headers属性では自由な位置のセルを参照できるため、複雑なテーブルで見出しを結びつけるのに便利なように思えます。
しかし残念ながら、支援技術によるheaders属性のサポート状況は良好ではありません。header属性を使用しなければ見出しセルとデータセルの関連付けが表現できないような複雑なテーブルは、別々のテーブルに分離するなどして、シンプルなテーブルで提供することをお勧めします。

＜丸見出し＞
br属性
＜本文＞
th要素にabbr属性を指定すると、見出しセルに略称を付けることができます。
スクリーンリーダーがテーブルを読む際、データセルを読むたびに対応する見出しセルの内容を読み上げることがあります。これは便利ですが、見出しが長い場合は非常に煩雑になります。このような場合に、abbr属性で見出しの略称を指定できます〓07〓。

〓07〓br属性の記述例
＜コード＞
<tr>
  <th scope="row" abbr="割合">全体に占める割合（小数点以下を切り捨てているため、合計が100%にならない場合があります）</th>
  <td>59%</td>
  <td>15%</td>
  <td>25%</td>
</tr>

＜本文＞
この例では、見出しセルそのものにフォーカスするとセルの内容のすべてが読み上げますが、その列のデータを読んでいく際には「割合59%」のような簡潔な読み上げになることが期待できます。しかし、多くのスクリーンリーダーではabbr属性のサポートはされていないことに注意が必要です。
しかし残念ながら、支援技術によるabbr属性のサポート状況は良好ではありません。

＜丸見出し＞
rowspan属性とcolspan属性
＜本文＞
th要素およびtd要素にrowspan属性を指定すると、1つのセルを複数行にまたがるようにできます。同様に、colspan属性でセルを複数列にまたがるようにできます。たとえば〓08〓のようになります。表示例は〓09〓となります。

＜memo>
〓09〓はわかりやすいようにCSSでボーダーを付けています。


〓08〓rowspan属性とcolspan属性の記述例
＜コード＞
<table>
  <caption>身近な食べ物と珍しい食べ物</caption>
  <tr>
    <th>大分類</th>
    <th>名称</th>
    <th>味の特徴</th>
    <th>色</th>
  </tr>
  <tr>
    <th rowspan="2">果物類</th>
    <td>りんご</td>
    <td>甘酸っぱい</td>
    <td>おおむね赤</td>
  </tr>
  <tr>
    <!-- 上のセルで拡げられるため、ここのthはない -->
    <td>なつみかん</td>
    <td>かなり酸っぱいと思う</td>
    <td>たいてい黄色</td>
  </tr>
  <tr>
    <th>宇宙食</th>
    <td>何でしょう</td>
    <td colspan="2">見たことも食べたこともないので不明</td>
    <!-- 左のセルで拡げられるため、ここのtdはない -->
  </tr>
</table>

〓09〓〓08〓の表示例

＜本文＞
colspan属性の値には1～1000の整数を、rowspan属性の値には0～65534の整数を指定できます。rowspan属性値に0を指定すると、セルが行グループ内の残りの行すべてに拡がります。
rowspan属性やcolspan属性を用いると、視覚的に複雑なテーブルを作成できます。しかし、支援技術は見出しとセルの関係性を上手く解釈できない場合があるため、アクセシビリティの観点からは勧められません。可能であれば、セルを拡げることのないシンプルなテーブルで表現することを勧めます。
また、複数のセルが重なる（オーバーラップする）ような指定はできません。〓10〓は正しくない例です。

<memo>
W3CのWAI Web Accessibility Tutorialsが参考になります。
Web Accessibility Tutorials
https://www.w3.org/WAI/tutorials/tables/tips/

〓10〓複数のセルが重なる不適切な記述
＜コード＞
<table>
  <tr><td></td><td rowspan="2"></td></tr>
  <tr><td colspan="2"></td></tr>
</table>

＜本文＞
先頭の行の2列目のセルが縦に伸び、次の行の最初のセルが横に伸びようとして重なり合ってしまいます。このようなケースは"table model error"となります

＜丸見出し＞
廃止された属性：axis属性、align属性
＜本文＞
古いHTML4では、th要素にaxis属性で見出しを関連付ける機能もありました。今日のHTML仕様ではaxis属性は廃止されています。代わりにscope属性で関連付けします。
また、td要素にalign属性が定義されていました。これは要素の内容の配置を指定するもので、主にテキストの左寄せ、右寄せ、センタリングを指定するために用いられてきました。現在ではCSSのtext-alignプロパティで代用可能です。文字寄せの指定はCSSで行います。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
td要素のデフォルトのARIAロールはcellです。ただし、祖先のtable要素がgridロールを持っている場合はgridcellロールがデフォルトになります。
th要素のデフォルトのARIAロールは、そのth要素が列見出しであればcolumnheaderロール、行見出しであればrowheaderロール、いずれでもなければcellロールとなります。なお、td要素同様、祖先のtable要素がgridロールを持つならばgridcellロールになります。
アクセシビリティの観点から、テーブルの行や列に見出しがあることは重要です。スクリーンリーダーがテーブルを読み上げる際、セルを読むときに対応する見出しを読み上げることができます。たとえば〓04〓の例では、2行目を読む際に「国名：フランス」「首都：パリ」「五大州：ヨーロッパ」のように読み上げ、あるデータがどの列に属するのかわかります。

＜中見出し＞
テーブルのキャプション：caption要素
＜本文＞
caption要素はtable要素のキャプション（タイトル、表題）を表します。前述のテーブルのコード例にキャプションを付けると、〓11〓のようになります。

〓11〓caption要素の記述例
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <tr>
    <th>国名</th>
    <th>首都</th>
    <th>五大州</th>
  </tr>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

＜本文＞
caption要素はtable要素の冒頭、つまりtr要素などが出現する前に記述します。省略は可能ですが、複数置くことはできません。
caption要素は、figcaption要素と同様の役割を果たします。よって、table要素とfigure要素を併用する場合、具体的にはtable要素がfigure要素の子要素であり、兄弟要素がfigcaption要素しかない場合には、caption要素を用いずにfigcaption要素のみを利用するようにします。

<memo＞
WAI-ARIA 1.2仕様のcaptionロールではcaption要素とfigcaption要素が同じ役割を果たすことが示唆されています。

＜小見出し＞
内容モデル
＜本文＞
caption要素の内容モデルはFlowです。ただし、子孫要素としてtable要素を含むことはできません。caption要素の内容にはマークアップを入れることができますし、Flowですからp要素なども入れられます。複数の段落からなる長い文章を入れることも可能です。
多くの場合、単にテーブルのタイトルとなるテキストを入れますが、凡例や説明文などを入れることも可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
caption要素にデフォルトのARIAロールはありません。テーブル読み上げ機能を持つスクリーンリーダーのほとんどはcaption要素を認識し、テーブルに差し掛かるとキャプションとして読み上げます。

<memo＞
WAI-ARIA 1.2仕様ではcaptionロールが存在します。
https://www.w3.org/TR/wai-aria-1.2/#caption


＜中見出し＞
テーブルの行グループ：thead要素、tbody要素、tfoot要素
テーブルの行や列はグループ化できます。行を表すtr要素について、thead要素、tbody要素、tfoot要素を親要素とすることで行のグループ化ができます。thead要素はヘッダー行のグループ、tbody要素はテーブルの本体を構成する行のグループ、tfoot要素はフッター行のグループを表現します。〓11〓のテーブルのコード例に行グループを追加すると、〓12〓のようになります。

〓12〓テーブルのコード例に行グループを追加
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <thead>
    <tr>
      <th>国名</th>
      <th>首都</th>
      <th>五大州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>日本</td>
      <td>東京</td>
      <td>アジア</td>
    </tr>
    <tr>
      <td>フランス</td>
      <td>パリ</td>
      <td>ヨーロッパ</td>
    </tr>
  </tbody>
  <!-- tfoot要素を加えるなら、この位置になる -->
</table>

＜本文＞
古いW3C HTML 5.0以前では、tfoot要素はtbody要素よりも前に記述するものとしており、thead要素、tfoot要素、tbody要素の順で書くことになっていました。現在のHTMLでは、実際に表示される順番の通り、thead要素、tbody要素、tfoot要素の順に記述します。
thead要素とtfoot要素はなくても構いませんが、記述する場合はそれぞれ1つずつしか置くことができません。tbody要素は最低1つ必要で、複数持つこともできます。本体にあたる行を複数のグループに分けることができます。
table要素の内容モデルの項で述べたように、tbody要素は開始タグ、終了タグともに省略可能です。<tbody>タグを書かなくても、自動的に補われてtbody要素が挿入されることになります。
このため、<tbody>タグを持たないコードに対してCSSセレクターを利用する場合は注意が必要です。〓13〓のようなCSSの子セレクターを用いても、tr要素にスタイルが反映されることはありません。

〓13〓CSSの記述例1
＜コード＞
table > tr {color: red;}

＜本文＞
<tbody>タグがない場合でも、tr要素はtable要素の直接の子ではなく、tbody要素の子要素になっています。そのため、〓14〓のようにするとスタイルが反映されます。

〓14〓CSSの記述例2
＜コード＞
table > tbody > tr {color: red;}

＜小見出し＞
内容モデル
＜本文＞
thead要素、tbody要素、tfoot要素の内容モデルは、いずれもtr要素です。tr要素は0個以上とされており、空でも構いません。このほか、JavaScript関連の要素（script要素とtemplate要素）を置くことができます。
これら以外の要素を入れた場合は"foster parenting"と呼ばれる特殊なエラー処理が行われます。詳細はChapter2-8を参照してください。

＜中見出し＞
テーブルの列と列グループ：col要素とcolgroup要素
＜本文＞
テーブルの水平方向の行はtr要素で表現しますが、テーブルの垂直方向の列を表現するための要素も存在します。それがcol要素です。また、colgroup要素は列のグループを表します。
col要素はtr要素に、colgroup要素はtbody要素に対応するものと考えるとわかりやすいかもしれません。ただしtr要素と異なり、col要素はth要素やtd要素を子に持ちません。
col要素やcolgroup要素は、使用しなくても構いません。特定の列や列グループにスタイルを適用したい場合に利用すると便利です。
〓12〓のテーブルのコード例に列グループを追加し、左側2列と右側1列をそれぞれ1つのグループとすると、たとえば〓15〓のようになります。

〓15〓列グループを追加
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <colgroup span="2"></colgroup>
  <colgroup></colgroup>  
  <thead>
    <tr>
      <th>国名</th>
      <th>首都</th>
      <th>五大州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>日本</td>
      <td>東京</td>
      <td>アジア</td>
    </tr>
    <tr>
      <td>フランス</td>
      <td>パリ</td>
      <td>ヨーロッパ</td>
    </tr>
  </tbody>
</table>

＜本文＞
colgroup要素はcaption要素の後ろ、thead要素やtbody要素の前に置きます。
colgroup要素の開始タグは省略可能です。〓16〓は、table要素の直接の子要素であるかのようにcol要素を置いた例です。このようにするとパース時にcolgroup要素が補われて解釈され、〓17〓のようになります。

〓16〓table要素の直接の子要素にcol要素を記述
＜コード＞
<table>
  <col span="2">
  <col>
  <tbody>
<!-- 略 -->


〓17〓〓16〓の解釈
＜コード＞
<table>
  <colgroup>
    <col span="2">
    <col>
  </colgroup>
  <tbody>
<!-- 略 -->

＜小見出し＞
内容モデル
＜本文＞
colgroup要素にspan属性を指定している場合、colgroup要素の内容モデルは空であり、colgroup要素は空要素となります。
colgroup要素にspan属性を指定していない場合は、col要素を任意の数だけ入れることができます。col要素は0個でも構いませんが、その場合は<colgroup span="1">と解釈されます。
col要素の内容モデルはNothingで、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
属性
＜本文＞
colgroup要素、col要素にはspan属性を指定できます。

＜丸見出し＞
span属性
＜本文＞
span属性は、列の数を表します。1～1000の整数を指定でき、初期値は1です。先に挙げた例では、最初のcolgroup要素にspan="2"を指定することで、その列グループに2列が所属することを表していました〓18〓。

〓18〓span属性の記述例
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <colgroup span="2"></colgroup>
  <colgroup></colgroup>
<!-- 略 -->

＜本文＞
後のcolgroup要素にはspan属性がありませんが、span属性の初期値であるspan="1"が指定されているものと同様になります。
colgroup要素にspan属性を指定しない場合、子要素となっているcol要素が列グループを指定できます。〓18〓のcolgroup要素の部分は、〓19〓のように書くこともできます。

〓19〓col要素が列グループを指定
＜コード＞
<colgroup><col><col></colgroup>
<colgroup><col></colgroup>  

＜本文＞
col要素の数がそのグループの列数となります。col要素にもspan属性を指定でき、〓20〓のように書くこともできます。

〓20〓col要素にもspan属性を指定した記述例
＜コード＞
<colgroup><col span="2"></colgroup>
<colgroup><col></colgroup>  

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
col要素、colgroup要素にデフォルトのARIAロールはありません。スクリーンリーダーは実際のテーブル構造に基づいて列を認識し、col要素やcolgroup要素を特別に扱うことはありません。HTMLのテーブルの構造上、行を中心に構造を決められることもあり、アクセシビリティの観点でも重要な意味を持たない要素だといえるでしょう。