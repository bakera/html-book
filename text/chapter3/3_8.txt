＜タイトル＞
テーブル
＜本文＞
HTMLでは、テーブルを扱うことができます。ここでいうテーブルとは、複数のデータを縦横に並べた表の形式のデータで、データ間の関係性を整理でき、比較しやすいという利点があります。ここでは、テーブルを表現するtable要素と、関連する要素について説明します。

＜中見出し＞
テーブルとは
＜本文＞
テーブルは〓01〓のように、複数のデータを縦横に並べたものです。データが入っている1つ1つの項目を「セル（cell）」、テーブルを水平方向に切ったときのまとまりを「行（row）」、垂直方向に切ったときのまとまりを「列（column）」と呼びます。

〓01〓テーブルの構成部品

＜本文＞
テーブル全体に対して、キャプションと呼ばれる見出しや説明文が与えられることもあります。また、それぞれの行や列に見出しを付けることもあり、一般的に、行や列の先頭のセルに見出しとなるテキストを入れて表現します。このようなセルを「見出しセル（header cell）」と呼びます。行や列はグループ化され、グループに対して見出しを与えることもあります。

＜memo＞
キャプションについては、caption要素で説明します。

＜中見出し＞
テーブル全体：table要素
＜本文＞
HTMLでテーブルを表現する際は、table要素でテーブル全体を表現します。その中にテーブル中の行を表すtr要素を入れ、さらにその中にセルを表すtd要素を入れていくのが基本となります。〓02〓は、2行3列のテーブルをマークアップした例で、たとえば〓03〓のように表示されます。

〓02〓2行3列のテーブルをtable要素を用いてマークアップした例
＜コード＞
<table>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

〓03〓ブラウザーによる〓02〓の表示例

＜小見出し＞
内容モデル
＜本文＞
table要素の内容モデルは複雑です。caption要素、colgroup要素、thead要素、tbody要素、tfoot要素を子要素にできます。それぞれの要素については、この後で説明します。要素の省略可否や入れられる個数についても各要素を参照してください。
table要素の内容モデル上、tbody要素を子要素にせず、代わりにtr要素を子要素にできます。たとえば〓02〓のように、tr要素をtable要素の直接の子要素として記述できます。
しかし実際には、tbody要素は開始タグ、終了タグともに省略可能であるため、tbody要素が自動的に補われ、tr要素はtbody要素の子要素になります。tbody要素の説明も参照してください。

＜memo＞
table要素の内容が完全に空であっても構文エラーにはなりません。空のtable要素は意味のないマークアップですが、文法チェッカーでは警告されないことがあるため注意が必要です。

＜本文＞
table要素直下には、これらのテーブルに関連する要素のほかにscript-supporting elements（script要素とtemplate要素）を入れることができますが、他の要素やテキストは入れられません。本来入れられない要素がtable要素の内部に出現した場合、"foster parenting"と呼ばれる特殊なエラー処理が行わます。このエラー処理の詳細は、Chapter2-8を参照してください。

＜小見出し＞
属性
＜本文＞
ここではtable要素の廃止された属性について説明します。

＜丸見出し＞
廃止された属性：summary属性
＜本文＞
古いHTML4では、主にスクリーンリーダーに向けたテーブルの内容の要約・説明を記述するtable要素にsummary属性が定義されていました。現在のHTML仕様ではこの属性は廃止されています。
テーブルの説明を提供したい場合は、地の文やcaption要素などで提供します。そのほかにもHTML仕様で複数の実装パターンが説明されています。

＜memo＞
4.9.1.1 Techniques for describing tables
https://html.spec.whatwg.org/multipage/tables.html#table-descriptions-techniques

＜コラム＞
summary属性の経緯
＜コラム本文＞
summary属性は、ウェブアクセシビリティのために導入された属性で、一見すると有益なものに見えます。しかし実際には、画面に表示されないスクリーンリーダーのためだけの説明を設定・保守するのは困難であり、適切な利用法は普及しませんでした。むしろ、table要素をレイアウト目的で利用してsummary="layout table"を指定するという有害な用法が普及してしまいました。これは、Techniques for WCAG 2.1 の F46 (https://www.w3.org/WAI/WCAG21/Techniques/failures/F46.html)において名指しで否定されています。
そのような利用状況を鑑みて、現在のHTML仕様では削除されています。
＜/コラム＞

＜丸見出し＞
border、frame、rules、cellpadding、cellspacing属性
＜本文＞
古いHTML4では、テーブルの枠線の制御するborder属性、frame属性、rules属性、テーブルセルに余白を取るためのcellpadding属性、cellspacing属性が定義されていました。これらはいずれもテーブルの見た目を制御する属性であり、現在のHTML仕様では廃止されています。テーブルの見た目の制御はCSSで行います。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
table要素のデフォルトのARIAロールはtableです。
多くのスクリーンリーダーは、テーブルを扱う専用のモードを用意しています。たとえば以下のような機能が利用できます。

・次のテーブルに飛ぶ
・テーブル内のセルを上下左右に移動しながら読み上げる
・テーブルの行や列の見出しを読み上げる
・現在のセルが何行目何列目かを読み上げる

これらの機能を利用することで、テーブルの利点であるデータの比較を容易に行うことができます。単にコンテンツをテーブルのような見た目で配置しただけでは、このような機能は利用できません。そのため、テーブルをtable要素で表現することは重要です。

＜memo＞
CSSでtable要素のdisplayプロパティをdisplay: table以外のものに変更した場合、tableとして認識しなくなるスクリーンリーダーも存在するので注意が必要です。

＜本文＞
逆に、テーブルでないものに対してtable要素を使うと、それはテーブルとして伝わってしまうことになります。かつてCSSが仕様、実装ともに未成熟だった頃には、table要素がレイアウト目的に利用されることもありました。現在では、CSSで複雑なレイアウトを実現できるため、table要素をレイアウト目的に用いるべきではありません。

＜memo＞
レイアウトのためのCSS技術には、FlexboxやCSS Gridなどがあります。
CSS Flexible Box Layout Module Level 1
https://www.w3.org/TR/css-flexbox-1/
CSS Grid Layout Module Level 1
https://www.w3.org/TR/css-grid-1/

＜memo＞
原則としてtable要素をレイアウト目的に用いるべきではありませんが、やむを得ずtable要素でレイアウトを行う場合は、WAI-ARIAを利用してrole="presentation"を指定し、デフォルトのtableロールを上書する方法もあります。詳細はChapter4-2を参照してください。

＜本文＞
table要素にrole="grid"を付与してロールを上書きすると、このtable要素がウィジェット（操作可能なユーザーインターフェイス）であることを伝えます。たとえばカレンダーから日付を選択するデートピッカーや、座席の予約に使用する座席表など、テーブルのように行やセルを持ち、かつ個々のセルに対して操作ができるものに使用します。

＜memo＞
gridウィジェットの実装パターンは、WAI-ARIA Authoring Practicesが参考になります。
3.12 Grids : Interactive Tabular Data and Layout Containers
https://www.w3.org/TR/wai-aria-practices/#grid 

＜中見出し＞
テーブルの行：tr要素
＜本文＞
tr要素はテーブルの行を表します。

＜小見出し＞
内容モデル
＜本文＞
tr要素の内容モデルはtd要素、th要素です。それぞれの役割は後述します。
他の要素を入れることはできず、入れた場合はtable要素と同様に、"foster parenting"のエラー処理が行われます。
内容モデルの定義ではth要素もtd要素も0個以上となっており、tr要素の内容を完全に空にできるように見えます。しかし、空の行はテーブルの構造として不正であり、意味論的ルールに反します。基本的にはth要素かtd要素のいずれかが1つ以上必要だと考えてください。

＜memo＞
HTML仕様では、table関連要素からテーブルの構造を構築する処理のルールを定めており、これをtable modelと呼んでいます。空のtr要素はこのルールに抵触し、"table model error"というエラーになります。詳細は仕様を参照してください。Nu Html Checkerも、空のtr要素をエラーとして報告します。

4.9.12 Processing model
https://html.spec.whatwg.org/multipage/tables.html#table-processing-model

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
tr要素のデフォルトのARIAロールはrowです。table要素で説明したように、スクリーンリーダーはテーブルの行と列を認識して特別な読み上げを行うことがあります。現在のセルが何行目なのかを読み上げる機能を持つものもあります。

＜中見出し＞
テーブルのセル: td要素とth要素
＜本文＞
td要素はテーブルのデータセルを表し、th要素はテーブルの見出しセルを表します。〓04〓は、〓02〓のコード例に列見出しを追加したものです。表示例は〓05〓のようになります。

〓04〓〓02〓に列見出しを加えたマークアップ例
＜コード＞
<table>
  <tr>
    <th>国名</th>
    <th>首都</th>
    <th>五大州</th>
  </tr>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

〓05〓ブラウザーによる〓04〓の表示例

＜小見出し＞
内容モデル
＜本文＞
td要素、th要素の内容モデルはいずれもFlowです。ただし、th要素の子孫にはheader要素、footer要素、Sectioning、見出し要素（h1〜h6要素）を入れることはできません。

＜memo＞
th要素の内容はそれ自体が見出しとして扱われるため、その子孫には見出しとして扱われる要素を含められません。td要素にはそのような制限はなく、見出しを入れることも可能です。

＜本文＞
段落やリストも入れられるため、1つのセル内で複数のデータを列挙することも可能です。
また、table要素を入れることもでき、テーブルの入れ子も可能です。もっとも、入れ子のテーブルは理解が難しくなるため、基本的には避けた方がよいでしょう。

＜小見出し＞
属性
＜本文＞
th要素とtd要素の属性にはいくつかの属性があります。scope属性、abbr属性はth要素にのみ指定できます。他の属性は共通です。

＜丸見出し＞
scope属性
＜本文＞
th要素にscope属性を指定することで、見出しの範囲を指定できます。
scope属性は列挙型属性で、row、col、rowgroup、colgroupのいずれか4つのキーワードを指定します。それぞれ以下の意味になります。

・row: 行（水平方向）の見出し
・col: 列（垂直方向）の見出し
・rowgroup: 行グループの見出し
・colgroup: 列グループの見出し

scope属性の指定がない場合は、autoという状態になります。この場合、セルの配置場所などから、上記4つのうちどの状態なのかを自動判別します。たとえば、〓04〓ではth要素にscope属性が付けられていませんでしたが、列の先頭にあることから、列見出しであると推測されます。明示的にscope属性を付けると〓06〓のようになります。

〓06〓scope属性の記述例
＜コード＞
<table>
  <tr>
    <th scope="col">国名</th>
    <th scope="col">首都</th>
    <th scope="col">五大州</th>
  </tr>
  <tr>
<!-- (以下略) -->

＜memo＞
Chaptet2-2でも紹介した通り、scope属性に明示的に"auto"という値を指定することはできず、指定すると構文エラーとなります。この場合、invalid value defaultとなるため、結果としてautoの状態になります。

＜本文＞
行と列の両方が見出しを持つような場合、ある見出しセルが行か列どちらの見出しなのか自明でない場合があります。そのような場合はscope属性で明示的に関連付けるとよいでしょう。
なお、td要素にはscope属性を指定できません。

＜丸見出し＞
headers属性
＜本文＞
th要素にid属性を指定し、td要素のheaders属性でそのIDを指定すると、セルに対応する見出しを結びつけることができます。scope属性とは逆に、データセルの側から見出しを参照する形になります。

＜memo＞
headers属性で参照するIDの対象となるのは見出しとなるth要素のみです。headers属性はth要素にも指定でき、見出しセルのさらに親となる見出しを参照できます。

＜memo＞
headers属性を用いたマークアップ例はWeb Accessibility Tutorialsを参照してください。
Tables with multi-level headers
https://www.w3.org/WAI/tutorials/tables/multi-level/

＜本文＞
scope属性では同じ行か列に属するセルしか結びつけられませんが、headers属性では自由な位置のセルを参照できるため、複雑なテーブルで見出しを結びつけるのに便利なように思えます。
しかし残念ながら、支援技術によるheaders属性のサポート状況は良好ではありません。header属性でなければ見出しとの関係が表現できないような複雑なテーブルは、別々のテーブルに分離するなどして、シンプルなテーブルで提供することをお勧めします。

＜丸見出し＞
abbr属性
＜本文＞
th要素にabbr属性を指定すると、見出しセルに略称を付けられます。この略称は簡潔な説明であっても構いません。
スクリーンリーダーは、テーブルのデータセルを読むたびに対応する見出しセルの内容を読み上げることがあります。これは便利ですが、〓07〓のように見出しセルの内容が長文の場合は煩雑になります。このような場合にabbr属性を利用すると、見出しの略称を指定できます。

〓07〓br属性の記述例
＜コード＞
<tr>
  <th scope="row" abbr="割合">全体に占める割合（小数点以下を切り捨てているため、合計が100%にならない場合があります）</th>
  <td>59%</td>
  <td>15%</td>
  <td>25%</td>
</tr>

＜本文＞
〓07〓の例では、見出しセルそのものにフォーカスするとセルの内容のすべてを読み上げますが、その列のデータを読んでいく際には「割合59%」のような簡潔な読み上げになることが期待できます。
しかし残念ながら、多くのスクリーンリーダーはabbr属性をサポートしていません。見出しセルの内容そのものを短くする方がよいでしょう。

＜丸見出し＞
rowspan属性とcolspan属性
＜本文＞
th要素やtd要素にrowspan属性を指定すると、複数行にまたがるセルを表現できます。同様に、colspan属性で複数列にまたがるセルを表現できます。〓08〓のようにすると、表示例は〓09〓のようになります。

〓08〓rowspan属性とcolspan属性の記述例
＜コード＞
<table>
  <caption>身近な食べ物と珍しい食べ物</caption>
  <tr>
    <th>大分類</th>
    <th>名称</th>
    <th>味の特徴</th>
    <th>色</th>
  </tr>
  <tr>
    <th rowspan="2">果物類</th>
    <td>りんご</td>
    <td>甘酸っぱい</td>
    <td>おおむね赤</td>
  </tr>
  <tr>
    <!-- 上のセルで拡げられるため、ここのthはない -->
    <td>なつみかん</td>
    <td>かなり酸っぱいと思う</td>
    <td>たいてい黄色</td>
  </tr>
  <tr>
    <th>宇宙食</th>
    <td>何でしょう</td>
    <td colspan="2">見たことも食べたこともないので不明</td>
    <!-- 左のセルで拡げられるため、ここのtdはない -->
  </tr>
</table>

〓09〓ブラウザーによる〓08〓の表示例

＜memo＞
〓09〓はわかりやすさのためにCSSでボーダーを付けています。

＜本文＞
colspan属性の値には1～1000の整数を、rowspan属性の値には0～65534の整数を指定できます。rowspan属性値に0を指定すると、セルが行グループ内の残りの行すべてに拡がります。

＜memo＞
rowspan属性やcolspan属性を用いると、視覚的に複雑なテーブルを作成できます。しかし、支援技術は見出しとセルの関係性をうまく解釈できない場合があるため、アクセシビリティの観点からは勧められません。可能であれば、セルを拡げることのないシンプルなテーブルで表現することを勧めます。
W3CのWAI Web Accessibility Tutorialsが参考になります。
Web Accessibility Tutorials
https://www.w3.org/WAI/tutorials/tables/tips/

＜本文＞
複数のセルが重なる（オーバーラップする）ような指定はできません。〓10〓はエラーとなる例です。

〓10〓複数のセルが重なる不適切な記述例
＜コード＞
<table>
  <tr><td></td><td rowspan="2"></td></tr>
  <tr><td colspan="2"></td></tr>
</table>

＜本文＞
〓10〓では、先頭の行の2列目のセルが縦に伸び、次の行の最初のセルが横に伸びようとして重なり合ってしまいます。このようなケースはテーブルの構造として不正であり、意味論的ルールに反します。

＜memo＞
空のtr要素の場合と同様に、"table model error"となります。Nu Html Checkerもエラーとして報告します。

＜丸見出し＞
廃止された属性：axis属性、align属性
＜本文＞
古いHTML4では、th要素にaxis属性を指定して見出しを関連付ける機能がありました。現在のHTML仕様ではaxis属性は廃止されています。代わりにscope属性やheaders属性を利用します。
また、td要素にalign属性が定義されていました。これは要素の内容の配置を指定するもので、現在ではCSSのtext-alignプロパティで代用可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
td要素のデフォルトのARIAロールはcellです。ただし、祖先のtable要素がgridロールを持っている場合はgridcellロールになります。
th要素のデフォルトのARIAロールは、そのth要素が列見出しであればcolumnheaderロール、行見出しであればrowheaderロール、いずれでもなければcellロールとなります。なお、td要素同様、祖先のtable要素がgridロールを持つならばgridcellロールになります。
アクセシビリティの観点から、テーブルの行や列に見出しを提供することは重要です。スクリーンリーダーがテーブルを読み上げる際、セルに対応する見出しを読み上げることができます。たとえば〓04〓の例では、2行目を読む際に「国名：フランス」「首都：パリ」「五大州：ヨーロッパ」のように読み上げ、あるデータセルがどの列に属するのかわかります。

＜中見出し＞
テーブルのキャプション：caption要素
＜本文＞
caption要素はtable要素の「キャプション（caption）」を表します。〓07〓のコード例にキャプションを付けると、〓11〓のようになります。

＜memo＞
キャプションは図版などの説明文、文章の見出しやタイトルという意味の英単語です。また、映像の字幕もキャプションと呼ばれることがあります。

〓11〓〓07〓にcaption要素でテーブルにキャプションを付与した例
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <tr>
    <th>国名</th>
    <th>首都</th>
    <th>五大州</th>
  </tr>
  <tr>
    <td>日本</td>
    <td>東京</td>
    <td>アジア</td>
  </tr>
  <tr>
    <td>フランス</td>
    <td>パリ</td>
    <td>ヨーロッパ</td>
  </tr>
</table>

＜本文＞
caption要素はtable要素の冒頭、つまりtr要素などが出現する前に記述します。省略は可能ですが、複数置くことはできません。
caption要素は、figcaption要素と同様の役割を果たします。よって、table要素とfigure要素を併用する場合は、caption要素を用いずにfigcaption要素のみを利用するようにします。

＜小見出し＞
内容モデル
＜本文＞
caption要素の内容モデルはFlowです。ただし、子孫要素としてtable要素を含むことはできません。caption要素の内容にはマークアップを入れることができますし、Flowですからp要素なども入れられます。複数の段落からなる長い文章を入れることも可能です。
多くの場合、単にテーブルのタイトルとなるテキストを入れますが、凡例や説明文などを入れることも可能です。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
caption要素にデフォルトのARIAロールはありません。しかし、テーブル読み上げ機能を持つスクリーンリーダーのほとんどはcaption要素を認識し、テーブルに差し掛かるとキャプションとして読み上げます。

＜memo＞
WAI-ARIA 1.1ではキャプションに相当するARIAロールが定義されていません。WAI-ARIA 1.2ではcaptionロールが導入される予定です。近い将来、caption要素はデフォルトでcaptionロールを持つことになるでしょう。
https://www.w3.org/TR/wai-aria-1.2/#caption

＜中見出し＞
テーブルの行グループ：thead、tbody、tfoot要素
＜本文＞
tr要素をthead要素、tbody要素、またはtfoot要素の子要素とすることで、行のグループ化ができます。thead要素はヘッダー行のグループ、tbody要素はテーブルの本体を構成する行のグループ、tfoot要素はフッター行のグループを表現します。〓11〓のコードに行グループを追加すると、〓12〓のようになります。

〓12〓〓11〓のコードに行グループを追加したマークアップ
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <thead>
    <tr>
      <th>国名</th>
      <th>首都</th>
      <th>五大州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>日本</td>
      <td>東京</td>
      <td>アジア</td>
    </tr>
    <tr>
      <td>フランス</td>
      <td>パリ</td>
      <td>ヨーロッパ</td>
    </tr>
  </tbody>
  <!-- tfoot要素を加えるなら、この位置になる -->
</table>

＜memo＞
古いW3C HTML 5.0以前の仕様では、tfoot要素はtbody要素よりも前に記述するものとしており、thead要素、tfoot要素、tbody要素の順で書くことになっていました。現在のHTMLでは、実際に表示される順番のとおり、thead要素、tbody要素、tfoot要素の順に記述します。

＜本文＞
thead要素とtfoot要素はなくても構いませんが、記述する場合はそれぞれ1つしか設置できません。tbody要素は複数持つこともでき、本体にあたる行を複数のグループに分けることができます。
table要素の内容モデル（P000）で述べたように、tbody要素は開始タグ、終了タグともに省略可能です。<tbody>タグを書かなくても、自動的に補われてtbody要素が挿入されることになります。
このため、<tbody>タグを持たないコードに対してCSSセレクターを利用する場合は注意が必要です。<tbody>タグがない場合でも、tr要素はtable要素の直接の子ではなく、tbody要素の子要素となります。そのため、〓13〓のようなCSSの子セレクターを用いても、tr要素にスタイルが反映されることはありません。〓14〓のようにするとスタイルが反映されます。

〓13〓table要素とtr要素を子セレクターで結合したCSSの例
＜コード＞
table > tr {color: red;}

〓14〓table、tbody、tr要素を子セレクターで連結したCSSの例
＜コード＞
table > tbody > tr {color: red;}

＜小見出し＞
内容モデル
＜本文＞
thead要素、tbody要素、tfoot要素の内容モデルは、いずれもtr要素です。tr要素は0個以上とされており、空でも構いません。tr要素のほか、script-supporting elementsを置くこともできます。
これら以外の要素を入れた場合は、table要素と同様に"foster parenting"としてエラー処理が行われます。

＜中見出し＞
テーブルの列：col要素とcolgroup要素
＜本文＞
テーブルの水平方向の行はtr要素で表現しますが、テーブルの垂直方向の列を表現する要素も存在します。それがcol要素です。また、colgroup要素は列のグループを表します。
col要素はtr要素に、colgroup要素はtbody要素に対応するものと考えるとわかりやすいでしょう。ただしtr要素と異なり、col要素はth要素やtd要素を子に持ちません。
col要素やcolgroup要素は、必須の要素ではありません。特定の列や列グループにスタイルを適用したい場合に利用すると便利です。
〓12〓のコード例に列グループを追加し、左側2列と右側1列をそれぞれ1つのグループとすると、たとえば〓15〓のようになります。

〓15〓〓12〓に列グループを追加を追加した例
＜コード＞
<table>
  <caption>国の首都と所属する州</caption>
  <colgroup span="2"></colgroup>
  <colgroup></colgroup>  
  <thead>
    <tr>
      <th>国名</th>
      <th>首都</th>
      <th>五大州</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>日本</td>
      <td>東京</td>
      <td>アジア</td>
    </tr>
    <tr>
      <td>フランス</td>
      <td>パリ</td>
      <td>ヨーロッパ</td>
    </tr>
  </tbody>
</table>

＜本文＞
colgroup要素はcaption要素の後ろ、thead要素やtbody要素の前に置きます。
tbody要素と同様、colgroup要素は開始タグ、終了タグが省略可能です。〓16〓は、table要素の直接の子要素であるかのようにcol要素を置いた例です。このようにするとパース時にcolgroup要素が補われ、〓17〓のように解釈されます。

〓16〓table要素の直接の子要素にcol要素を記述
＜コード＞
<table>
  <col span="2">
  <col>
  <tbody>
<!-- 以下略 -->

〓17〓〓16〓の解釈
＜コード＞
<table>
  <colgroup>
    <col span="2">
    <col>
  </colgroup>
  <tbody>
<!-- 以下略 -->

＜小見出し＞
内容モデル
＜本文＞
colgroup要素にspan属性を指定している場合、colgroup要素の内容モデルは空であり、colgroup要素は空要素となります。
colgroup要素にspan属性を指定していない場合は、col要素を任意の数だけ入れることができます。col要素は0個でも構いませんが、その場合は<colgroup span="1">と解釈されます。
col要素の内容モデルはNothingで、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
属性
＜本文＞
colgroup要素、col要素にはspan属性を指定できます。

＜丸見出し＞
span属性
＜本文＞
span属性は、列の数を表します。1～1000の整数を指定でき、初期値は1です。〓18〓は、〓15〓の冒頭からcolgroupの指定を抜粋したものです。最初のcolgroup要素にspan="2"を指定することで、その列グループに2つの列が所属することを表しています。

〓18〓span属性の記述例
＜コード＞
  <colgroup span="2"></colgroup>
  <colgroup></colgroup>

＜本文＞
後のcolgroup要素にはspan属性がありませんが、span属性の初期値であるspan="1"が指定されているものとして扱われます。
colgroup要素にspan属性を指定しない場合、子要素となっているcol要素の数が列の数となります。〓18〓は、〓19〓のように書くこともできます。

〓19〓col要素が列グループを指定
＜コード＞
<colgroup><col><col></colgroup>
<colgroup><col></colgroup>  

＜本文＞
col要素にもspan属性を指定でき、〓20〓のように書くこともできます。

〓20〓col要素にもspan属性を指定した記述例
＜コード＞
<colgroup><col span="2"></colgroup>
<colgroup><col></colgroup>  

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
col要素、colgroup要素にデフォルトのARIAロールはありません。スクリーンリーダーは実際のテーブル構造に基づいて列を認識し、col要素やcolgroup要素を特別に扱うことはありません。

＜memo＞
HTMLのテーブルの構造上、コンテンツはth要素やtd要素に含まれ、col要素やcolgroup要素は読み上げるべきデータを含んでいません。アクセシビリティの観点でも重要な意味を持たない要素だといえるでしょう。