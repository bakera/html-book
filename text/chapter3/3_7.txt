＜タイトル＞
エンベディッドコンテンツ
＜リード＞
ウェブページでは、画像や音声、映像などのメディアを埋め込むことができます。また、あるウェブページに他のウェブページを埋め込むこともできます。ここでは、メディアの埋め込みを行う要素について説明します。

＜中見出し＞
img要素
＜本文＞
img要素は、画像を表す要素です。PNG、GIF（アニメーションGIFを含む）、JPEG、SVGといった画像フォーマットをHTMLに埋め込むことができます。

＜小見出し＞
内容モデル
＜本文＞
img要素の内容モデルはNothingで、内容を持つことはできません。また、終了タグを書くこともできません。

＜小見出し＞
属性
＜本文＞
基本的には、src属性で画像のURLを指定し、alt属性で代替テキストを指定します。また、いくつかの廃止された属性についても取り上げます。

＜丸見出し＞
src属性
＜本文＞
src属性で画像のURLを指定します〓01〓。

〓01〓src属性の記述例
＜コード＞
<img src="cat.png" alt="ねこのかわいい写真">

＜本文＞
データURLを指定することで、画像を直接埋め込むこともできます。データURLについてはChapter2-3を参照してください。〓02〓はデータURLでSVG画像を埋め込んだ例です。

〓02〓データURLの記述例
＜コード＞
<img src="data:image/svg+xml,%3csvg%20xmlns%3d%22http%3a%2f%2fwww.w3.org%2f2000%2fsvg%22%20viewbox%3d%220%200%20100%20100%22%3e%3crect%20fill%3d%22%23ff3300%22%20width%3d%22100%22%20height%3d%22100%22%20rx%3d%2220%22%20ry%3d%2220%22%2f%3e%3c%2fsvg%3e" alt="">

＜memo＞
〓02〓のように、SVGの場合はXMLのテキストをそのままエンコードして記述でき、base64エンコードは必ずしも必要ありません。しかし、テキスト埋め込み形式のデータURLに対応していないレガシーブラウザーの互換性のために、あえてbase64エンコードして埋め込むこともあります。

＜丸見出し＞
srcset属性
＜本文＞
srcset属性を使用すると、複数の画像候補を指定できます。詳細は、後述の「picture要素とレスポンシブ画像」で説明します。

＜丸見出し＞
alt属性
＜本文＞
alt属性は、画像の「代替テキスト（alternative text）」を表します。

＜memo＞
代替テキストは置換テキスト（replacement text）ということもあります。

＜本文＞
何らかの原因で画像が見られない場合、画像の代わりに代替テキストによって内容が伝えられます。スクリーンリーダーのユーザーがアクセスした場合はもちろん、検索エンジンなどの機械がアクセスする場合や、ネットワークの不調により画像が表示できない場合など、さまざまな場合に代替テキストが活用されます〓03〓。

〓03〓代替テキストの記述例
＜コード＞
<!-- 意味のある画像 -->
<img src="picture1.png" alt="何かのテキスト">
<!-- 装飾的な画像 -->
<img src="picture2.png" alt="">
<!-- alt属性のない画像 -->
<img src="picture3.png">

＜本文＞
〓03〓の1つ目は、alt属性が存在し、値にテキストが存在します。この場合、画像が情報や機能を伝える「意味のある画像」という位置付けになります。コンテンツ制作者は、画像の内容と等価な代替テキストを提供しなければなりません。
〓03〓の2つ目は、alt属性が存在しますが、値が空になっています。この場合、見た目だけのもので、情報を提供しない「装飾的な画像」という位置付けになります。代替テキストのない画像であり、画像は意味を伝えません。
〓03〓の3つ目は、alt属性が省略されています。この場合は「意味のある画像」であり、かつ「内容不明の画像（Images whose contents are not known）」とみなされます。
たとえば、第三者が投稿した画像や、ウェブカメラからライブ配信された画像など、意味のある画像でありながら、理由があって代替テキストが提供できない場合が該当します。この場合、alt属性は省略できますが、そのかわりtitle属性かfigcaption要素を用いて画像の説明をしなければなりません。
alt属性は、ウェブアクセシビリティを考える上で、もっとも重要な属性の1つに挙げられます。アクセシビリティ上の注意点も参照してください。

＜memo＞
いわゆるスペーサー画像も「装飾的な画像」に該当します。仕様ではimg要素をレイアウトに用いてはならないとされており、スペーサー画像自体を使うべきではありませんが、やむをえず用いる場合にはalt属性を空にします。

＜memo＞
Images whose contents are not known
https://html.spec.whatwg.org/multipage/images.html#unknown-images

＜丸見出し＞
loading属性
＜本文＞
loading属性は、lazy loadingとして知られる遅延読み込みを制御します。loading属性は列挙型属性で、値は"lazy"と"eager"の2つです。eagerがデフォルト状態で、従来どおり画像を読み込みます。lazyが遅延読み込みを指示します〓04〓。

〓04〓loading属性の記述例
＜コード＞
<!-- ユーザーエージェントに画像の遅延読み込みを指示 -->
<img src="resource" alt="" loading="lazy">

＜本文＞
通常は、img要素が画面外にあってもsrc属性で指定したURLのリソースを読み込み、レンダリングしようとします。しかし、画面外のimg要素の画像は、今すぐには必要ないかもしれません。lazyを指定すると、img要素がビューポートの外にあるときに画像の読み込みを抑制できます。こうすることで、他のサブリソースを優先して読ませることができます。

＜丸見出し＞
廃止された属性：border属性
＜本文＞
かつてのHTML仕様ではimg要素にborder属性が定義されていましたが、現在では廃止されています。
ただし、border属性の値が"0"の場合のみ「旧式だが適合する機能（Obsolete but conforming）」として扱われ、ブラウザーによって解釈されることが期待されます。これは、画像にリンクを付与した場合に、枠線を表示しないようにするテクニックとして使われていたものです。
コンテンツ制作者はimg要素のborder属性を使用するべきではありません。画像の枠線を制御したい場合は、border属性の代わりにCSSで設定します。

＜丸見出し＞
廃止された属性：hspace属性、vspace属性
＜本文＞
古いHTML仕様では、画像の周囲に余白を取るためのhspace属性、vspace属性が定義されていました。CSSで同じ表現ができるため、これらは廃止されています。画像の周囲の余白はCSSで指定します。

＜丸見出し＞
廃止された属性：align属性
＜本文＞
align属性は、画像の配置を指定する属性です。"left"や"right"を指定すると、画像が左右に配置され、続くテキストが画像を回り込むように配置されます。これはCSSのfloatプロパティと同等の機能です。CSSで同じ機能が実現できるため、この属性は廃止されています。画像のフロート配置はCSSで行います。

＜丸見出し＞
廃止された属性：longdesc属性
＜本文＞
HTML4では、img要素にlongdesc属性が定義されていました。
これは画像の説明を参照するための属性で、属性値にはURLを指定します。a要素のように画像をクリックして飛ぶというものではなく、ブラウザーやスクリーンリーダーの機能でリンク先の説明が利用できる想定でした。具体的な用法は、Techniques for WCAG 2のH45を参照してください。

＜memo＞
H45: Using longdesc
https://www.w3.org/WAI/WCAG21/Techniques/html/H45

＜本文＞
ウェブアクセシビリティのために導入された属性ですが、適切に利用されるケースが少なく、対応するブラウザーも少なかったため、現在のHTML仕様では削除されています。
画像の詳細な説明を提供したい場合は、可視のテキストとして説明を配置するか、あるいはa要素で説明にリンクさせるとよいでしょう。具体例については、Techniques for WCAG 2のG73が参考になるでしょう。

＜memo＞
G73: Providing a long description in another location with a link to it that is immediately adjacent to the non-text content
https://www.w3.org/WAI/WCAG21/Techniques/general/G73

＜中見出し＞
アクセシビリティ上の注意点
＜本文＞
img要素のデフォルトARIAロールは、alt属性の値によって変化します。
代替テキストがある「意味のある画像」の場合、imgロールを持ちます。一般にスクリーンリーダーは、代替テキストを読み上げたあとに「イメージ」「画像」などと読み上げ、そこに画像があることを伝えます。
alt属性が空となる「装飾的な画像」の場合、presentationロールを持ちます。スクリーンリーダーは画像を無視し、何も読み上げません。画像の存在自体が伝えらないことに注意してください。
alt属性そのものが省略された「内容不明の画像」の場合、imgロールを持ちます。つまり、意味のある画像があるものの、代替テキストが提供されていないと解釈されます。この場合、スクリーンリーダーは画像の内容を可能な限り伝えようとします。title属性やその他の属性でテキストが指定されていればそのテキストを読み上げますが、そうでない場合の挙動はスクリーンリーダーによって異なります。「ラベルのない画像」と読み上げることもあれば、画像のファイル名を読み上げることもあります。
alt属性が省略され、かつシステムが生成したランダムな英数字の羅列がファイル名に使われている場合、ファイル名が読み上げられると混乱を招くことがあります。
〓05〓では、突如として「きゅうさんシーシー…（略）…エーきゅう、ジェイピージー、イメージ」という意味のない読み上げが行われることになります。

〓05〓ファイル名が英数字の羅列である例
＜コード＞
<img src="/assets/93cc401e5a2939b25985d1db70de2aa9.jpg">

＜丸見出し＞
alt属性の値をどのように書くか
＜本文＞
alt属性を指定するときは、どのような意図で画像を使っているか把握した上で、画像をテキストに置き換えても違和感なく、内容が過不足なく伝わるように代替テキストを記述します。
しかし、実際にどのようなテキストを設定するのかは悩ましいところです。代替テキストもコンテンツであり、その文章の書き方に唯一の正解は存在しません。画像を通して伝えたい内容は、そのページのコンテキストにも依存します。
ここでは、代替テキストを記述する際のヒントとして、2つの原則を紹介します。
なお、代替テキストのパターンについては、HTML仕様のRequirements for providing text to act as an alternative for imagesで詳しく説明されています。また、アクセシビリティの観点からAn alt Decision TreeというW3Cによるリソースも存在します。それぞれ参考にするとよいでしょう。

＜memo＞
4.8.4.4 Requirements for providing text to act as an alternative for images
https://html.spec.whatwg.org/multipage/images.html#alt

An alt Decision Tree
https://www.w3.org/WAI/tutorials/images/decision-tree/

①代替テキストの第1原則：画像と等価なテキストであること
1つ目の原則は、画像と等価なテキストであることです。画像の内容を過不足なく伝えるものである必要があります。画像を代替テキストに置き換えた際に、コンテンツの意味が変わらないようにする必要があります。
代替テキストを考えるにあたっては、電話で誰かに画像を伝えることを想像するという方法があります。電話口でコンテンツを順に読み上げていく際に、画像の部分をどう読み上げるか考え、それを代替テキストにするとよいでしょう。ただし、必要以上に詳しく説明したり、意味を補ったりしないように注意してください。
なお、「画像と等価」とは、画像と代替テキストが1対1で対応するという意味ではありません。代替テキストの内容は、画像そのものだけでなく、前後の文脈にも影響を受けます。ときには、同じ画像にまったく異なる代替テキストを指定することもあります。
たとえば、ある駅とその駅の周辺の地図があり、最寄りの駅、会社のビル、近くのコンビニエンスストアの位置が示されているとします。
会社案内のページにこの画像を掲載する場合、〓06〓のような代替テキストが考えられるでしょう。ここでは会社への経路を伝えることを目的としているため、経路に関係のないコンビニエンスストアについては、代替テキストでは言及しません。
しかし、まったく同じ地図の画像を使って、コンビニエンスストアの場所を伝えたい場合もあるかもしれません。そのような場合は、代替テキストでコンビニエンスストアへの道順を説明する必要があります。このように、まったく同じ画像でも、文脈によって代替テキストが異なる場合があってよいのです。

〓06〓地図の代替テキスト
＜コード＞
<p><img src="rough-map.png" alt="当社入居ビルまでの地図。九段下駅の6番出口から出て、靖国通りを西に進み、九段下の交差点を南に進んだ建物です。"></p>

＜本文＞
②代替テキストの第2原則：繰り返しを避ける
もう1つの原則は、繰り返しを避けることです。画像の前後にキャプションや説明文を提供することがしばしばありますが、その情報を繰り返すべきではありません。〓07〓は、〓06〓と同じ地図を想定していますが、ここでは地図の下に道順の説明文が付いています。
地の文で道順を示しているため、alt属性には道順を記載せず、単にどのような画像かを記しています。冗長な情報を省くことで、スクリーンリーダーが同じ内容を二度読み上げることを防ぎます。
前述したように、alt=""を指定すると画像の存在自体が伝わらないことに注意してください。上記の例では、alt属性の内容と直後の文の冒頭が重複していますが、属性値をすべて省いてalt=""を指定した場合、スクリーンリーダーのユーザーには画像の存在自体が伝わらないことがあります。また、画像を保存するといった操作も難しくなります。「意味のある画像」に対しては、多少重複しても何らかの代替テキストを指定しておくほうがよいでしょう。

〓07〓地の文で道順を解説した場合の代替テキスト
＜コード＞
<p><img src="rough-map.png" alt="当社ビルまでの地図"></p>
<p>当社入居ビルまでの地図。九段下駅の6番出口から出て、靖国通りを西に進み、九段下の交差点を南に進んだ建物です。</p>

＜中見出し＞
picture要素とレスポンシブ画像
＜本文＞
picture要素やsrcset属性、sizes属性を使用すると、状況による画像の出しわけ、いわゆる「レスポンシブ」な画像を実現できます。コンテンツ制作者は複数の画像リソースを提示し、ユーザーエージェントがその中から最適な画像を選択します。選択の基準には以下の4つがあります。

・デバイスピクセル比に基づく選択（Device-pixel-ratio-based selection）
・ビューポートに基づく選択（Viewport-based selection）
・アートディレクションに基づく選択（Art direction-based selection）
・画像フォーマットに基づく選択（Image format-based selection）

最初の2つはimg要素のsrcsetやsizes属性を用いて、後ろの2つはpictureとsource要素を用いて実現します。以下、それぞれの選択基準について簡単に説明します。

＜小見出し＞
デバイスピクセル比に基づく選択
＜本文＞
画像のレンダリングサイズを固定した上で、デバイスピクセルの異なる複数の画像を提示して、そのデバイスに適した解像度の画像を選択します。より高精細な画面で高解像度の画像を表示させたい場合などに利用できます〓08〓。
srcset属性で複数の画像を指定し、それぞれにx記述子でデバイスのピクセル比を記述します。これにより、高いデバイスピクセル比を持つスクリーンで、より高解像度となる画像が選択されます。

〓08〓デバイスピクセル比の指定
＜コード＞
<img src="/uploads/100-marie-lloyd.jpg"
     srcset="/uploads/150-marie-lloyd.jpg 1.5x, /uploads/200-marie-lloyd.jpg 2x"
     alt="" width="100" height="150">
    
＜小見出し＞
ビューポートに基づく選択
＜本文＞
画像のレンダリングサイズを固定せずに、デバイスピクセルの異なる複数の画像を提示して、ビューポートの大きさに適したサイズの画像を選択します。ウィンドウの一定割合を画像で表示させたい場合など利用できます。
srcset属性で複数の画像を指定し、それぞれにw記述子で画像のサイズを記述します。sizes属性で指定されるレンダリングサイズから各画像の効果的なピクセル密度を算出し、画面のピクセル密度、ズームレベル、ネットワークの状態などから、最適な画像をユーザーエージェントが選択します。
〓09〓のコード例では、たとえばビューポートの幅が320 CSSピクセルである場合（100vw=320pxとなる場合）、wolf-400.jpg 1.25x, wolf-800.jpg 2.5x, wolf-1600.jpg 5xという指定と等価になります。
なお、〓09〓の例ではsrc属性とsrcset属性の両方で"wolf-400.jpg"を指定していますが、これは互換性のための指定です。srcset属性のw記述子を理解するユーザーエージェントはsrc属性を無視します。

〓09〓ビューポートに基づく選択の例
＜コード＞
<img sizes="100vw" srcset="wolf-400.jpg 400w, wolf-800.jpg 800w, wolf-1600.jpg 1600w"
     src="wolf-400.jpg" alt="The rad wolf">

＜小見出し＞
アートディレクションに基づく選択
＜本文＞
複数の画像を提示し、それぞれに対してメディアクエリーを指定すると、指定した状況に応じて画像を切り替えることができます。縦長の画面と横長の画面で表示する画像を切り替えたい場合など、コンテンツ制作者側で細かい制御をしたい場合に利用できます〓10〓。
〓10〓では、ブラウザーのウィンドウ幅が1024 CSSピクセル以上の場合、全景の写真（fullshot.jpg）が選択されます。ウィンドウ幅がそれよりも小さい場合は、ズームアップされた写真（closeup.jpg）が選択されます。

〓10〓アートディレクションに基づく選択の例
＜コード＞
<picture>
  <source media="(min-width: 1024px)"
                srcset="fullshot.jpg">
  <img src="closeup.jpg" alt="Opera House">
</picture>

＜小見出し＞
画像フォーマットに基づく選択
＜本文＞
ウェブで使用できる画像のフォーマットにはさまざまなものがありますが、ブラウザーがそのすべてに対応しているとは限りません。モダンなブラウザーには新しいフォーマットの画像を表示させつつ、非対応のブラウザーには広くサポートされている古い画像フォーマットを選択させたい場合に、この機能を利用できます。
〓11〓ではブラウザーがWebPをサポートする場合はWebPを、そうでなければJPEG XR画像を、いずれもサポートしない場合はフォールバックとしてJPEGが選択されます。

〓11〓画像フォーマットに基づく選択の例
＜コード＞
<picture>
  <source srcset="happy.webp" type="image/webp">
  <source srcset="happy.jxr" type="image/vnd.ms-photo">
  <img src="happy.jpg" alt="">
</picture>

＜中見出し＞
iframe要素
＜本文＞
iframe（インラインフレーム）要素は、現在表示しているページに別のウェブコンテンツを埋め込む要素です。他のドメインのコンテンツでも埋め込めるため、サードパーティのドメインから配信される動画やスライド、広告といったものを埋め込む目的でよく利用されています。

＜小見出し＞
内容モデル
＜本文＞
iframe要素の内容モデルはNothingです。つまり、内容に何も入れることができません。にもかかわらず、iframe要素の終了タグは省略できません。
歴史的には、iframe要素を解釈しないブラウザーに対して、iframe要素の内容をフォールバックとして認識させる書き方がありました〓12〓。現在ではこのような書き方は許されておらず、この例は単に構文違反になります。ブラウザーはiframe要素の内容を無視し、表示しません。

〓12〓iframe要素をフォールバックとして認識させる記述例
＜コード＞
<!-- 現在では正しくない書き方 -->
<iframe src="xxx.html">iframeを知らないブラウザーに表示させたい内容</iframe>

＜小見出し＞
属性
＜本文＞
iframe要素の属性について解説します。

＜丸見出し＞
src属性
＜本文＞
src属性はリソースの存在するURLを指定します。〓13〓の例では、YouTubeの埋め込みプレーヤーのURLを指定しています。

〓13〓src属性の記述例
＜コード＞
<iframe width="560" height="315" src="https://www.youtube.com/embed/JDc-xApip7k" title="YouTube video player"></iframe>

＜丸見出し＞
allow属性、allowfullscreen属性
＜本文＞
allow属性はPermissions policy仕様に基づいて、許可する機能やAPIを指定するものです。
allowfullscreen属性もPermissions policy仕様に基づくもので、全画面表示のAPI requestFullscreen()を許可するブール型属性です。

＜memo＞
Permissions Policy 
https://w3c.github.io/webappsec-permissions-policy/ 

＜丸見出し＞
srcdoc属性
＜本文＞
srcdoc属性を使用すると、属性値にHTMLを指定して直接埋め込むことが可能です〓14〓。

〓14〓srcdoc属性の記述例
＜コード＞
<iframe sandbox srcdoc="<p>ごはんを温めますか？"></iframe>

＜丸見出し＞
loading属性
＜本文＞
loading属性を用いると、img要素と同様に遅延読み込みを指定できます。詳細はimg要素のloading属性を参照してください。

＜丸見出し＞
sandbox属性
＜本文＞
iframe要素にsandbox属性を指定すると、iframeに埋め込まれたコンテンツの機能を制限できます。たとえば、JavaScriptの実行やフォームの送信などを禁止できます。属性値が空文字列の場合（sandbox=""もしくは単にsandboxと指定した場合）、すべての機能を制限します〓15〓。

〓15〓sandbox属性の記述例
＜コード＞
<iframe src="https://example.com/" sandbox></iframe>

＜本文＞
特定機能の制限を解除したい場合は、その機能に対応するトークンを属性値に指定します。複数の機能を許可したい場合、スペース区切りで複数のトークンの指定も可能です。たとえば、〓16〓の例ではフォーム送信とダウンロードを許可しています。指定できるトークンの詳細はMDNを参照してください。

〓16〓フォーム送信とダウンロードを許可する記述例
＜コード＞
<iframe src="https://example.com/download-form"
  sandbox="allow-forms allow-downloads">
</iframe>

＜memo＞
https://developer.mozilla.org/ja/docs/Web/HTML/Element/iframe#attr-sandbox

＜丸見出し＞
廃止された属性：frameborder属性
＜本文＞
かつてのHTMLではframeborder属性が定義されており、iframe要素の周囲の枠線の表示を制御できました。コンテンツ制作者はframeborder属性を使用するべきではありません。枠線を制御したい場合は、代わりにCSSで設定します。
iframe要素を使って外部サービスを埋め込むための埋め込みコードには、この属性が利用されていることがあります。たとえば、〓17〓は2021年9月に確認したYouTubeの埋め込みコードです。

〓17〓YouTubeの埋め込みコード
＜コード＞
<iframe width="560" height="315" src="https://www.youtube.com/embed/JDc-xApip7k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

なお、iframe要素にはセキュリティ上の問題も多く知られており、使い方を誤ると攻撃に悪用されることがあります。
iframe要素で読み込んだウェブページと、iframe要素の置かれたウェプページは、postMessageという機能で通信して情報のやり取りができます。本書では詳細を述べませんが、この利用方法を誤ると、情報漏洩などのセキュリティ問題を起こすことがあります。
また、iframe要素を悪用する攻撃手法もあります。その代表例が「クリックジャッキング」で、攻撃側のサイトでiframe要素を利用します。この攻撃への対策として、多くのウェブサイトがiframe要素で読み込まれないように制限をするようになりました。かつては外部サイトであっても自由にiframe要素で埋め込むことができましたが、現在は埋め込みできないサイトが増えています。

＜memo＞
徳丸浩著「体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践」などが参考になります。 

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
iframe要素はアクセシビリティ上の問題を起こしやすい要素です。スクリーンリーダーではiframe要素の内容をそのまま読み上げる場合や、能動的に操作をしないと中身を読み上げない場合など、種類や設定によって扱われ方が異なります。
iframe要素にtitle属性を付けておくと、スクリーンリーダーはそのtitle属性の値を読み上げることがあります。読み上げる必要のないiframe要素を読み飛ばしたいと考えるユーザーもいるため、iframe要素には正確な名前を付けておくとよいでしょう。
外部のウェブサービスのコンテンツを埋め込んで利用する際、サービス側から指定された埋め込みコードにiframe要素が含まれることがあります。この場合、提供されるHTMLコードは、構文上必ずしも正しいとは限りません。アクセシビリティの配慮が不足していることも多く、そのまま利用すると問題を起こす場合があります。外部から提供されたコードについても、アクセシブルであるかどうか確認してから用いると良いでしょう。

＜memo＞
WCAG2 SC 2.4.1を満たすのに十分な方法です。
Techniques for WCAG 2 H64も参照。https://www.w3.org/WAI/WCAG21/Techniques/html/H64

＜中見出し＞
object要素とparam要素
＜本文＞
object要素は、外部リソースを表す汎用的な要素です。主にプラグインで処理されるコンテンツなどを埋め込むことができます。画像や映像、音声、HTML文書の埋め込みにも利用できますが、img、iframe、video、audio要素といった専門の要素で代用可能なことが多いでしょう。
子要素にparam要素を持つことができます。これにより、object要素にパラメーターを与えることができます。
〓18〓のコードはFlashプラグインを用いるFlashの動画を埋め込む古典的な例です。

〓18〓Flash動画を埋め込む記述例
＜コード＞
<!-- object要素のみで指定 -->
<object data="movie.swf"
  type="application/x-shockwave-flash"></object>

<!-- param要素と併用で指定 -->
<object type="application/x-shockwave-flash">
  <param name="movie" value="movie.swf">
</object>

＜memo＞
Flashプラグインのサポートは終了しているため、モダンな環境ではもはやこのコードは動作しません。

＜小見出し＞
内容モデル
＜本文＞
object要素の内容モデルはparam要素と、それに続いてTransparentの内容を書くことができます。Transparentの部分はフォールバックコンテンツとなります。
フォールバックコンテンツは、指定したリソースが埋め込み表示できない場合に使われるもので、画像でいう代替テキストの機能を果たします。img要素のalt属性と異なり、マークアップを含むことができるため、メディアへの直接リンクを提供したり、テキストの一部を強調したりもできます〓19〓。

〓19〓フォールバックコンテンツの記述例
＜コード＞
<object data="rough-map.png">
  <!--画像が埋め込み表示できない場合、画像へのリンクとテキストが表示される-->
  <p><a href="rough-map.png">当社入居ビルまでの地図</a>。
  九段下駅の<em>6番出口</em>から出て、靖国通りを西に進み、九段下の交差点を南に進んだ建物です。</p>
</object>

＜本文＞
object要素の中にobject要素を記述する入れ子にもできます。この場合、親から順に表示を試みて、表示できない場合には子に随時フォールバックしていきます〓20〓。

〓20〓object要素内にobject要素を入れ子にした例
＜コード＞
<!-- できればsvgを表示したい -->
<object data="image.svg">
  <!-- svgがだめならwebpを表示 -->
  <object data="image.webp">
    <!-- webpもだめならpngを表示 -->
    <object data="image.png">
      <!-- 画像が何も表示できないなら代替テキストを使用 -->
      <p>代替テキストです</p>
    </object>
  </object>
</object>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
object要素にデフォルトのロールはありません。object要素はさまざまなリソースを扱えるため、リソースに応じたロールを付けておくとよいでしょう。画像であればrole="img"、HTMLなどの文書であればrole="document"の指定が考えられます。
object要素の内容がアプリケーションのようなものであって、キー操作を必要とする場合、role="application"を指定すると、スクリーンリーダーにキー操作を横取りされず、直接操作できることが期待されます。
role="img"を追加した場合、スクリーンリーダーによっては単に「ラベルのない画像」とだけ読み上げ、フォールバックコンテンツの内容を確認できないことがあります。この場合、aria-labelledby属性でフォールバックコンテンツを参照すれば読まれることもありますが、このように苦労してobject要素を使うより、img要素を利用する方が早いでしょう。

＜memo＞
aria-labelledby属性についてはChapter4-1を参照してください。

＜コラム＞
object要素とembed要素
＜本文＞
object要素の代わりに、あるいはobject要素の子要素としてembed要素が使われているコードを見ることがあるかもしれません。
embed要素は、object要素が登場する前から使われていた要素で、object要素と似た機能を持ちます。object要素の登場後も、互換性のために併用して使われることがありました。
仕様としてはembed要素はW3C HTML 5.0で初めて標準化され、現在のHTML Standardでも定義されています。しかし実務上、この要素がFlashの埋め込み以外の用途に使われるケースは少なく、Flashのサポート終了に伴ってほとんど見かけなくなりました。今後、この要素を利用することはほぼないでしょう。
＜/コラム＞

＜中見出し＞
メディア要素：video要素とaudio要素
＜本文＞
仕様では、video要素とaudio要素をまとめてメディア要素と呼びます。前者は映像を表し、後者は音声を表します。要素の使い方はどちらもほぼ同様で、src属性でリソースを指定するか、あるいはsource要素を用いて複数のリソース候補を指定できます。〓21〓はsrc属性を使用した例です。
なお、source要素を使用する場合は、src属性は使用しません〓22〓。

〓21〓video要要素にsrc属性を使用した記述例
＜コード＞
<video controls src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"
    poster="https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"
    width="620">
  このブラウザーは埋め込み動画に対応していません。
  <a href="https://archive.org/details/BigBuckBunny_124">ダウンロード</a>してお好みの動画プレイヤーでご覧ください。
</video>

〓22〓audio要素にsource要素を使用した記述例
＜コード＞
<audio>
  <!-- できればogg形式の音声を再生してほしい -->
  <source src="foo.ogg" type="audio/ogg; codecs=vorbis">
  <!-- oggに対応していなければmp3を再生させる -->
  <source src="foo.mp3" type="audio/mpeg">
</audio>

＜小見出し＞
内容モデル
＜本文＞
video要素およびaudio要素の内容モデルは、source要素（src属性がない場合に限る）、track要素（後述）、そしてTransparentです。Transparentの部分にはフォールバックコンテンツを入れることができます〓22〓。
ただし、video要素およびaudio要素を子孫要素にできません。複数の映像や音声をフォールバックさせたい場合は、先に紹介したようにsource要素を使用してください。

〓22〓video要素およびaudio要素の内容モデル
＜コード＞
<video controls src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"
    poster="https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"
    width="620">
このブラウザーは埋め込み動画に対応していません。
<a href="https://archive.org/details/BigBuckBunny_124">ダウンロード</a>してお好みの動画プレイヤーでご覧ください。
</video>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
video要素およびaudio要素にデフォルトのARIAロールはありません。
支援技術でもvideo要素およびaudio要素の利用は可能ですが、ユーザーの視覚が利用できない場合、映像が再生されても、その情報を受け取ることはできません。同様に、聴覚に障害がある場合や、音声を再生できない環境では、音声の情報を利用できません。
この問題への対処の1つとして、テキスト情報を提示する方法があります。単にテキストを書き起こす方法もありますが、映像や音声は「時間依存メディア（time-based media）」ですので、場面が再生されるタイミングにあわせて字幕やキャプションなどのテキストトラックを表示することが望ましいでしょう。後述のtrack要素も参照してください。

＜中見出し＞
track要素
＜本文＞
track要素は、時間指定のテキストトラックを指定するものです。テキストトラックのデータ形式にはさまざまなものがありますが、基本的にはテキストデータと、それを表示するタイミング（再生開始からの秒数）を指定します。たとえば、WebVTT (Web Video Text Tracks)では〓23〓のようなフォーマットとなります。

〓23〓WebVTT (Web Video Text Tracks)フォーマット
＜コード＞
WEBVTT

NOTE
これはコメントです。

my-cue-id-1
00:00.000 --> 00:05.000 line:90%
これは<b>WebVTT</b>による字幕です。

＜本文＞
このようなテキストトラックデータを用意し、〓24〓のようにtrack要素のsrc属性で指定します。

〓24〓track要素のsrc属性で指定
＜コード＞
<video>
  <!-- 読み込む動画ファイルの指定 -->
  <source src="movie.mp4" type="video/mp4">
  <!-- 読み込む字幕ファイルの指定（日本語） -->
  <track label="日本語" kind="captions" srclang="ja" src="movie-ja.vtt" type="text/vtt" default>
  <!-- 読み込む字幕ファイルの指定（英語） -->
  <track label="English" kind="captions" srclang="en" src="movie-en.vtt" type="text/vtt">
</video>

＜本文＞
これにより、音声や映像に字幕を付与でき、アクセシビリティを確保できます。
字幕の作成はなかなかに大変な作業ですが、近年では作成を支援するサービスも多数出てきています。たとえば、YouTubeには自動字幕生成の機能がありますし、生成された字幕をテキストトラックファイルに書き出すこともできます。字幕は、画像の代替テキストと同様の重要性を持つものですので、積極的に取り組んでいくとよいでしょう。
動画に関する一般的なアクセシビリティの対処方法については、W3C WAIのリソースMaking Audio and Video Media Accessibleも参考になります。

＜memo＞
Making Audio and Video Media Accessible
https://www.w3.org/WAI/media/av/

＜中見出し＞
map要素とarea要素によるイメージマップ
＜本文＞
イメージマップは、1つの画像上で、クリックする場所によって別々のリンクを割り当てることのできる機能です。img要素、map要素およびarea要素によって実現します。

＜小見出し＞
内容モデル
＜本文＞
map要素の内容モデルはTransparentです。通常はarea要素を入れますが、他の要素を入れることもできます。〓25〓は、area要素と、それに対応するa要素による通常のリンクを入れている例です。

〓25〓map要素とarea要素の記述例
＜コード＞
<map name="nav">
  <p>
    <a href="/clothes/">clothes</a>
    <area alt="clothes" coords="0,0,100,50" href="/clothes/"> |
    <a href="/toys/">toys</a>
    <area alt="toys" coords="100,0,200,50" href="/toys/"> |
    <a href="/food/">food</a>
    <area alt="food" coords="200,0,300,50" href="/food/"> |
    <a href="/books/">books</a>
    <area alt="books" coords="300,0,400,50" href="/books/">
  </p>
</map>

＜本文＞
なお、古いHTML4ではa要素にshape属性やcoords属性を指定でき、上記の例はarea要素なしのa要素のみで実現できることになっていました。しかし、現在のHTMLではa要素のshape属性やcoords属性は廃止されました。面倒でもarea要素を利用してください。

＜小見出し＞
属性
＜本文＞
典型的なimg要素、map要素およびarea要素によって実現するイメージマップのコード例は〓26〓のようになります。

〓26〓イメージマップのコード例
＜コード＞
<p>
  形状を選んでください:
  <img src="shapes.png" usemap="#shapes"
       alt="くり抜かれた赤い正方形、緑の円、青い三角形、十字型の黄色の星の4つの形状があります。">
  <map name="shapes">
    <area shape=rect coords="50,50,100,100"> <!-- 赤い正方形の穴 -->
    <area shape=rect coords="25,25,125,125" href="red.html" alt="赤い正方形">
    <area shape=circle coords="200,75,50" href="green.html" alt="緑の円">
    <area shape=poly coords="325,25,262,125,388,125" href="blue.html" alt="青い三角形">
    <area shape=poly coords="450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60"
          href="yellow.html" alt="黄色の星">
  </map>
</p>

＜本文＞
img要素のusemap属性と、map要素のname属性とでイメージマップを関連付けます。name属性はイメージマップの名前になります。usemap属性値はハッシュ名によるname属性への参照です。
area要素が個々のリンクになります。area要素にはhref属性をはじめ、a要素と共通の属性を指定できます。Chapter3-5も参照してください。
area要素のshape属性は、イメージマップ内に作成する図形の種類を表し、circle、poly、rect、defaultの4つのキーワードから選択する列挙型属性です。
coords属性は、イメージマップ内に作成する図形の座標を表す、CSSピクセルで表されるリストです。指定する座標の数は、shape属性値によって変化します。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
map要素にデフォルトのARIAロールはありません。
視覚が利用できない状況では、多くの場合イメージマップが使いにくいことに注意してください。area要素にはalt属性を指定できるため、適切なリンクテキストを指定しておきましょう。ナビゲーションなどの重要なリンクを提供する場合は、イメージマップだけでなく、通常のa要素によるリンクと併用するとよいでしょう。
