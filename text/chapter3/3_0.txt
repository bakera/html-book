＜タイトル＞
「HTMLの主要な要素」の読み方
＜リード＞
Chapter3では、HTMLのそれぞれの要素について簡単に説明し、その性質や注意点について述べていきます。ここでは、本書の要素解説についての注意点や、必要となる前提知識について説明します。

＜中見出し＞
本書における要素解説の注意
＜本文＞
本書ではHTMLの各要素について説明しています。ただし、すべての要素を網羅しているわけではなく、利用頻度の低い要素は取り上げていないことがあります。正確な要素の一覧は、仕様を参照してください。
HTMLの要素について、本書では以下の順で説明しています。

・全般的な説明
・内容モデル
・属性
・アクセシビリティ上の注意点

＜小見出し＞
全般的な説明
＜本文＞
要素名の見出しのすぐ後には、その要素についての説明があります。要素の意味（セマンティクス）や利用方法、利用時に注意が必要な点などを説明しています。

＜丸見出し＞
構文ルール
＜本文＞
説明の中では、HTMLの構文ルールについて触れていることがあります。本書で触れる字句的ルールは、原則として仕様に沿った解説としています。語彙的ルールや意味論的ルールには解釈の幅があることが多く、筆者の価値観が反映されている場合があります。

＜丸見出し＞
要素の見た目とデフォルトスタイル
＜本文＞
説明の中で、要素の見た目について言及している場合があります。HTMLの要素の見た目は、CSSで提供されます。ブラウザーのデフォルトスタイルは、CSSによりHTML仕様で提案されています。
本書で要素の見た目に言及する際には、一般的なブラウザーで多く採用されているデフォルトスタイルを参考にしています。

＜memo＞
デフォルトスタイルは、コンテンツ制作者やユーザーのCSSの設定で上書きできます。同じCSSの指定であっても、ブラウザーやOS、支援技術といった環境により、要素の見た目は変化することに注意してください。

＜丸見出し＞
アウトライン
＜本文＞
要素の中には、文書のアウトラインに影響するものがあります。
一般に、文書は複数の章や節から構成され、それぞれの冒頭には見出しが置かれます。このような、文書の一部分のまとまりを「セクション（section）」と呼びます。セクションとその見出しには階層構造があり、たとえば〓01〓のように表現できます。

〓01〓アウトラインの例
＜以下を図版化＞
├ 1章見出し
├ 2章見出し
│ ├ 2.1節見出し
│ │ └ 2.1.1項見出し
│ └ 2.2節見出し
└ 3章見出し

＜本文＞
〓01〓のように、セクションの深さと概要を示したものを「アウトライン（outline）」と呼びます。HTML仕様では、見出しやセクションなどのマークアップからアウトラインを決定する方法をルール化しており、「アウトラインアルゴリズム（outline algorithm）」と呼んでいます。アウトラインアルゴリズムの詳細は仕様を参照してください。

＜memo＞
4.3.11.1 Creating an outline
https://html.spec.whatwg.org/multipage/sections.html#outlines

＜本文＞
ただし、ブラウザーや支援技術によるアウトラインアルゴリズムのサポートは良好とはいえません。W3C HTML 5.2仕様の"Creating an outline"のセクションでは、アウトラインアルゴリズムについての適合性チェッカーはあるが、ブラウザーや支援技術の実装は知られていないという旨の記述がされていました。

＜memo＞
W3C HTML 5.2 4.3.9.1. Creating an outline
https://www.w3.org/TR/2021/SPSD-html52-20210128/sections.html#creating-an-outline

＜本文＞
また、アウトラインアルゴリズムに関しては、大幅な仕様変更の提案もあります。本書では2021年現在の仕様に沿って解説しますが、実際にアウトラインアルゴリズムが機能するとは限らないことに注意してください。

＜memo＞
Add heading-focused outlines and :heading
https://github.com/whatwg/html/pull/3499

＜小見出し＞
内容モデル
＜本文＞
内容モデルのセクションでは、要素の内容モデルの定義について説明しています。内容モデルについてはChapter2-4を参照してください。

＜丸見出し＞
script-supporting elements
＜本文＞
多くの要素は、内容にscript-supporting elementsを含めることができます。script-supporting elementsはscript要素とtemplate要素を指すもので、ほぼすべての要素に入れることができます。本書では、内容モデルの説明からscript-supporting elementsを省いています。

＜丸見出し＞
インタラクティブ要素
＜本文＞
一部の要素は、内容モデルに「インタラクティブ要素」を含められないという制約を持ちます。
ウェブページには、ユーザーの操作に動的に反応（インタラクション）する仕組みを設けることができます。このようなユーザーの操作に反応する要素をインタラクティブ要素と呼びます。

＜memo＞
ユーザーの操作には、リンクをクリックする、ボタンを押す、プルダウンメニューをクリックして展開するなどがあります。

＜本文＞
インタラクティブ要素の代表例はリンクを表現するa要素、ボタンのbutton要素です。ただしa要素の場合、href属性がなければインタラクティブにはなりません。このように、インタラクティブかどうかが特定の条件で変化します。
tabindex属性を利用すると、任意の要素をインタラクティブにできます。tabindex属性によってインタラクティブとなった要素も、内容モデルにおいてインタラクティブ要素として扱われることに注意してください。〓02〓は構文エラーとなる例です。
通常はa要素の内容にspan要素を入れられますが、この例ではtabindex属性によってインタラクティブになっているため、構文エラーとなります。

〓02〓構文エラーとなるtabindex属性の記述例
＜コード＞
<a href="/example">
  <span tabindex="0">example</span>
</a>

＜丸見出し＞
終了タグの省略
＜本文＞
Chapter2-1で説明したように、要素の終了タグは省略可能な場合があります。本書では、内容を持つ要素の終了タグは省略しないことを勧めます。そのため、原則として要素の終了タグの省略可否を明言していません。省略の可否を知りたい場合には、仕様を参照してください。
ただし、内容モデルがNothingとされている要素については、終了タグが禁止される場合があります。終了タグを書いてはならない要素については、内容モデルの説明の中でその旨を明記しています。

＜小見出し＞
属性
＜本文＞
属性のセクションでは、その要素に指定できる属性を説明しています。ただし、利用頻度の低いものや、JavaScriptと組み合わせて利用するものなどについては、説明を省いていることがあります。正確な情報は仕様を参照してください。

＜丸見出し＞
グローバル属性
＜本文＞
HTMLでは、すべての要素に指定できるグローバル属性が定義されています。グローバル属性はChapter4-1で説明しています。
グローバル属性以外の固有の属性を持たない要素については、属性の説明そのものを省略しています。また、複数の要素に共通して指定できる属性を持つ場合は、個々の要素ではなく、別のセクションでまとめて説明している場合もあります。

＜丸見出し＞
IDL属性
＜本文＞
ある要素の属性にJavaScriptからアクセスする場合、大きくわけて2種類の方法があります。1つは、DOMインターフェイスのgetAttribute()メソッドやsetAttribute()メソッドを利用する方法です〓02〓。

〓02〓getAttribute()メソッドの利用例
＜コード＞
<label id="label01" for="control01">test label</label>
<script>
const labelElement = document.getElementById('label01');

alert(labelElement.getAttribute("id")); // label01
alert(labelElement.getAttribute("for")); // control01
</script>

＜本文＞
もう1つは、「IDL属性（IDL attribute）」を利用する方法です。取得した要素のオブジェクトのプロパティに直接アクセスする方法で、〓02〓は〓03〓のように書くことができます。

＜word＞
IDL
Interface Description Languageの略で、インターフェイス記述言語と訳されます。人工言語の種類の一種で、プログラムを他のプログラムから利用するためのインターフェイスを記述するためのものです。

〓03〓IDL属性の利用例
＜コード＞
<label id="label01" for="control01">test label</label>
<script>
const labelElement = document.getElementById('label01');

alert(labelElement.id); // label01
alert(labelElement.htmlFor); // control01
</script>

＜本文＞
通常、IDL属性はHTMLの属性名と同じ名前ですが、異なる名前が用いられることもあります。〓03〓では、label要素のfor属性にアクセスするために、forプロパティではなくhtmlForプロパティを参照しています。
IDL属性はHTML仕様で定義されており、Web IDLという言語で記述されています。
本書では、特段の注意点がない場合にはIDL属性について触れていません。IDL属性について知りたい場合は、HTML仕様を参照してください。

＜memo＞
Web IDL
https://webidl.spec.whatwg.org

＜memo＞
実際は逆の関係で、IDLで記述されたインターフェイスであるためにIDL属性と呼びます。

＜丸見出し＞
廃止された属性
＜本文＞
一部の属性は、「廃止された属性」と記載したものがあります。これは、過去のHTML仕様で定義されていたものの、現在のHTMLでは廃止された属性です。コンテンツ制作者は、廃止された属性を利用してはなりません。

＜memo＞
ブラウザーは互換性のために、廃止された属性について特別な処理を行うことがあります。Chapter1-7の「旧式だが適合する機能」も参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
本書では、各要素のアクセシビリティ上の注意点について述べています。

＜丸見出し＞
スクリーンリーダーによる読み上げ
＜本文＞
本書では、スクリーンリーダーによる読み上げ時の挙動について説明していることがあります。後述の「デフォルトのARIAロール」も参照してください。

＜丸見出し＞
デフォルトのARIAロール
＜本文＞
アクセシビリティ上の注意点として、各要素のデフォルトのARIAロールについて説明しています。ARIAロールについてはChapter4-2を参照してください。
Chapter1-2で触れたように、支援技術はアクセシビリティツリーの情報を参照します。アクセシビリティツリーにはARIAロールの情報が反映されるため、要素が持つARIAロールによって支援技術の挙動が変化します。たとえば、ARIAロールlinkを持つ要素があれば、スクリーンリーダーは「リンク」と読み上げます。このように、要素のロールはスクリーンリーダーの読み上げと密接な関係があります。

＜memo＞
本書では、2021年時点のW3C勧告であるARIA in HTMLによる定義を参照しています。これはWAI-ARIA 1.1に基づいた定義です。
WAI-ARIA 1.2の内容について本書で言及していることがありますが、ARIA in HTMLはWAI-ARIA 1.2に基づいたものではなく、筆者による将来的な予測を含んでいることに注意してください。

＜本文＞
多くの要素にはデフォルトのARIAロールがありません（ARIA in HTMLでは"no corresponding role"と定義されています）。この場合、原則として、支援技術はその要素を特別扱いしません。スクリーンリーダーであれば、「リンク」のような特別な通知をせず、単に内容のテキストを読み上げます。
支援技術によっては、ARIAロールがない要素でも独自の挙動をする場合があります。本書では、特別な挙動が確認できている場合に、その挙動を説明していることがあります。

＜memo＞
ブラウザーと同様に、すべての支援技術が同じ動作するわけではないことに注意してください。

要素の中には、条件によってデフォルトのARIAロールが変化するものもあります。たとえば、img要素はalt属性の値によってARIAロールが変化します。また、「アクセシブルな名前（accessible name）」の有無によってロールが変化することもあります。アクセシブルな名前についてはChapter4-2を参照してください。

＜丸見出し＞
ランドマーク
＜本文＞
本書では、「ランドマーク（landmark）」について言及していることがあります。

＜memo＞
ランドマークとは、目印となるような大きな建造物のことです。遠くからでもはっきりと見える目印は、自分がどこにいるのか、どちらへ行けばよいかを知るのに役立ちます。

＜本文＞
ウェブページにおいては、ヘッダーやフッター、サイトナビゲーション、ページの主要部分など、大きな目印となるものをランドマークと呼んでいます。
スクリーンリーダーなどの支援技術は、ランドマークにジャンプしたり、ランドマークをスキップしたりする機能を提供することがあります。これによって、本文をすぐに読み始めたり、利用する必要のない部分を読み飛ばしたりすることが可能になります。
要素がランドマークロールと呼ばれるARIAロールをデフォルトで持つ場合、その要素はランドマークとして扱われます。nav要素、aside要素、header要素、footer要素などが該当します。ランドマークロールの詳細はChapter4-2を参照してください。
