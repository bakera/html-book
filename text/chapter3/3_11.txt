＜タイトル＞
インタラクティブ要素
＜リード＞
ウェブページには、ユーザーの操作に動的に反応するインタラクションの仕組みがあります。現在のHTMLでは、HTMLネイティブで簡単なインタラクションが表現可能です。ここでは、そのような機能を実現する要素について解説します。

＜中見出し＞
details要素
＜本文＞
details要素は、ユーザー操作によって追加の詳細情報を提示できるウィジェットを表します。ユーザーエージェントは、詳細情報の表示・非表示を切り替える機能を提供します。たとえばクリックやタップによる開閉を可能にします。
details要素には子要素として必ずsummary要素を含まなければならず、詳細情報が非表示になった状態、すなわち閉じた状態では、summary要素の内容のみが表示されます。詳細情報が表示された状態、すなわち開いた状態になると、details要素の内容のすべてが表示されます。
〓01〓はdetails要素とsummary要素を使用した例です。表示例は〓02〓となります。

〓01〓details要素とsummary要素を使用した記述例
＜コード＞
<h1>あるパソコンのハードウェア仕様</h1>
<details>
  <summary>CPU: Intel Core i5-8250U</summary>
  <ul>
    <li>発売日: 2017年第3四半期</li>
    <li>ベース動作周波数: 1.60 GHz</li>
  </ul>
</details>

<details open>
  <summary>GPU: Intel UHD Graphics 620</summary>
  <ul>
    <li>ベース動作周波数: 300 MHz</li>
    <li>DirectX対応: 12</li>
  </ul>
</details>

〓02〓ブラウザーによる〓01〓の表示例

＜小見出し＞
内容モデル
＜本文＞
details要素の内容モデルは、summary要素とFlowです。summary要素は必須であり、最初の子要素でなければなりません。summary要素は1つのみで、複数持つことはできません。
summary要素がない場合は構文上のエラーとなりますが、この場合、ユーザーエージェントは要約文を独自に補って表示することがあります。多くの場合、「詳細」や"Details"といった単語が使われます。
summary要素の後ろには任意のFlowの内容を置くことができます。details要素が展開された状態になると、残りの内容が表示されます。

＜小見出し＞
属性
＜本文＞
details要素にはopen属性を指定できます。

＜丸見出し＞
open属性
＜本文＞
open属性は、詳細情報を表示するブール型属性です。この属性が指定されていると、詳細情報が表示される開いた状態になります。そうでなければ詳細情報が表示されない閉じた状態になります。
＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
details要素のデフォルトのARIAロールはgroupです。
仕様上はdetails要素の先頭には必ずsummary要素があり、summary要素はデフォルトでbuttonロールを持つため、多くのスクリーンリーダーは、開閉操作を行うボタンがあることを通知します。「下位項目が非表示になりました、展開ボタン」などと読み上げられることがあります。詳しくはsummary要素を参照してください。

＜中見出し＞
summary要素
＜本文＞
summary要素は、details要素の要約、キャプション、説明文を表します。summary要素は必ずdetails要素とセットで用いられ、details要素の子要素でなければなりません。用法についてはdetails要素を参照してください。

＜小見出し＞
内容モデル
＜本文＞
summary要素の内容モデルはPhrasingですが、h1などの見出し要素も混在させることができます。
summary要素に見出しを入れると、最初は見出しだけが見え、見出しをクリックすると内容が展開される仕組みを実現できます。ただし、スクリーンリーダーによっては、summary要素内の見出しをうまく扱えない場合があるので注意が必要です。
見出し以外のPhrasingの要素を入れることもできます。フォーム内で使用する場合は、label要素を入れるような用法も考えられます。なお、legend要素を入れることはできないので、fieldset要素を開閉させたい場合は別の仕組みを利用する必要があります。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
summary要素のデフォルトのARIAロールはbuttonです。
多くのスクリーンリーダーは、この要素が開閉するボタンであることを伝えると同時に、対応するdetails要素の現在の開閉状態がわかるように通知します。これは、ボタンにaria-expanded属性が指定されている場合と同様の挙動です。
summary要素のデフォルトのロールがbuttonです。一方で、button要素（P000）の内部には見出し要素を置くことはできません。そのため、summary要素内の見出しを見出しとして扱うことができないスクリーンリーダーも存在します。

＜memo＞
スクリーンリーダーは、summary要素の内容を読み上げたあとに、「ボタン、折り畳み」「ボタン、展開」などと読み上げることがあります。

＜中見出し＞
dialog要素
＜本文＞
dialog要素は、ユーザーがタスクを実行するときのインタラクションに用いるアプリケーションの一部分を表現します。簡単に言えば、ダイアログボックスやサブウィンドウなどを表現するのに使用します。
dialog要素はまだ十分にサポートされておらず、ブラウザーによっては動作しないことに注意してください。2021年時点で、FirefoxとSafariはこの要素をサポートしていません。

＜memo＞
Firefoxはabout:configでdom.dialog_element.enabledを有効にすることで動作します。
https://developer.mozilla.org/ja/docs/Web/HTML/Element/dialog

＜memo＞
ブラウザーの種類を限定できる業務アプリケーションでは、問題なくdialog要素を利用できるかもしれませんが、そうでない場合、Safariでサポートされていない機能を採用することは難しいでしょう。

＜小見出し＞
内容モデル
＜本文＞
dialog要素の内容モデルはFlowです。dialog要素の子孫要素にmethod=dialogを指定したform要素がある場合、フォーム送信時にダイアログを閉じ、送信した値をreturnValueプロパティから取得できるようになります。Chapter3-9のform要素も参照してください。
〓03〓は、ボタンを押すとダイアログが表示され、ダイアログ内のボタンを押すとダイアログが閉じる例です。表示例は〓04〓となります。
〓03〓ではshowModal()メソッドでダイアログを表示しているため、このdialog要素はモーダルダイアログとして表示されます。CSSのz-indexプロパティを無視して最前面に表示される、ダイアログの外の要素にフォーカスが移らなくなるといったモーダルダイアログ特有の処理が行われます。詳細な動作は仕様を参照してください。

〓03〓dialog要素を用いたダイアログを開閉するコード例
＜コード＞
<dialog id="confirm_dialog">
  <form method="dialog">
    <p>OKですか?</p>
    <button type="submit" value="OK">OK</button>
    <button type="submit" value="Cancel">Cancel</button>
  </form>
</dialog>
<script>
const dialog = document.getElementById('confirm_dialog');
const dialogOpen = () => {
  dialog.showModal();
};
dialog.onclose = () => {
  alert(dialog.returnValue);
};
</script>
<button type="button" onclick="dialogOpen()">ダイアログを開く</button>

〓04〓ブラウザーによる〓03〓の表示例

＜小見出し＞
属性
dialog要素にはopen属性を指定できます。

＜丸見出し＞
open属性
＜本文＞
open属性を指定すると、dialog要素は表示された状態になります。open属性はブール型属性です。この属性がない場合、dialog要素は非表示になります。open属性のないdialog要素をHTMLに単に書いても表示されませんので注意してください。
なお、JavaScriptからDOM操作でopen属性を追加した場合、ダイアログは表示されますが、フォーカス制御が行われない、closeイベントが発生しないといった不都合があります。JavaScriptで操作する場合はshow()、showModal()、close()メソッドを呼ぶとよいでしょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
dialog要素のデフォルトのARIAロールはdialogです。スクリーンリーダーは「ダイアログ」と読み上げることがあります。
警告メッセージを表示する場合には、role=alertdialogを明示的に指定してロールを上書きしてもよいでしょう。
仕様に明記されているように、dialog要素にtabindex属性を指定できないことに注意してください。
