＜タイトル＞
属性
＜リード＞
Chapter2-1では、タグを使って要素をマークアップする方法を紹介しました。ここでは一歩進んで、要素に属性を付ける方法について紹介します。

＜中見出し＞
属性の基本
＜本文＞
HTMLを特徴付けるのはハイパーリンク、あるいは単にリンクとも呼ばれる仕組みです。リンクはa要素で表現します。文中のテキストの一部を単純にa要素としてマークアップすると、〓01〓のようになります。

〓01〓要素の記述例
＜コード＞
<p>詳しくは<a>HTML Living Standard</a>をご覧ください。</p>

a要素の範囲がわかるようになりましたが、肝心のリンク先の情報がありません。〓01〓にリンク先の情報を追加すると、〓02〓のようになります。

〓02〓〓01〓にリンク先を追加した例
＜コード＞
<p>詳しくは<a href="https://html.spec.whatwg.org/">HTML Living Standard</a>をご覧ください。</p>

＜本文＞
開始タグの中にhrefで始まる文字列が含まれています。これによって、リンク先のURLの情報を表現しています。このように要素に情報を付け加える表現を「属性（attribute）」といいます。
属性には名前と値があり、それぞれ「属性名（attribute name）」、「属性値（attribute value）」といいます。上記の例では、属性名がhref、属性値がhttps://html.spec.whatwg.org/となります。

＜中見出し＞
属性の書き方
＜本文＞
属性を書くときは、属性名の後ろに=（U+003D、等号）を記述し、続けて属性値を書きます。属性値は、原則として"（U+0022、二重引用符）または'（U+0027、単一引用符）で括ります。引用符はどちらを使っても構いませんが、同じ引用符を用いてペアにしなければなりません。引用符を省略できる場合もありますが、常に引用符で括るのがよいでしょう。
〓03〓は、abbr要素にtitleという属性名の属性を指定し、属性値をaccessibilityとした例です。

〓03〓属性の記述例
＜コード＞
<abbr title="accessibility">a11y</abbr>

〓04〓属性値に引用符を含める記述例
＜コード＞
<span title="Murphy's law">Anything that can possibly go wrong, does.</span>

＜小見出し＞
複数の属性
＜本文＞
1つの要素に複数の属性を同時に指定できます〓05〓。

〓05〓複数の属性の記述例
＜コード＞
<a rel="external" href="https://html.spec.whatwg.org/">HTML Living Standard</a>

＜memo＞
同名の属性は複数指定できません。詳細についてはChapter2-8を参照してください。

＜本文＞
属性の前後は、1つ以上の「ASCII空白文字（ASCII whitespace）」で区切ります。ASCII空白文字には改行も含まれるので、改行を入れることもできます。多数の属性があって読みにくい時などに便利です〓06〓。

〓06〓複数の属性を記述した例
＜コード＞
<a
  rel="external"
  href="https://html.spec.whatwg.org/"
>HTML Living Standard</a>

＜中見出し＞
属性値
＜本文＞
属性がどのような値を取れるかは、属性ごとに異なります。多くの属性は任意のテキスト値ですが、特定のパターンの値を取る属性もあります。

＜小見出し＞
ブール型属性
＜本文＞
属性の中には、真偽、on/offだけを表すものがあります。そのような属性を「ブール型属性（(boolean attribute）」と呼びます。たとえば、要素を非表示にするhidden属性はブール型属性で、〓07〓のように指定します。

〓07〓ブール型属性の記述例
＜コード＞
<p hidden="hidden">この内容は表示されません</p>

＜memo＞
ブール型属性は真偽属性や論理属性などと呼ばれることもあります。

＜本文＞
この例では、属性名と同じ属性値を指定しています。ブール型属性では、属性名と同じ属性値を書くことで、その属性が有効であることを表します。この例ではhidden属性が有効になり、この要素が非表示になります。
しかし、属性名とまったく同一の値を再度書くのは冗長であり、面倒でもあります。そこで、〓08〓のように省略する書き方も許可されています。

〓08〓ブール型属性の省略形の例
＜コード＞
<p hidden="">この内容は表示されません</p>
<p hidden>この内容は表示されません</p>

＜本文＞
いずれも、hidden="hidden"と書いた場合と同じ効果になります。hidden=""は属性値が空ですが、同様に真、onを意味することに注意してください。hiddenを無効にする場合は、属性自体を省略します〓09〓。

〓09〓属性自体を省略した、hiddenの無効な例
＜コード＞
<p>この内容は表示されます</p>

＜小見出し＞
列挙型属性とキーワード
＜本文＞
属性の中には、決められた属性値しか取れないものがあります。たとえば、dir属性は書字方向を指定する属性ですが、属性値として"ltr"、"rtl"、"auto"のいずれかを指定します。これ以外の値を指定できません。
このように、あらかじめ列挙された候補の中から1つを選ぶ形の属性を、「列挙型属性（enumerated attributes）」と呼びます。また、列挙されている属性値の候補それぞれを「キーワード（keywords）」といいます。
列挙型属性のキーワードは、大文字小文字を区別しません。dir="rtl"とdir="RTL"とdir="RtL"はすべて同じ意味になります。

＜memo＞
列挙型属性は列挙属性と呼ばれることもあります。

＜丸見出し＞
デフォルト時の挙動
＜本文＞
キーワード以外を指定した場合はエラーとなりますが、この場合の挙動は属性ごとに異なります。属性によっては、エラーになった場合に「invalid value default」とされるフォールバックの値が決められていれば、そのフォールバックの値を指定した時と同じ挙動になります。
また、属性によっては、この属性自体を指定しなかった場合の挙動が定められている場合もあります。その場合には、「missing value default」として決められた値が使われます。
dir属性の場合、invalid value defaultもmissing value defaultも定義されていません。不正な値を指定した場合は、dir属性を指定していない場合と同様に、書字方向に何も影響を与えません。
デフォルト時の挙動が明示的に指定されている例としては、input要素のautocomplete属性があります。"on"か"off"のいずれかのキーワードを指定する必要がありますが、他の値が指定されたり、この属性自体がない時には"on"を指定した場合と同様の挙動になります。
デフォルト時の挙動がキーワードのどれとも一致しない場合もあります。th要素のscope属性は、"col"、"colgroup"、"row"、"rowgroup"のキーワードのいずれかを指定します。属性が指定されていない場合、これらキーワードのいずれとも異なる"auto"という状態になりますが、"auto"というキーワードは存在しないため、明示的に指定できません。

＜小見出し＞
数字
＜本文＞
属性の中には数字で指定するものもあります。数字には、「符号付き整数（signed integers）」、「非負整数（non-negative integers）」、「浮動小数点数（floating-point numbers）」などの種類があり、属性によって取りうる数字は異なります。
いずれの数字であっても、基本的に「ASCII数字（ASCII digit）」の0〜9で指定します。+や-の符号が付けられるパターンもありますが、いずれもASCII数字を使用します。

＜memo＞
全角数字はASCII数字ではないため、全角数字で指定しても数字を指定したことにはなりません。

＜丸見出し＞
長さの指定
＜本文＞
属性値で、要素の幅や高さを指定するケースがあります。典型的な例は、画像データ自体のサイズのヒントをブラウザーに伝えるimg要素のheight属性やwidth属性です。長さの単位はCSSピクセルです。
以前のHTMLでは、長さとして"50%"のようにパーセンテージ値を指定できましたが、現在のHTMLでは、パーセンテージ値を指定きません。パーセンテージ値は画像サイズのヒントとしては利用できないためです。

＜memo＞
CSSが普及する前のHTMLでは、個々の要素にheight属性やwidth属性を指定して、要素が表示される大きさを指定していました。これは見た目を制御するものです。そのため、現在のHTML仕様では、大半の要素においてheight属性とwidth属性が廃止されています。表示上のサイズ指定はHTMLの属性ではなく、CSSで行います。

＜小見出し＞
日付と時刻
＜本文＞
日付や時刻を指定するタイプの属性もあります。たとえばins要素やdel要素のdatetime属性には、日付や時刻を指定できます。
日付と時刻の形式は、HTML仕様に定められた、ISO 8601とよく似た形式を用います。日付を指定する際には、4桁の年、2桁の月、2桁の日をハイフンで繋いだYYYY-MM-DDの形式を使います。区切り文字はハイフンでなければなりません。スラッシュやスペースで区切ることはできません〓10〓。

＜memo＞
ここでは、datetime属性に記述できる日付や時刻の概説に留めます。日付と時刻の正確な規定は仕様を参照してください。
2.3.5 Dates and times
https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#dates-and-times

〓10〓日付の指定例
＜コード＞
<ins datetime="2020-04-01">

＜本文＞
datetime属性の時刻は、タイムゾーンが必須となり、省略できません。時刻を指定する場合は、日付の直後に、大文字のTもしくはスペースを1つのみ入れます。その後に2桁の時、コロン、分を繋いで00:00のように書き、さらにタイムゾーンの情報を入れます。タイムゾーンは+に続けて2桁の時間、2桁の分を連続して表記します。日本のローカルタイムを使用する場合、UTC（協定世界時）との時差が+9時間ですから、+0900となります〓11〓。

＜memo＞
時刻には秒やミリ秒も指定できますが、本書では割愛します。

＜memo＞
日付と時刻の区切り文字は、スペースで区切る場合、スペースは1つだけです。複数のスペースを入れることはできません。また、Tで区切る場合も前後にスペースを入れることはできません。

〓11〓日本のローカルタイムによる時刻の指定例
＜コード＞
<del datetime="2020-04-01T00:00+0900">
<del datetime="2020-04-01 00:00+0900">

＜本文＞
UTCの場合は+0000となりますが、同じ意味を表すZの1文字でも指定できます〓12〓。

〓12〓UTCによる時刻の指定例
＜コード＞
<del datetime="2020-04-01T09:00+0000">
<del datetime="2020-04-01T09:00Z">

＜memo＞
アルファベット1文字での記述は、タイムゾーンを表すMilitary time zonesと呼ばれるものです。タイムゾーンについては、タイムゾーン呪いの書（知識編）が非常に詳しいです。 
https://zenn.dev/dmikurube/articles/curse-of-timezones-common-ja ↩

＜小見出し＞
URL
＜本文＞
属性値としてURLを指定する属性も多数あります。代表例は、最初に示したような、a要素のhref属性でリンク先を指定するものです。img要素やscript要素のsrc属性など、読み込み先のリソースを指定する際にもURLを使用します。
属性値としてURLを指定する場合、基本的には絶対URLと相対URLのどちらも利用できます〓13〓。
URLの詳細な書式はChapter2-3で説明します。

〓13〓URLの指定例
＜コード＞
<!-- 絶対URL -->
<a href="https://example.com/corporate/about">example社の会社概要</a>
<!-- 相対URL -->
<a href="../about">会社概要</a>
