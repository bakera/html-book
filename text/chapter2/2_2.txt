＜タイトル＞
属性
＜リード＞
Chapter2-1では、タグを使って要素をマークアップする方法を紹介しました。ここでは一歩進んで、要素に属性を付ける方法について紹介します。

＜中見出し＞
属性の基本
＜本文＞
Chapter2-1で説明したように、HTMLではタグを使って要素の種類と範囲を明示します。HTMLを特徴付けるハイパーリンクはa要素で表現しますが、文中のテキストを単純にa要素としてマークアップすると、〓01〓のようになります。

〓01〓要素の記述例
＜コード＞
<p>詳しくは<a>HTML Living Standard</a>をご覧ください。</p>

リンクとなるテキストの範囲は明示できましたが、肝心のリンク先の情報がありません。そこで、リンク先の情報を〓01〓に追加してみると、結果は〓02〓のようになります。

〓02〓〓01〓にリンク先を追加した例
＜コード＞
<p>詳しくは<a href="https://html.spec.whatwg.org/">HTML Living Standard</a>をご覧ください。</p>

＜本文＞
開始タグの中にhrefで始まる文字列を入れて、リンク先のURLの情報を表現しています。このように、要素に情報を付け加える表現を「属性（attribute）」といいます。
属性には名前と値があり、それぞれ「属性名（attribute name）」、「属性値（attribute value）」といいます。上記の例では、属性名がhref、属性値がhttps://html.spec.whatwg.org/となります。

＜中見出し＞
属性の書き方
＜本文＞
属性を書くときは、属性名の後ろに=（U+003D、等号）を記述し、続けて属性値を書きます。属性値は、原則として"（U+0022、二重引用符）または'（U+0027、単一引用符）で括ります。引用符はどちらを使っても構いませんが、同じ引用符を用いてペアにしなければなりません。

＜memo＞
属性値の引用符は省略できる場合もありますが、省略のルールはやや複雑であり、セキュリティ問題にもつながりやすいため、常に引用符で括るようにすべきです。Chapter2-8の「引用符のない属性」も参照してください。

＜本文＞
〓03〓は、abbr要素にtitleという属性名の属性を指定し、属性値をaccessibilityとした例です。

〓03〓属性の記述例
＜コード＞
<abbr title="accessibility">a11y</abbr>

＜本文＞
属性値に引用符を含めたい場合、属性名を括る引用符のペアと異なる引用符であれば、〓04〓のようにそのまま書くことができます。

〓04〓属性値に引用符を含んだ記述例
＜コード＞
<span title="Murphy's law">Anything that can possibly go wrong, does.</span>

＜小見出し＞
複数の属性
＜本文＞
〓05〓のように、複数の属性の指定も可能です。

〓05〓複数の属性の記述例
＜コード＞
<a rel="external" href="https://html.spec.whatwg.org/">HTML Living Standard</a>

＜memo＞
同じ属性名を持つ属性は、1つの要素に1つしか指定できません。詳細はChapter2-8を参照してください。

＜本文＞
属性の前後は、1つ以上の「ASCII空白文字（ASCII whitespace）」で区切ります。改行もASCII空白文字に含まれますので、〓06〓のように改行を入れることもできます。

＜memo＞
ASCII空白文字はInfra Standardで定義されており、U+0009（タブ）、U+000A（LF）、U+000C（FF）、U+000D（CR）、U+0020（ASCIIスペース）が含まれます。
https://infra.spec.whatwg.org/#ascii-whitespace

〓06〓複数の属性を改行で区切った例
＜コード＞
<a
  rel="external"
  href="https://html.spec.whatwg.org/"
>HTML Living Standard</a>

＜中見出し＞
属性値
＜本文＞
属性値の形式は、属性ごとに決められています。多くの属性は任意のテキストを値に指定できますが、特定の値しか取れない属性もあります。

＜小見出し＞
ブール型属性
＜本文＞
属性の中には、真偽、on/offだけを表すものがあります。そのような属性を「ブール型属性（boolean attribute）」と呼びます。たとえば、要素を非表示にするhidden属性はブール型属性で、〓07〓のように指定します。

〓07〓ブール型属性の記述例
＜コード＞
<p hidden="hidden">この内容は表示されません</p>

＜memo＞
ブール型属性は真偽属性や論理属性などと呼ばれることもあります。

＜本文＞
〓07〓のように、ブール型属性では、属性名と同じ属性値を書くことで、その属性が有効であることを表します。しかし、属性名と同一の値を再度書くのは冗長かつ面倒です。そこで、〓08〓のように省略する書き方も許可されています。

〓08〓ブール型属性の省略形の例
＜コード＞
<p hidden="">この内容は表示されません</p>
<p hidden>この内容は表示されません</p>

＜本文＞
いずれも、hidden="hidden"と書いた場合と同じ効果を持ちます。hidden=""は属性値が空ですが、属性は有効で、真、onを意味することに注意してください。ブール型属性を無効にする場合は、〓09〓のように属性自体を省略します。

〓09〓属性自体を省略した、hiddenの無効な例
＜コード＞
<p>この内容は表示されます</p>

＜小見出し＞
列挙型属性とキーワード
＜本文＞
属性の中には、決められた値しか取れないものがあります。たとえば、dir属性には属性値として"ltr"、"rtl"、"auto"のいずれかを指定する必要があり、これ以外の値は指定できません。

＜memo＞
dir属性の詳細はChapter3-4で説明しています。

＜本文＞
このように、あらかじめ列挙された候補の中から1つを選ぶ形の属性を、「列挙型属性（enumerated attributes）」といいます。また、列挙されている属性値の候補それぞれを「キーワード（keywords）」といいます。

＜memo＞
列挙型属性は列挙属性と呼ばれることもあります。

＜本文＞
列挙型属性のキーワードは、大文字小文字を区別しません。dir="rtl"とdir="RTL"とdir="RtL"はすべて同じ意味になります。

＜丸見出し＞
デフォルト時の挙動
＜本文＞
列挙型属性にキーワード以外の値を指定すると、構文エラーとなります。この場合の挙動は属性ごとに異なります。属性によっては、エラー時に採用されるフォールバックの値が決められている場合があります。
また、属性によっては、この属性自体を省略した場合のデフォルトの値が定められている場合があります。

＜memo＞
不正な値が指定されたエラー時の値を「invalid value default」、属性省略時のデフォルトの値を「missing value default」と呼びます。

＜本文＞
dir属性の場合、エラー時の値もデフォルトの値も定義されていません。不正な値を指定した場合は、dir属性を指定していない場合と同様、書字方向に何も影響を与えません。
エラー時の値とデフォルトの値が定義されている例には、input要素のautocomplete属性があります。"on"か"off"のいずれかのキーワードを指定する必要がありますが、他の値が指定されたり、この属性自体がない時には"on"を指定した場合と同様の挙動になります。
エラー時の値やデフォルトの値がキーワードのどれとも一致しない場合もあります。th要素のscope属性に指定できるキーワードは、"col"、"colgroup"、"row"、"rowgroup"のいずれかですが、scope属性が指定ない場合、いずれとも異なる"auto"という状態になります。

＜memo＞
scope属性に"auto"という値は指定できません。値"auto"を指定した場合は構文エラーとなりますが、エラー時の値が採用され、結果としてautoの状態になります。

＜小見出し＞
数字
＜本文＞
属性値を数字で指定するものもあります。数字には、「符号付き整数（signed integers）」、「非負整数（non-negative integers）」、「浮動小数点数（floating-point numbers）」などの種類があり、属性によって取りうる数字は異なります。
いずれの数字であっても、基本的に「ASCII数字（ASCII digit）」の0〜9で指定します。+や-の符号が付けられるパターンもありますが、いずれもASCII数字を使用します。

＜memo＞
全角数字はASCII数字ではないため、全角数字で指定しても数字を指定したことにはなりません。

＜丸見出し＞
長さの指定
＜本文＞
属性値で、要素の幅や高さを指定するケースがあります。典型例は、画像データ自体のサイズのヒントをブラウザーに伝えるimg要素のheight属性やwidth属性です。属性値には数値をASCII数字で指定し、単位は含めません。長さの単位はCSSピクセルとなります。
以前のHTMLでは"50%"のようなパーセンテージ値も指定できましたが、これは画像サイズのヒントとしては利用できないため、現在のHTMLではパーセンテージ値を指定できません。

＜memo＞
現在では、表示サイズをCSSで制御するため、表示サイズに関する属性はほとんど廃止されています。img要素のheight属性やwidth属性は、画像の表示サイズの指定ではなく、画像自体のサイズのヒントを与えるものとして残されています。

＜小見出し＞
日付と時刻
＜本文＞
日付や時刻を指定するタイプの属性もあります。たとえばins要素やdel要素のdatetime属性には、日付や時刻を指定できます。日付と時刻の形式は、HTML仕様に定められた、ISO 8601とよく似た形式を用います。

＜memo＞
本書での日付と時刻の説明は概要です。正確な規定は仕様を参照してください。
2.3.5 Dates and times
https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#dates-and-times

＜丸見出し＞
日付のみの指定
＜本文＞
日付のみを指定する場合は、4桁の年、2桁の月、2桁の日をハイフンでつないだYYYY-MM-DDの形式を使います。区切り文字はハイフンでなければなりません。スラッシュやスペースで区切ることはできません〓10〓。

〓10〓日付の指定例
＜コード＞
<ins datetime="2020-04-01">

＜丸見出し＞
日付に時刻を追加した指定
＜本文＞
日付に加えて時刻を指定する場合は、日付の後に大文字のTもしくはASCIIスペースを1つ入れ、日付と時刻を区切ります。

＜memo＞
日付と時刻の区切り文字は、スペースで区切る場合、スペースは1つだけです。複数のスペースを入れることはできません。また、Tで区切る場合も前後にスペースを入れることはできません。

＜本文＞
時刻は時、分を2桁のASCII数字で記述し、コロンでつないで00:00のように書きます。

＜memo＞
時刻には秒やミリ秒も指定できますが、本書では割愛します。

＜本文＞
さらにタイムゾーンの情報を入れます。ins要素やdel要素で時刻を指定する場合、タイムゾーンの情報は必須で、省略できません。+に続けて2桁の時、2桁の分を連続して表記します。日本のローカルタイムを使用する場合、UTC（協定世界時）との時差が+9時間ですから、+0900となります〓11〓。

〓11〓日本のローカルタイムによる時刻の指定例
＜コード＞
<del datetime="2020-04-01T00:00+0900">
<del datetime="2020-04-01 00:00+0900">

＜本文＞
UTCの場合は+0000となりますが、同じ意味を表すZの1文字でも指定できます〓12〓。

〓12〓UTCによる時刻の指定例
＜コード＞
<del datetime="2020-04-01T09:00+0000">
<del datetime="2020-04-01T09:00Z">

＜memo＞
アルファベット1文字での記述は、タイムゾーンを表すMilitary time zonesと呼ばれるものです。タイムゾーンについては、タイムゾーン呪いの書（知識編）が非常に詳しいです。
https://zenn.dev/dmikurube/articles/curse-of-timezones-common-ja

＜小見出し＞
URL
＜本文＞
属性値としてURLを指定する属性も多数あります。代表例は、最初に示したような、a要素のhref属性でリンク先を指定するものです。img要素やscript要素のsrc属性など、読み込み先のリソースを指定する際にもURLを使用します。
属性値としてURLを指定する場合、基本的には絶対URLと相対URLのどちらも利用できます〓13〓。
URLの詳細な書式はChapter2-3で説明します。

〓13〓URLの指定例
＜コード＞
<!-- 絶対URL -->
<a href="https://example.com/corporate/about">example社の会社概要</a>
<!-- 相対URL -->
<a href="../about">会社概要</a>
