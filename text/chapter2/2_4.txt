＜タイトル＞
要素の入れ子と内容モデル
＜リード＞
要素は入れ子にできます。しかし、要素はどこにでも入れることができるわけではありません。ここではそのルールの概要と、確認の仕方を説明します。

＜中見出し＞
要素の入れ子のルール
＜本文＞
〓01〓にあるマークアップでは、p要素の子要素としてmark要素が出現し、入れ子になっています。これはルール上問題ありません。
しかし、この入れ子の関係を逆にはできません。つまり〓02〓にあるようなマークアップは不正となります。

〓01〓正しい入れ子
＜コード＞
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

〓02〓不正な入れ子
＜コード＞
<mark>この<p>キーワード</p>はこの文章で重要なものを表します。</mark>

＜本文＞
これは、p要素がmark要素の子要素になれないためです。ある要素の内容に何を入れることができるか、つまりどの要素を子要素にできるかというルールは、仕様で定義されています。このルールを「内容モデル（content model）」と呼びます。
内容モデルに従っていないマークアップは語彙的ルールに違反し、エラーとなります。ただし、実際にそのようマークアップが出現してもエラー補正は行われず、そのままDOMツリーに追加されます。想定外の構造となるために、意図したスタイルが適用されないといった問題が起きることもあります。

＜中見出し＞
内容モデルの定義
＜本文＞
HTML仕様の各要素の説明には、content modelの項目があり、そこで内容モデルが定義されています。前述のp要素やmark要素は、いずれも〓03〓のようになっています。

・Content model:
・Phrasing content.

＜memo＞
4.4.1 The p element
https://html.spec.whatwg.org/multipage/grouping-content.html#the-p-element

＜memo＞
4.5.23 The mark element
https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-mark-element

＜本文＞
どちらの要素も子としてPhrasing contentを持つことができると定義されます。
Phrasing contentというのは、要素の「カテゴリー（categories）」の1つです。Phrasing contentには、mark要素をはじめとする多数の要素が属していますが、p要素は属していません。
そのため、p要素はPhrasing contentであるmark要素を子にできる一方で、mark要素はPhrasing contentではないp要素を子にできないことがわかります。このように仕様の内容モデルを調べると、ある要素がどの要素を子要素にできるかを確認できます。

＜小見出し＞
カテゴリーによる内容モデルの定義
＜本文＞
多くの要素は前述の例のように、カテゴリーを指定して内容モデルを定義しています。カテゴリーは仕様の3.2.5.2 Kinds of contentで規定されており、以下のようなものがあります。

・Metadata content
・Flow content
・Sectioning content
・Heading content
・Phrasing content
・Embedded content
・Interactive content

＜memo＞
3.2.5.2 Kinds of content
https://html.spec.whatwg.org/multipage/dom.html#kinds-of-content

＜本文＞
カテゴリーと要素は必ずしも1対1で対応するわけではなく、ある要素が複数のカテゴリーに属することもあります。また、上記のカテゴリーのいずれにも属さない要素もあります。
内容モデルの定義に登場するのは、主にMetadata、Flow、Phrasingの3つです。

＜丸見出し＞
Metadata
＜本文＞
HTML文書のメタデータを扱う要素が属するグループです。原則としてhead要素内で使用され、画面上に表示されることはありません。Metadataにはlink、meta、title要素などが属します。

＜丸見出し＞
Flow
＜本文＞
HTML文書のコンテンツ内で自由に使える要素のほとんどはFlowに属します。要素の内容モデルがFlowと定義されている場合、ほぼ任意の要素を子要素にできると考えて構いません。ただし、前述のMetadata contentや、tr要素、li要素など、特定の要素を親に持つ必要があるものを除きます。
flowは「流れ」という意味ですが、ここでは「本文として流し込むことができるもの」というイメージです。CSSに通じている読者は、CSSのNormal Flowでレイアウトできる要素と捉えるとイメージしやすいでしょう。
Flowにはテキストも属しています。内容モデルがFlowと定義されている場合、要素の内容にテキストを直接入れることもできます。

＜丸見出し＞
Phrasing
＜本文＞
Flowに属する要素のうち、特に文章のパラグラフで使用される要素がPhrasingに属します。Phrasingにはa、em、img、span、mark要素などが属します。また、テキストも属します。
Phrasingに含まれる要素はすべて、Flowにも属しています。逆は真ではなく、p、div、h1要素などはFlowに属しますが、Phrasingには属しません。

＜memo＞
HTML4の知識がある読者は、HTML4での「インライン要素」に対応する要素と考えるとわかりやすいでしょう。

＜小見出し＞
要素間のASCII空白文字の扱い
＜本文＞
テキストノードはFlowとPhrasingに属し、たいていの要素の子要素になることができます。ただし、スペースや改行などのASCII空白文字は内容モデルの妥当性の判断においては特殊な扱いになります。
たとえば、〓04〓は不正なマークアップです。

〓04〓不正なマークアップの例
＜コード＞
<ul>テキスト1<li>テキスト2</li></ul>

＜本文＞
基本的にul要素の直下にはli要素以外のものは入れられません。この例では「テキスト1」というテキストが入っているため、不正となります。
一方、〓05〓ではul要素の直下に改行とスペースによるインデントが入っています。このように、要素の内容の先頭と末尾に出現するASCII空白文字を「inter-element whitespace」と呼びます。

〓05〓改行とスペースを入れた例
＜コード＞
<ul>
  <li>テキスト</li>
</ul>

＜本文＞
inter-element whitespaceはテキストノードを生成し、要素のスタイルによっては表示に影響を及ぼす場合があります。〓05〓のマークアップに〓06〓のようなJavaScriptを実行すると、テキストノードが生成されていることを確認できます。

〓06〓〓05〓にJavaScriptを実行
＜コード＞
document.querySelector('ul').childNodes[0];
// textオブジェクトが返ってくる

document.querySelector('ul').childNodes[0].nodeName;
// "#text"が返ってくる

document.querySelector('ul').childNodes[0].length;
// 3が返ってくる

＜本文＞
しかし、内容モデルの考慮においては、inter-element whitespaceは無視することになっています。つまり、タグの前後の改行やインデントは、内容モデルに影響しません。前述のインデントされたli要素のマークアップ例も内容モデルに違反せず、問題ないということになります。

＜中見出し＞
特殊な内容モデルの定義
＜本文＞
要素によっては、要素のカテゴリーを参照せずに、内容モデルを文章で説明したり、特殊なキーワードで説明している場合があります。

＜小見出し＞
カテゴリーに属さない要素の場合
＜本文＞
要素のカテゴリーに属さない要素を子要素とする場合、内容モデルは文章で説明されます。たとえば、ol要素の場合は以下のようになっています。

＜引用囲み＞
Zero or more li and script-supporting elements.
＜/引用囲み＞

0個以上のli要素、もしくは「script-supporting elements」を子要素にしなければならないことがわかります。なお、script-supporting elementsとはscript要素とtemplate要素を指すもので、ほぼどこにでも書くことができます。この定義では0個以上ですので、内容モデルの観点からは内容を空にもできます。
複雑な説明が長文で書かれていることもあります。たとえばtable要素では、以下のように要素の出現順序を定義しています。

＜引用囲み＞
In this order: optionally a caption element, followed by zero or more colgroup elements, followed optionally by a thead element, followed by either zero or more tbody elements or one or more tr elements, followed optionally by a tfoot element, optionally intermixed with one or more script-supporting elements.
＜/引用囲み＞

＜小見出し＞
他の要素を子要素にできない場合
＜本文＞
他の要素を子要素にできない要素も存在し、同様に文章で説明されます。たとえばtitle要素の内容モデルは以下のようになっています。

＜引用囲み＞
Text that is not inter-element whitespace.
＜/引用囲み＞

inter-element whitespaceでないテキスト、という説明です。この場合、先頭と末尾のASCII空白文字を除いたテキストが要素の内容となり、他の要素は入れられません。

＜小見出し＞
制限がある場合
＜本文＞
特定のカテゴリーに属する要素を子要素にするものの、特筆すべき制限が書かれているケースもあります。たとえばbutton要素では以下のようになっています。

＜引用囲み＞
Phrasing content, but there must be no interactive content descendant and no descendant with the tabindex attribute specified.
＜/引用囲み＞

この場合、Phrasingに属する要素を子要素にできますが、interactive contentに属する要素やtabindex属性を持つ要素を子孫にできないという制限があります。

＜小見出し＞
transparent内容モデル
＜本文＞
内容モデルがtransparentとされている要素もあります。transparentは透明、透過といった意味で、親要素の内容モデルをそのまま透過的に適用します。a要素やins要素、del要素などが該当します。
内容モデルがtransparentである要素は、親要素の内容モデルを受け継ぎます。つまり、この要素の内容モデルは、親要素が何であるかによって変化します。たとえば、ins要素をp要素の中で使用すると〓07〓のようになります。

〓07〓ins要素の使用例
＜コード＞
<body>
  <p><ins>new</ins></p>
</body>

＜本文＞
ins要素の親となっているp要素の内容モデルはPhrasingです。このとき、insの子要素として許可されるものもPhrasingに属する要素となります。この場合、ins要素の子としてp要素を入れることはできません。
しかし、ins要素の子としてp要素を入れることができる場合もあります。たとえば〓08〓のように使うことができます。

〓08〓ins要素の子にp要素を入れた例
＜コード＞
<body>
  <ins>
    <p>new</p>
  </ins>
</body>

＜本文＞
ここでは、ins要素の親となっているのがbody要素であり、内容モデルはFlowです。この場合はins要素の内容モデルもFlowとなり、p要素を入れることができます。
要素の内容モデルがtransparentだからといって、この要素がどこでも使えるわけではありません。〓09〓は正しくない例です。ul要素の直下にins要素を入れようとしていますが、ul要素の子要素になれるのはli要素だけです。ins要素自体は、他の多くの要素と同様にFlowとPhrasingに属しているため、それらが許可される場所でしか使えません。その一方で、li要素の内容モデルはFlowであるため、ins要素をli要素の子にできます。これは〓10〓のように書き直すことが可能です。

〓09〓ul要素の子にins要素を入れた例
＜コード＞
<ul>
  <ins><li>new</li></ins>
</ul>

〓10〓〓09〓の修正例
＜コード＞
<ul>
  <li><ins>new</ins></li>
</ul>

＜本文＞
基本的には、内容モデルがtransparentである要素の開始タグ・終了タグを取り除いても成立するようにマークアップすれば問題ありません。

＜小見出し＞
Nothing内容モデル
＜本文＞
要素の中には、内容モデルがNothingとされているものがあります。この要素には、inter-element whitespaceを除き、テキストや要素を入れることができません。
内容モデルがNothingとなっている要素のほとんどは空要素で、終了タグが書けないものです。ただし例外もあり、たとえばiframe要素は内容モデルがNothingですが、終了タグを省略できません。

＜小見出し＞
See prose
＜本文＞
要素によっては、内容モデルにSee proseと書いてある場合があります。proseは「散文」といった意味で、要素定義の下にある説明文のことを指します。これは、内容モデルが複雑すぎて定義に書けないため、本文で説明しているものです。

＜中見出し＞
内容モデルの逆引き
＜本文＞
仕様では、内容モデルの逆引きもできるように、「Contexts in which this element can be used」という記述もあります。たとえば、p要素では以下のように書かれています。

＜引用囲み＞
Contexts in which this element can be used:
Where flow content is expected.
＜/引用囲み＞

Flowが許可される場所で使えることがわかります。これはp要素がFlowカテゴリーに属するためで、当然といえば当然です。ただし、要素によってはこの記述が便利なこともあり、たとえばli要素では以下のようになっています。

＜引用囲み＞
Contexts in which this element can be used:
Inside ol elements.
Inside ul elements.
Inside menu elements.
＜/引用囲み＞

li要素がol、ul、menu要素の子になれることがわかります。このように、要素によっては逆引きが便利なこともあるので、活用するとよいでしょう。
ただし、これは規範情報ではなく参考情報であり、あくまで利便性のために書かれているものです。仕様での正確な定義については、内容モデルを確認する必要があります。

