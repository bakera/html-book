＜タイトル＞
HTMLで扱える文字
＜リード＞
ウェブブラウザーは、画像、映像などさまざまなデータを扱うことができますが、基本となるのはやはりテキストです。ここでは、テキストをデジタルデータとして扱う際の表現方法について説明します。

＜中見出し＞
文字のデジタル表現
＜本文＞
文字だけで構成されたデータをテキストデータと呼びます。先に説明したように、HTMLは、マークアップを含んだテキストデータです。
コンピューターがテキストを扱う際には、デジタルデータにして処理する必要があります。具体的には、文字を0と1で表される特定のビット列に対応させることで表現します。

＜word＞
ビット列
ビットはデジタルデータの最小単位で、onとoff、真と偽、0と1のような2値の情報を持ちます。ビットを羅列したものがビット列で、通常、0と1を列挙して表現します。たとえば、1000001は7ビットの情報量を持つビット列です。

＜本文＞
テキストデータは別のコンピューターでも読み取れる必要があるため、文字をビット列で表現する際の共通規格が制定されました。
1963年にアメリカで作られたのが、「ASCII（American Standard Code for Information Interchange）」という規格です。制御文字、アルファベット、数字、記号などが定義されており、これらは今ではASCII文字と呼ばれています。

＜memo＞
ASCII規格は、何度か規格番号が変更されたものの、長らくANSI X3.4-1986として広く知られていました。また、ASCIIの後に制定されたISO/IEC 646という規格のベースになりました。

＜中見出し＞
文字コード
＜本文＞
ASCIIでは、128種類の文字に対して、7ビットのビット列を割り当てるルールを決めました。たとえば、スペース、0、A、aに対して、それぞれ以下のようなビット列を割り当てています。

＜memo＞
7ビットは、2の7乗で128通りのデータを表現できます。

＜本文＞
・（スペース）→ 0100000（32, 0x20）
・0→0110000（48, 0x30）
・A→1000001（65, 0x41）
・a→1100001（97, 0x67）

カッコ内は、ビット列を10進数表記、16進数表記で書いたものです。10進数や16進数の表記に対応させられることから、これは、文字に番号を振っているとも言えます。

＜memo＞
16進数は、先頭に「0x」という接頭辞を慣習的に付けることで、10進数と区別します。

＜本文＞
このようにして文字に割り当てられた番号を「文字コード（character code）」と呼びます。また、このような文字コードの割り当てルールの体系全体を指して文字コードと呼ぶこともあります。

＜memo＞
ASCII規格に基づく文字コード体系を「US-ASCII」と呼びます。

＜中見出し＞
符号化文字集合
＜本文＞
ASCIIは7ビットで文字を表現していましたが、7ビットで表現できるパターンは128通りしかありません。英数字のみを扱う場合は問題ありませんが、英語圏以外ではより多くの文字を扱う必要があります。そこで、ASCIIを拡張する形で、さまざまな文字コードの規格が作られました。
たとえば、ASCIIを8ビットに拡張して文字を追加したものがISO/IEC 8859-1という規格です。ISO/IEC 8859-1では、ASCIIにはなかった通貨記号（£、¥など）や、フランス語などで使われるアクセント付き文字（àなど）、ドイツ語などで使われるウムラウト付き文字（äなど）などが追加され、西ヨーロッパの諸言語に対応しています。

＜memo＞
ISO/IEC 8859-1の規格に基づく文字コード体系を「ISO-8859-1」と呼びます。ISO-8859-1はLatin-1と呼ばれることもあります。

＜本文＞
このように、番号を付けた文字の集まりのことを「符号化文字集合（coded character set）」と呼びます。また、特定の符号化文字集合における文字の番号を「コードポイント（code point）」あるいは「符号位置」と呼びます。

＜memo＞
符号化文字集合は、単に「文字集合（character set）」あるいは「文字セット」と呼ぶこともあります。

＜本文＞
現在、もっとも広く利用されている文字コード体系は、Unicodeと呼ばれる規格です。世界中のあらゆる文字を符号化しようと試みた規格で、欧文だけでなく、さまざまな言語で使われる文字に対応しています。もちろん、日本語で使われる、ひらがな、カタカナ、漢字も含まれますし、最近では絵文字にも対応しています。

＜memo＞
Unicodeとほぼ同等の規格として、ISO/IEC 10646が制定・保守されています。ISO/IEC 646に10000を加えた規格番号になっています。

＜本文＞
Unicodeのコードポイントは「Unicodeスカラー値（Unicode scalar value）」と呼び、「U+」に続けて16進数で表記します。たとえば、ひらがなの「あ」には10進数で12354、16進数で0x3042というコードポイントが割り当てられているため、Unicodeスカラー値はU+3042となります。同様に、🍣（寿司の絵文字）ではU+1F363となります。

＜中見出し＞
文字エンコーディング
＜本文＞
ASCIIやISO/IEC 8859-1が定義した文字コード体系はシンプルで、文字数も少ないため、コードポイントをそのまま使っていました。しかし、複数の符号化文字集合を同時に扱いたい場合や、多数の文字を扱う必要がある場合などは、コードポイントをそのままビット列として表現すると不都合があります。
そこで、コードポイントを一定のルールで変換してから表現するという方法が考え出されました。このように、文字を実際のビット列に変換することを「符号化(encode, encoding)」といいます。そして、この符号化を行う際の変換ルールを「文字エンコーディング（character encoding）」と呼びます。

＜memo＞
文字エンコーディングは「文字符号化方式」と呼ぶこともあります。単に「エンコーディング」と呼ばれることもあります。

＜本文＞
たとえば、UTF-8と呼ばれる文字エンコーディングを使用した場合、Unicodeの「あ」（U+3042）は0xE3 0x81 0x82というビット列に符号化されます。

＜中見出し＞
HTMLで扱う符号化文字集合
＜本文＞
Chapter1-3で述べたように、初期のHTML（HTML2.0〜HTML3.2）では日本語の文字が扱えませんでした。これは、初期のHTMLが符号化文字集合としてISO/IEC 8859-1を扱う仕様だったためです。
その後、HTML2.x（HTMLi18n）でHTMLの国際化の仕様が作られ、HTML4では符号化文字集合としてISO/IEC 10646を扱う仕様となりました。これはUnicodeの文字がすべて扱えるのとほぼ同義です。
現在のHTMLも、Unicodeの文字すべてを扱えます。

＜memo＞
ただし、文字が扱えることと、文字が確実に表示できることは必ずしも等価ではありません。HTMLの仕様としては扱えても、端末にその文字を表示できるフォントがなければ表示されません。

＜中見出し＞
HTMLで扱う文字エンコーディング
＜本文＞
現在のHTMLで扱う文字エンコーディングはEncoding Standardにまとめられています。

＜memo＞
Encoding Standard
https://encoding.spec.whatwg.org/

＜本文＞
この文書では、コンテンツ制作者はUTF-8を使わなければならないとしています。今後新規に作成するHTML文書は、UTF-8で符号化しなければなりません。
UTF-8以外の文字エンコーディングも定義されていますが、そのほとんどは「レガシーエンコーディング（legacy encoding）」とされています。これは、ユーザーエージェントが過去の文書を表示するためのもので、コンテンツ制作者が利用すべきものではありません。
かつて日本語のHTML文書で使われていたShift_JIS、EUC-JP、ISO-2022-JPはレガシーエンコーディングとして定義されています。現在は利用すべきではありません。

＜memo＞
レガシーエンコーディングで扱う符号化文字集合はUnicodeよりも文字数が少ないため、レガシーエンコーディングでは表現できない文字も存在します。そのような文字も、文字参照を利用すれば表現可能です。文字参照についてはChapter2-6で扱います。

＜中見出し＞
文字エンコーディングの判定
＜本文＞
HTML文書を処理する際には、まず文字エンコーディングを判定する必要があります。詳しくはHTML仕様の12.2.3.2 Determining the character encodingを参照してください。

＜memo＞
13.2.3.2 Determining the character encoding
https://html.spec.whatwg.org/multipage/parsing.html#determining-the-character-encoding

＜本文＞
大まかには、まず、以下のような処理で判定を試みます。

・ブラウザーなどでユーザーが文字エンコーディングを指定している場合、それを採用する
・HTTPレスポンスヘッダーのContent-Typeで文字エンコーディングが指定されていれば、それを採用する
・HTMLの解析を始める前に先頭1024バイトを読み、その中に<meta charset>がないか探し、あればそこで指定されたものを採用する

ここまでで文字エンコーディングが確定しない場合、ユーザーエージェントは文字エンコーディングの推測をしながらHTMLの解析を始めることになります。以下のような方法で推測します。

・直前にいたページの文字エンコーディングから推測する
・出現するビット列から推測する

コンテンツ側の指定としては、HTTPレスポンスヘッダーが最優先となるため、HTTPレスポンスヘッダーで指定するのが最良です。
HTTPレスポンスヘッダーが利用できないローカルファイルのHTML文書を扱う場合などは、ファイルの先頭1024バイト以内に<meta charset>を書いておくとよいでしょう。

＜memo＞
先頭1024バイトで<meta charset>が見つからず、HTMLの解析中に推測と異なる<meta charset>が見つかった場合、文字エンコーディングを変更してHTMLの解析をやり直します。HTMLの解析が最初からやり直しになるため、パフォーマンスが低下する可能性があります。

＜中見出し＞
誤判定と文字化け、セキュリティ問題
＜本文＞
テキストデータの文字エンコーディングが正しく判定できないと、データを適切な文字に復元できず、文字化けを引き起こすことになります。
たとえば、「テキストです」という文字列をShift_JISで符号化し、それをUTF-8として解釈した場合、〓01〓のように表示されてしまいます。

〓01〓文字化けの例
画像01

＜本文＞
文字エンコーディングの誤判定はセキュリティ上の問題に繋がることもあります。ここでは詳細は述べませんが、Shift_JISと誤判定させて先行バイト埋め込みによって後ろの文字を消す方法、UTF-7と誤判定させて文字種チェックをすり抜ける方法などがあります。
このため、HTML文書を作成する際には、文字エンコーディングを明確にして、誤判定が起きないようにすることが重要です。
