＜タイトル＞
HTMLで扱える文字
＜リード＞
ウェブブラウザーは、画像、映像などさまざまなデータを扱うことができますが、基本となるのはやはりテキストです。ここでは、テキストをデジタルデータとして扱う際の表現方法について説明します。

＜中見出し＞
文字のデジタル表現
＜本文＞
文字だけで構成されたデータをテキストデータと呼びます。先に説明したように、HTMLは、マークアップを含んだテキストデータです。
コンピューターは、アナログ情報をそのまま扱うことができません。コンピューターがテキストを扱う際には、デジタルデータにして処理する必要があります。具体的には、文字を0と1で表される特定のビット列に対応させることで表現します。
テキストデータは別のコンピューターでも読み取れる必要がありますから、そのデータのルールは統一しておく必要があります。このために、文字をビット列で表現する際の共通規格が制定されました。
1963年にアメリカで作られたのが、「ASCII（American Standard Code for Information Interchange）」という規格です。制御文字、アルファベット、数字、記号などが定義されており、これらは今ではASCII文字と呼ばれています。

＜memo＞
ASCII規格は、何度か規格番号が変更されたものの、長らくANSI X3.4-1986として広く知られていました。また、ASCIIの後に制定されたISO/IEC 646という規格のベースになりました。

＜中見出し＞
文字コード
＜本文＞
ASCIIでは、128種類の文字に対して、7ビットのビット列を割り当てるルールを決めました。たとえば、スペース、0、A、aに対して、それぞれ以下のようなビット列を割り当てています。

＜memo＞
7ビットは、2の7乗で128通りのデータを表現できます。

＜本文＞
・（スペース）→ 0100000（32, 0x20）
・0→0110000（48, 0x30）
・A→1000001（65, 0x41）
・a→1100001（97, 0x67）

カッコ内は、ビット列を10進数表記、16進数表記で書いたものです。10進数や16進数の表記に対応させられることから、これは、文字に番号を振っているとも言えます。

＜memo＞
16進数は、先頭に「0x」という接頭辞を慣習的に付けることで、10進数と区別します。

＜本文＞
このようにして文字に割り当てられた番号を「文字コード（character code）」と呼びます。また、このような文字コードの割り当てルールの体系全体を指して文字コードと呼ぶこともあります。

＜中見出し＞
符号化文字集合と文字エンコーディング
＜本文＞
ASCIIは7ビットで文字を表現していましたが、7ビットで表現できるパターンは128通りしかありません。英数字のみを扱う場合は問題ありませんが、英語圏以外ではより多くの文字を扱う必要があります。そこで、ASCIIを拡張する形で、さまざまな文字コードの規格が作られました。
たとえば、ASCIIを8ビットに拡張して文字を追加したものがISO/IEC 8859-1という規格です。ISO/IEC 8859-1では、ASCIIにはなかった通貨記号（£、¥など）や、フランス語などで使われるアクセント付き文字（àなど）、ドイツ語などで使われるウムラウト付き文字（äなど）などが追加され、西ヨーロッパの諸言語に対応しています。

＜本文＞
ASCIIやISO/IEC 8859-1はシンプルな文字コード体系で、文字に付けた番号をそのままビット列としているだけでした。しかし、現在広く使われている、漢字なども含めた世界各国の文字を扱うUnicodeでは、データ化する際のビット列が異なります。

＜memo＞
Unicodeとほぼ同等の規格として、ISO/IEC 10646が制定・保守されています。ISO/IEC 646に10000を加えた規格番号になっています。

＜本文＞
番号を付けた文字の集まりのことを「符号化文字集合（coded character set）」と呼び、文字の番号を「コードポイント（code point）」と呼びます。

＜memo＞
符号化文字集合は文字セットと呼ぶこともあります。

＜memo＞
日本産業規格（JIS）ではコードポイントを「符号位置」と呼んでいます。

＜本文＞
そして、文字を実際にビット列で表現する方法のことを「文字エンコーディング（character encoding）」と呼びます。単に「エンコーディング」と呼ぶこともあります。

＜memo＞
文字エンコーディングは文字符号化方式と呼ぶこともあります。

＜本文＞
Unicodeの符号化文字集合では、たとえば、ひらがなの「あ」には10進数で12354、16進数で0x3042というコードポイントが割り当てられています。Unicodeではこれを「Unicodeスカラー値（Unicode scalar value）」と呼び、「U+」に続けて16進数で表記します。「あ」の場合はU+3042となります。
Unicodeスカラー値がU+3042である文字「あ」をUTF-16BEと呼ばれる文字エンコーディングで表現すると、0x30 0x42というデータになります。これはコードポイントをほぼそのままビット列にしただけですが、文字エンコーディングによってはそうならない場合があります。UTF-8と呼ばれる文字エンコーディングを使用した場合、U+3042は0xE3 0x81 0x82というデータで表現されます。
このように、文字を最終的にバイナリーデータとして表現することを「符号化(encode, encoding)」と呼びます。

＜中見出し＞
HTMLで扱う符号化文字集合
＜本文＞
HTMLの歴史を振り返ると、初期のHTML（HTML2.0〜HTML3.2）はISO/IEC 8859-1しか扱えませんでした。その後、HTML2.x（HTMLi18n）でHTMLの国際化の仕様が作られ、HTML4ではISO/IEC 10646のすべての文字が扱える仕様となりました。つまり、Unicodeの文字がすべて扱えるのとほぼ同義です。Unicodeを扱える状況は現在に引き継がれています。
ただし、文字が扱えることと、文字が確実に表示できることは必ずしも等価ではありません。HTMLの仕様としては扱えても、端末にその文字を表示できるフォントがなければ表示されません。

＜中見出し＞
HTMLで扱う文字エンコーディング
＜本文＞
現在のHTMLで扱う文字エンコーディングはEncoding Standardにまとめられています。
この文書では、UTF-8以外の大多数の文字エンコーディングを「レガシーエンコーディング（legacy encoding）」とし、コンテンツ制作者はUTF-8を使わなければならないことが定められています。今後新規に作成するHTML文書は、UTF-8で符号化しなければなりません。

＜memo＞
Encoding Standard
https://encoding.spec.whatwg.org/

＜小見出し＞
UTF-8以外の文字エンコーディング
＜本文＞
とはいえ実際には、UTF-8以外のレガシーエンコーディングで符号化された古い文書を扱う必要もあります。ユーザーエージェントの対応が要求されるレガシーエンコーディングで日本語を扱えるものとしては、Shift_JIS、EUC-JP、ISO-2022-JPがあります。

＜memo＞
前述のISO/IEC 8859-1に対応する文字エンコーディングは、ISO-8859-1やWindows-1252として知らていれます。

＜本文＞
レガシーエンコーディングは、Unicode以外の符号化文字集合を扱います。たとえば、前述のShift_JISは符号化文字集合としてJIS X 0208を扱いますが、これはUnicodeよりも収録されている文字が少ないものです。したがって、Shift_JISでは表現できない文字も存在します。
その一方で、文字参照の仕組みは文字エンコーディングに依存しません。そのため、Shift_JISで符号化された文書であっても、文字参照を用いてUnicodeのすべての文字を表現できます。文字参照についてはChapter2-6で扱います。

＜中見出し＞
文字エンコーディングの判定
＜本文＞
HTML文書を処理する際には、まず文字エンコーディングを判定する必要があります。詳しくは12.2.3.2 Determining the character encodingを参照してください。

＜memo＞
13.2.3.2 Determining the character encoding
https://html.spec.whatwg.org/multipage/parsing.html#determining-the-character-encoding

＜本文＞
大まかには、まず、以下のような判定で文字エンコーディングが確定するかを試みます。

・ブラウザーなどでユーザーが文字エンコーディングを指定している場合、それを採用する
・HTTPレスポンスヘッダーのContent-Typeで文字エンコーディングが指定されていれば、それを採用する
・HTMLの解析を始める前に先頭1024バイトを読み、その中に<meta charset>がないか探し、あればそこで指定されたものを採用する

ローカルファイルのHTML文書を扱うなど、HTTPレスポンスヘッダーが存在しない場合には、<meta charset>の指定が有効です。この場合、ファイルの先頭1024バイト以内に書いておくと、HTMLの解析前に読み取ることが期待できます。
ここまでで文字エンコーディングが確定しない場合、ユーザーエージェントは文字エンコーディングを推測しつつHTMLの解析を始めることになります。

・直前にいたページの文字エンコーディングから推測する
・出現するビット列から推測する
・HTMLの解析中に、推測と異なる指定の<meta charset>があれば、文字エンコーディングを変更してHTMLの解析をやり直す

先頭1024バイトで<meta charset>が見つからず、その後ろにあった場合には、HTMLの解析の途中で文字エンコーディングが確定することがあります。この場合、HTMLの解析をやり直すことになるため、パフォーマンスが低下する可能性があります。

＜中見出し＞
誤判定と文字化け、セキュリティ問題
＜本文＞
テキストデータの文字エンコーディングが正しく判定できないと、データを適切な文字に復元できず、文字化けを引き起こすことになります。
たとえば、「テキストです」という文字列をShift_JISで符号化した場合、Shift_JISとして解釈すれば「テキストです」となりますが、これをUTF-8として解釈した場合、〓01〓以下のように表示されてしまいます。

〓01〓文字化けの例
画像01

＜本文＞
文字エンコーディングの誤判定はセキュリティ上の問題に繋がることもあります。ここでは詳細は述べませんが、Shift_JISと誤判定させて先行バイト埋め込みによって後ろの文字を消す方法、UTF-7と誤判定させて文字種チェックをすり抜ける方法などがあります。
このため、HTML文書を作成する際には、文字エンコーディングを明確にして、誤判定が起きないようにすることが重要です。

