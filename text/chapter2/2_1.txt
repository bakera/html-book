＜タイトル＞
HTMLの要素とタグの基本
＜リード＞
Chapter1では、HTMLがマークアップ言語であることを説明しました。ここでは、HTMLの基本的な構文について説明していきます。

＜中見出し＞
要素とタグ
＜本文＞
マークアップとは、テキストにマークを付けて意味や構造を明確にすることです。HTMLは、テキストデータと、それに対するマークから成り立っています。
たとえば〓01〓のようなテキストのかたまりがあったとします。

〓01〓テキストのサンプル
＜コード＞
これは見出しのテキストのかたまりです
これは本文です。
このキーワードはこの文章で重要なものを表します。

＜本文＞
このテキストのかたまりには、見出し、本文、そしてキーワードが含まれています。別のいい方をすれば、「見出し」、「本文」、「キーワード」という意味を持った一連のまとまりが存在することになります。Chapter1で触れたように、HTMLでは、こういったまとまりを「要素（element）」と呼んでいます。
マークアップ言語の役割は、要素を明示することです。要素を明示するには、〓02〓の2つの情報が必要になります。

〓02〓HTMLタグによるマークアップ
＜コード＞
<h1>これは見出しのテキストのかたまりです</h1>
<p>これは本文です。</p>
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

＜本文＞
<（U+003C、不等号小なり）と>（U+003E、不等号大なり）で囲まれた部分がHTMLのタグです。最初の行は見出しですが、先頭に<h1>のタグを、末尾に</h1>のタグを入れています。このように、要素の開始位置と終了位置にタグを入れることで、要素の種類とその範囲を明らかにします。

＜小見出し＞
開始タグと終了タグ
＜本文＞
要素の開始位置を表すタグを「開始タグ（start tag）」と呼びます。開始タグは<で始まり、>で終わります。h1と書かれている部分は「タグ名（tag name）」と呼ばれ、要素の名前である「要素名（element name）」を表しています。
要素の終了位置を表すタグを「終了タグ（end tag）」と呼びます。終了タグは、開始タグと区別するために<の直後に/（U+002F、スラッシュ）を置いた</で始まります。</の後にタグ名が続きます。>で終わる点は開始タグと同様です。
また、タグを除いた要素の中身の部分を、要素の「内容（content）」と呼びます。
もう一度、〓02〓のマークアップを見てみましょう。

〓02〓HTMLタグによるマークアップ（再掲）
＜コード＞
<h1>これは見出しのテキストのかたまりです</h1>
<p>これは本文です。</p>
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

＜memo＞
「content」は日本語に訳さず、コンテントやコンテンツと呼ばれることもあります。

＜本文＞
1行目には、開始タグ<h1>と終了タグ</h1>があります。この部分全体が要素名h1の要素となります。このh1要素の内容は、「これは見出しのテキストのかたまりです」というテキストです。
2行目は開始タグ<p>と終了タグ</p>でマークアップされ、p要素であることを表しています。要素の内容は「これは本文です。」というテキストです。
3行目は少し複雑です。2行目と同じようにp要素としてマークアップされていますが、要素の内容は単純なテキストではありません。この要素の中にはさらに<mark>と</mark>というタグがあります。
p要素の内容には、テキストだけでなく、mark要素も入っている形になります。

＜小見出し＞
終了タグの省略
＜本文＞
原則として、開始タグと終了タグは対で存在しますが、終了タグは省略できる場合があります。
ある要素の終了タグが省略できるかどうかのルールは、仕様の各要素の説明に記載されています。これまでに何度か出てきたp要素の場合は、以下のように記載されています。
＜引用囲み＞
Tag omission in text/html: A p element's end tag can be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, menu, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.
＜/引用囲み＞

＜memo＞
4.4.1 The p element
https://html.spec.whatwg.org/multipage/grouping-content.html#the-p-element

＜本文＞
親要素と直後の要素が一定の場合に、終了タグを省略できることがわかります。具体的には、さきほどの例では〓03〓のように省略できます。

〓03〓終了タグの省略
＜コード＞
<p>ある<mark>長いキーワード</mark>
<p><mark>キーワードの続き</mark>はこの文章で重要なものを表します。

＜本文＞
省略された終了タグ</p>は、〓04〓のようにブラウザーによって補われて解釈されます。

〓04〓ブラウザーによる解釈
＜コード＞
<p>ある<mark>長いキーワード</mark></p>
<p><mark>キーワードの続き</mark>はこの文章で重要なものを表します。</p>

＜本文＞
p要素のほかに終了タグが省略可能な要素としては、li要素、dt要素、dd要素、tr要素、th要素、td要素、caption要素、thead要素、tbody要素、tfoot要素、option要素、rp要素、rt要素などが挙げられます。
終了タグが省略できない要素についても見てみましょう。たとえばmark要素の場合、以下のように記載されています。
＜囲み＞
Tag omission in text/html: Neither tag is omissible.
＜/囲み＞

＜memo＞
4.5.23 The mark element 
https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-mark-element

ここには、開始タグも終了タグも省略できないとあります。
このように特定の要素の終了タグは省略できますが、本書のコード例では終了タグを省略せずに記載しています。HTMLコードのメンテナンス性からも、終了タグを省略せずにHTMLを記述することが望ましいでしょう。

＜小見出し＞
終了タグを持たない要素
＜本文＞
終了タグの省略が可能な要素が存在する一方で、そもそも終了タグを持たない要素もあります。〓05〓は、br要素を使った例です。

〓05〓br要素を使った記述例
＜コード＞
<p>詩などの<br>文章では<br>改行位置が<br>重要になることもあります。</p>

＜本文＞
br要素は改行を指定する要素で、その位置で改行されることが期待されます。タグ省略については、仕様に以下のように記載されています。
＜囲み＞
Tag omission in text/html: No end tag.
＜/囲み＞
br要素は終了タグを持たないとされています。このように、終了タグを持たない要素を「空要素(void element)」と呼びます。空要素はその性質上、その中にテキストや他の要素を含むことはなく、常に内容が空になります。要素の内容についてはChapter2-4で説明します。

＜小見出し＞
開始タグの省略
＜本文＞
要素によっては、終了タグだけでなく、開始タグも省略できる場合があります。具体的には、html要素、head要素、body要素、tbody要素が該当します。〓06〓はタグを省略して書いた例です。

〓06〓タグを省略した記述例
＜コード＞
<!DOCTYPE html>
<title>test</title>
<table>
  <tr><th>見出し1<td>データ1
  <tr><th>見出し2<td>データ2
</table>

＜本文＞
html要素、head要素、body要素、tbody要素の開始タグが書かれていません。しかしこのマークアップはエラーではなく、〓06〓のように解釈されます。

〓06〓ブラウザーによる解釈
＜コード＞
<!DOCTYPE html>
<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <table>
      <tbody>
        <tr>
          <th>見出し1</th>
          <td>データ1</td>
        </tr>
        <tr>
          <th>見出し2</th>
          <td>データ2</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>

＜本文＞
このように、タグを一切書かなくても要素が存在する場合があります。とはいえ、HTMLのソースコードを読んだときにわかりにくく、挙動が予想しにくくなるため、ほとんどの場合において開始タグの省略はしません。

＜小見出し＞
要素の入れ子
＜本文＞
ある要素の内部に別の要素が入っていることを「入れ子（nest）」といいます。ある要素の内部に別の要素を入れることを「入れ子にする」または「ネストする」といいます。
入れ子は多重にできます。〓06〓の例では、body要素の中にp要素が入れ子になり、その中にさらにmark要素が入れ子になっています。

〓06〓入れ子の記述例
＜コード＞
<body>
  <p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>
</body>

＜本文＞
ある要素の中に入っている要素のことを、その要素の「子孫（descendant）」といいます。また、ある要素の直下にある要素を「子（child, children）」といいます。
逆に、ある要素のすぐ外側の要素を「親（parent）」、親の親なども含む外側の要素全般を「祖先（ancestor）」といいます。
〓06〓の例では、mark要素は、p要素の子要素であり、子孫要素です。mark要素は、body要素の子要素ではありませんが、body要素の子孫要素です。
なお、ある要素の子になれる要素は決まっています。たとえば、p要素の中にmark要素を入れることはできますが、mark要素の中にp要素を入れることはできません。詳しくはChapter2-4で説明します。

＜丸見出し＞
誤った入れ子とエラー処理
＜本文＞
要素は、複数の要素にまたがることはできません。たとえば、〓07〓のようにマークアップしたとします。

〓07〓複数の要素にまたがった入れ子の例
＜コード＞
<p>ある<mark>長いキーワード</p>
<p>キーワードの続き</mark>はこの文章で重要なものを表します。</p>

＜本文＞
このようなマークアップは、誤った入れ子であるため、不正なものとしてエラーになります。実際には、ブラウザーはこのようなエラーに出会うと、マークアップを〓08〓のように修正します。

〓08〓ブラウザーによる解釈
＜コード＞
<p>ある<mark>長いキーワード</mark></p>
<p>キーワードの続きはこの文章で重要なものを表します。</p>

＜本文＞
このようなエラー処理は要素によって異なります。〓08〓の例でmark要素のかわりにb要素を使った場合、エラー処理により、〓09〓のようになります。

〓09〓エラー処理による解釈
＜コード＞
<p>ある<b>長いキーワード</b></p>
<p><b>キーワードの続き</b>はこの文章で重要なものを表します。</p>

＜小見出し＞
HTML文書とDOCTYPE
＜本文＞
HTMLを扱う際は、1つの文書に含まれるテキストすべてをマークアップして扱うことが一般的です。このように、文書全体をHTMLとしてマークアップしたものを「HTML文書（HTML document）」と呼びます。
HTMLを他の文書に埋め込むなどの場合に、HTMLを文書全体としてではなく、一部分だけ切り出して扱うこともあります。HTMLの切り出した一部分を「HTML断片（HTML fragment）」と呼びます。本書におけるHTMLの例示のほとんどは、HTML断片になります。
ここまで、タグを使って要素をマークアップする方法を説明してきましたが、HTML文書を完成させるためには追加で必要なものがあります。
HTML文書の冒頭には、〓10〓のような「DOCTYPE」と呼ばれるマークを書く必要があります。
大文字・小文字は区別しないため、小文字で書くこともできます。

〓10〓DOCTYPEの記述
＜コード＞
<!DOCTYPE html>
or
<!doctype html>

＜本文＞
DOCTYPEは、文書がHTML5で記述されていることを識別するためのものです。DOCTYPEが存在しない場合、HTML5ではない可能性が高いと判断され、quirks modeで処理されます。

＜memo＞
quirks mode処理は、日本語では互換モードや奇癖モードなどと呼ばれます。詳細はMDNの後方互換モードと標準準拠モードに譲ります。 
https://developer.mozilla.org/ja/docs/Web/HTML/Quirks_Mode_and_Standards_Mode 

＜コラム＞
DOCTYPEの互換性と文書型宣言
＜本文＞
DOCTYPEは「文書型宣言（Document type declaration）」と呼ばれることもあります。なお、文書型宣言はSGMLの概念です。古いHTMLはSGMLのルールに従っていたため、文書型宣言が必須でした。HTML5はSGMLではなくなり、文書型宣言も不要となりましたが、ブラウザーの互換性のためにDOCTYPEを書くことになっています。
HTML5のDOCTYPEは、SGMLの文書型宣言として妥当な形式ではありません。しかし、SGMLやXMLを出力するプログラム（XSLTプロセッサーなど）でHTMLを生成する場合、文書型宣言を省略したり変形したりできないこともあります。そのような場合、SGMLの文書型宣言として妥当な形式となる、〓01〓のような記述も許されています。

〓01〓SGMLの文書型宣言として妥当な形式
＜コード＞
<!DOCTYPE html system "about:legacy-compat">

＜小見出し＞
最低限のHTML文書
＜本文＞
ここまでの説明で、ひとまずHTML文書を作成する準備が整いました。〓11〓は、タグを一切省略していない最低限のHTML文書のサンプルです。

〓11〓HTMLのサンプル
＜コード＞
<!DOCTYPE html>
<html>
  <head>
    <title>最低限のHTML</title>
  </head>
  <body>
    <h1>最低限のHTML</h1>
    <p>これはHTML文書です！</p>
  </body>
</html>