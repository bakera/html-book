＜タイトル＞
HTMLの要素とタグの基本
＜リード＞
Chapter1では、HTMLがマークアップ言語であることを説明しました。ここでは、HTMLの基本的な構文について説明していきます。

＜中見出し＞
要素とタグ
＜本文＞
マークアップとは、テキストにマークを付けて意味や構造を明確にすることです。HTMLは、テキストデータと、それに対するマークから成り立っています。
たとえば〓01〓のようなテキストのかたまりがあったとします。

〓01〓テキストのサンプル
＜コード＞
これは見出しのテキストのかたまりです
これは本文です。
このキーワードはこの文章で重要なものを表します。

＜本文＞
このテキストのかたまりには、見出し、本文、キーワードが含まれています。Chapter1で触れたように、HTMLでは、こういったまとまりを「要素（element）」といいます。
マークアップ言語の役割は、要素を明示することです。要素を明示するには、以下の2つの情報が必要になります。

・要素の種類：それがどのような要素なのか
・要素の範囲：どこからどこまでがその要素になるのか

HTMLでは、この情報を「タグ（tag）」と呼ばれるマークを使って表現します。〓01〓の例にHTMLのタグを付け加えると、〓02〓のようになります。

〓02〓HTMLタグによるマークアップ
＜コード＞
<h1>これは見出しのテキストのかたまりです</h1>
<p>これは本文です。</p>
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

＜本文＞
<（U+003C、不等号小なり）と>（U+003E、不等号大なり）で囲まれた部分がHTMLのタグです。最初の行の見出しは、先頭に<h1>のタグを、末尾に</h1>のタグを入れています。このように、要素の開始位置と終了位置にタグを入れることで、要素の種類とその範囲を明示します。

＜小見出し＞
開始タグと終了タグ
＜本文＞
要素の開始位置を表すタグを「開始タグ（start tag）」といいます。開始タグは<で始まり、>で終わります。h1と書かれた部分は「タグ名（tag name）」といい、要素の名前である「要素名（element name）」を表しています。
要素の終了位置を表すタグを「終了タグ（end tag）」といいます。開始タグとは異なり、<の直後に/（U+002F、スラッシュ）を置いた</で始まります。
タグを除いた要素の中身の部分を、要素の「内容（content）」といいます。もう一度、〓02〓のマークアップを見てみましょう。

〓02〓HTMLタグによるマークアップ（再掲）
＜コード＞
<h1>これは見出しのテキストのかたまりです</h1>
<p>これは本文です。</p>
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

＜memo＞
「content」は日本語に訳さず、コンテントやコンテンツということもあります。

＜本文＞
1行目には、開始タグ<h1>と終了タグ</h1>があります。この部分全体が要素名h1の要素となります。このh1要素の内容は、「これは見出しのテキストのかたまりです」というテキストです。
2行目は開始タグ<p>と終了タグ</p>で囲まれ、p要素であることを表しています。要素の内容は「これは本文です。」というテキストです。
3行目は少し複雑です。2行目と同じようにp要素としてマークアップされていますが、この要素の中にはさらに<mark>と</mark>というタグがあります。p要素の内容に、テキストとmark要素が入っている形になります。

＜小見出し＞
終了タグの省略
＜本文＞
原則として、開始タグと終了タグはペアで存在しますが、終了タグは省略できる場合があります。
ある要素の終了タグが省略できるかどうかのルールは、仕様の各要素の説明に記載されています。これまでに何度か出てきたp要素の場合は、以下のように記載されています。
＜引用囲み＞
Tag omission in text/html: A p element's end tag can be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, main, menu, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.
＜/引用囲み＞

＜memo＞
4.4.1 The p element
https://html.spec.whatwg.org/multipage/grouping-content.html#the-p-element

＜本文＞
親要素と直後の要素が一定の場合に、終了タグを省略できることがわかります。具体的には、〓02〓の例は〓03〓のように省略できます。

〓03〓終了タグの省略
＜コード＞
<p>これは本文です。
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。

＜本文＞
省略された終了タグ</p>は、〓04〓のようにブラウザーによって補われて解釈されます。

〓04〓ブラウザーによる〓03〓の解釈
＜コード＞
<p>これは本文です。</p>
<p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>

＜本文＞
p要素のほかに終了タグが省略可能な要素としては、li要素、dt要素、dd要素、tr要素、th要素、td要素、caption要素、thead要素、tbody要素、tfoot要素、option要素、rp要素、rt要素などが挙げられます。

＜memo＞
要素によっては終了タグが省略できますが、HTMLコードのメンテナンス性の観点からは、終了タグを省略せずにHTMLを記述することが望ましいでしょう。本書のコード例では、省略可能な終了タグを省略せずに記載しています。

＜本文＞
終了タグが省略できない要素についても見てみましょう。たとえばmark要素の場合、以下のように記載されています。
＜引用囲み＞
Tag omission in text/html: Neither tag is omissible.
＜/引用囲み＞

＜memo＞
4.5.23 The mark element 
https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-mark-element

開始タグも終了タグも省略できないとあります。このように書かれている要素の場合、終了タグを必ず書かなくてはなりません。

＜小見出し＞
終了タグを持たない要素
＜本文＞
終了タグの省略が可能な要素が存在する一方で、そもそも終了タグを持たない要素もあります。〓05〓は、br要素の使用例です。

〓05〓br要素の使用例
＜コード＞
<p>詩などの<br>文章では<br>改行位置が<br>重要になることもあります。</p>

＜本文＞
br要素は改行を指定する要素で、その位置で改行されることが期待されます。タグ省略については、仕様に以下のように記載されています。
＜引用囲み＞
Tag omission in text/html: No end tag.
＜/引用囲み＞
終了タグを持たないとあります。このように、終了タグを持たない要素を「空要素（void element）」と呼びます。空要素はその性質上、常に内容が空になります。

＜memo＞
要素の内容についてはChapter2-4で説明します。

＜小見出し＞
開始タグの省略
＜本文＞
要素によっては、終了タグだけでなく、開始タグも省略できる場合があります。具体的には、html要素、head要素、body要素、tbody要素が該当します。〓06〓はタグを省略して記述した例です。

〓06〓タグを省略した記述例
＜コード＞
<!DOCTYPE html>
<title>test</title>
<table>
  <tr><th>見出し1<td>データ1
  <tr><th>見出し2<td>データ2
</table>

＜本文＞
html要素、head要素、body要素、tbody要素の開始タグが書かれていません。しかし、このマークアップは構文エラーではなく、〓07〓のように解釈されます。

〓07〓ブラウザーによる解釈
＜コード＞
<!DOCTYPE html>
<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <table>
      <tbody>
        <tr>
          <th>見出し1</th>
          <td>データ1</td>
        </tr>
        <tr>
          <th>見出し2</th>
          <td>データ2</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>

＜本文＞
〓06〓ではhtml要素、head要素、body要素、tbody要素を表すタグは一切書かれていませんでしたが、要素が存在することになります。

＜memo＞
開始タグを省略してしまうと、HTMLのソースコードを読んだときに要素の存在がわかりにくく、挙動も予想しにくくなります。また、属性も記述できません。そのため、開始タグの省略はほとんど行われません。

＜小見出し＞
要素の入れ子
＜本文＞
ある要素の内部に別の要素が入っていることを「入れ子（nest）」といいます。ある要素の内部に別の要素を入れることを「入れ子にする」または「ネストする」といいます。
入れ子は多重にできます。〓08〓の例では、body要素の中にp要素が入れ子になり、その中にさらにmark要素が入れ子になっています。

〓08〓入れ子の記述例
＜コード＞
<body>
  <p>この<mark>キーワード</mark>はこの文章で重要なものを表します。</p>
</body>

＜本文＞
ある要素の中に入っている要素のことを、その要素の「子孫（descendant）」といいます。また、ある要素の直下にある要素を「子（child, children）」といいます。
逆に、ある要素のすぐ外側の要素を「親（parent）」、親の親なども含む外側の要素全般を「祖先（ancestor）」といいます。
〓08〓の例では、mark要素は、p要素の子要素であり、子孫要素です。また、body要素の子孫要素でもあります。ただし、body要素の子要素ではありません。
なお、ある要素の子になれる要素は決まっています。たとえば、p要素の中にmark要素を入れることはできますが、mark要素の中にp要素を入れることはできません。詳しくはChapter2-4で説明します。

＜丸見出し＞
誤った入れ子とエラー処理
＜本文＞
要素は、複数の要素にまたがることはできません。たとえば、〓09〓のようにマークアップしたとします。

〓09〓複数の要素にまたがる、誤った入れ子の例
＜コード＞
<p>ある<mark>長いキーワード</p>
<p>キーワードの続き</mark>はこの文章で重要なものを表します。</p>

＜本文＞
このようなマークアップは、誤った入れ子であるため、不正なものとしてエラーになります。実際には、ブラウザーはこのようなエラーに出会うと、マークアップを〓10〓のように修正します。

〓10〓ブラウザーによる解釈
＜コード＞
<p>ある<mark>長いキーワード</mark></p>
<p>キーワードの続きはこの文章で重要なものを表します。</p>

＜本文＞
エラー処理の方法は要素によって異なり、予想困難な挙動になることもあります。Chapter2-8の「終了タグを書き漏らした際のエラー」も参照してください。

＜小見出し＞
HTML文書とDOCTYPE
＜本文＞
1つの文書全体をHTMLとしてマークアップしたものを「HTML文書（HTML document）」と呼びます。

＜memo＞
HTMLを他の文書に埋め込む場合など、文書の全体ではなく、一部分だけを切り出して扱うこともあります。HTMLの切り出した一部分を「HTML断片（HTML fragment）」と呼びます。本書におけるHTMLの例示のほとんどは、HTML断片になります。

＜本文＞
HTML文書を完成させるためには、文書の先頭に〓11〓のような「DOCTYPE」と呼ばれるマークを文字どおりに書く必要があります。ただし、大文字・小文字は区別しないため、小文字で書くこともできます。

〓11〓DOCTYPEの記述例
＜コード＞
<!DOCTYPE html>

＜本文＞
歴史的な理由により、ブラウザーは、DOCTYPEがないHTML文書を古いものとみなし、特殊な扱いをします。DOCTYPEを記述するのは、その処理を防ぐためで、それ以上の意味はありません。

＜memo＞
この特殊な扱いはquirks modeと呼ばれます。互換モード、奇癖モードと呼ばれることもあります。詳細はMDNの「後方互換モードと標準準拠モード」を参照してください。。 
https://developer.mozilla.org/ja/docs/Web/HTML/Quirks_Mode_and_Standards_Mode 

＜コラム＞
DOCTYPEの互換性と文書型宣言
＜本文＞
Chapter1-3で説明したように、古いHTMLはSGMLのルールに従っており、DTD（文書型定義）が必須でした。SGML文書ではDTDを参照するために、文書の先頭に「文書型宣言」という記述が必要です。HTML4では〓01〓のような記述になります。

〓01〓HTML4の文書型宣言
＜コード＞
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">

HTML5はSGMLではなくなり、理論上は文書型宣言が不要になりました。その一方で、ブラウザーは文書型宣言の文字列によって、quirks modeで解釈するかどうかを判定していました。そのため、ブラウザーがquirks modeと解釈しないような必要最小限の文字列を書く必要があったのです。こうして現在のDOCTYPEが生まれました。
しかし、このDOCTYPEはSGMLの文書型宣言として妥当な形式ではありません。もはや文書型宣言とは呼べないため、単に「DOCTYPE（the DOCTYPE）」と呼ばれています。
なお、SGMLやXMLを出力するプログラム（XSLTプロセッサーなど）でHTMLを生成する場合、妥当な文書型宣言しか扱えないことがあります。そのような場合、SGMLの文書型宣言として妥当な形式となる、〓02〓のような記述も許されています。

〓02〓SGMLの文書型宣言として妥当な文章型宣言形式
＜コード＞
<!DOCTYPE html system "about:legacy-compat">

＜小見出し＞
最低限のHTML文書
＜本文＞
ここまでの説明で、ひとまずHTML文書を作成する準備が整いました。〓12〓は、タグを一切省略していない最低限のHTML文書のサンプルです。

〓12〓HTMLのサンプル
＜コード＞
<!DOCTYPE html>
<html>
  <head>
    <title>最低限のHTML</title>
  </head>
  <body>
    <h1>最低限のHTML</h1>
    <p>これはHTML文書です！</p>
  </body>
</html>