＜タイトル＞
コメント
＜本文＞
HTMLにはコメントを書くこともできます。コメントは、ソースコード中では読むことができますが、原則として表示などには影響しません。

＜中見出し＞
コメントの基本書式
＜本文＞
コメントは、基本的に〓01〓のような形式になります。
<!--がコメントの開始、-->がコメントの終了を表すマークです。これらに囲まれた部分がコメントの内容となります。

〓01〓コメントの記述例
＜コード＞
<!--コメント-->

＜本文＞
コメントは表示に影響しないので、コンテンツ制作者が好きな内容を書くことができます。主に、HTMLのソースコードを読みやすくするためにも利用されます。ソースコード内のパーツの区切りを示したり、div要素などの終了タグがどの開始タグに対応するのかを書いたりできます〓02〓。
コメントは要素ではありません。コメントの中に含まれるテキストはテキストノードではなく、コメントノードという独自のノードとして扱われます。コメントはノードなので、DOMを通じてコメントノードの内容にアクセスできます。

〓02〓コメントの利用例
＜コード＞
<!-- ヘッダー開始 -->
<div class="header">
...
<!--/header--></div>
<!-- ヘッダー終了 -->

＜中見出し＞
コメントの構文ルール
＜本文＞
コメントにはさまざまな内容を入れることができます。コメントには改行を含むことが許されるので、複数行のテキストを書くことができます〓03〓。

〓03〓複数行にわたるのコメント
＜コード＞
<!--
複数行にわたる
コメントも可能
-->

＜本文＞
コメントは空でも構いません。〓04〓は有効なコメントで、内容が空のコメントノードができます。
コメントの中に<を書くこともできます。コメントの中でタグを記述した場合はタグとはみなされず、そのままコメントノードの内容となります。よくあるパターンとしては、既存のマークアップを一時的に除外するコメントアウトに使われます〓05〓。

〓04〓空のコメント
＜コード＞
<!---->

〓05〓コメント内に<を記述した例
＜コード＞
<!--
<h1>見出し</h1>
<p>テキスト</p>
-->

＜本文＞
なお、>を書くこともできますが、>はコメントの内容の先頭に書くことができないという制限があります。〓06〓はエラーとなり、空のコメントノードが追加されます。これらはいずれも、エラー処理によって、〓07〓のようなマークアップと同じものとみなされます。
なお、コメント-->部分がコメントにはならないことに注意してください。

〓06〓>をコメントの先頭に記述した誤った例
＜コード＞
<!-->コメント-->
<!--->コメント-->

〓07〓〓06〓の解釈
＜コード＞
!---->コメント-->

＜memo＞
>をコメントの先頭に記述した場合、abrupt-closing-of-empty-comment parse errorというエラーとして扱われます。

＜中見出し＞
コメントは入れ子にできない
＜本文＞
要素とは異なり、コメントの中に他のコメントを入れ子にはできません。〓08〓はエラーとなる例です。エラーとなりますが、<!--はコメントの一部とみなされます。また、-->をコメントの中に入れようとすると、そこでコメントが終了したものとみなされます。そのため、前<!--内側というコメントノードと、後-->というテキストノードになります。

〓08〓コメントを入れ子にした例
＜コード＞
<!-- 前 <!--内側--> 後 -->

＜memo＞
入れ子にした場合、nested-comment parse errorというエラーとして扱われます。

＜本文＞
また、コメントの内容の末尾に<!-を書くこともできません。〓09〓は誤った例です。
これもコメントの中で別のコメントを入れ子にしようとしたものと解釈され、エラーとなります。

〓09〓コメント内容の末尾に<!-を記述した例
＜コード＞
<!-- <!--->

＜中見出し＞
コメントの前後にスペースを挟む
＜本文＞
前述したように、コメントの内容の先頭に>や->を書いたり、末尾に<!-を書くとエラーになります。ただし、スペースを挟めば問題ありません。〓10〓はいずれも正当なコメントです。

〓10〓スペースを挟んだ記述例
＜コード＞
<!-- >コメント -->
<!-- ->コメント -->
<!-- コメント<!- -->

＜本文＞
コメントの前後にスペースを入れる習慣をつけておくと、エラーを避けやすくなります。ただし、いずれにしても入れ子のコメントは書けないので、〓11〓はスペースがあってもエラーになってしまいます。「コメントの前後にスペースを入れるとよい、ただし入れ子のコメントは書けない」と覚えておくとよいでしょう。

〓11〓スペースがあってもエラーになる記述例
＜コード＞
<!-- <!-- -->

＜中見出し＞
Bogus Comment
＜本文＞
過去のHTMLには、現在では使われていないマークが入っていることがあります。多くの場合、それらはコメントとみなすようになっています。このように、かつて使われていたマークで、現在はコメントとみなされるものをBogus Commentと呼んでいます。Bogus Commentには以下のようなものがあります。

＜memo＞
Bogusは「偽物の」という意味です。

＜小見出し＞
マーク宣言
＜本文＞
SGMLには<!で始まる「マーク宣言（Markup Declaration）」と呼ばれるマークがあります。HTMLのコメントも、歴史的にはマーク宣言の一種であり、「注釈宣言」と呼ばれていました。先に紹介したDOCTYPEも、元は「文書型宣言」と呼ばれるマーク宣言の一種でした。
現在のHTMLでは、マーク宣言はすべてコメントとして扱われます。〓12〓の記述は、XMLやSGMLにおける「実体宣言」の例です。
現在のHTML構文では、これは単なるコメントとみなされ、〓13〓のようなマークアップと同じ意味になります。

〓12〓XMLとSGMLの「実体宣言」の例
＜コード＞
<!ENTITY external-file SYSTEM "external.xml">

〓13〓現在のHTML構文における〓12〓の解釈
＜コード＞
<!--ENTITY external-file SYSTEM "external.xml"-->

＜小見出し＞
処理命令
＜本文＞
SGMLやXMLには<?で始まる「処理命令（Processing Instrument）」と呼ばれるマークが存在します。XMLの先頭に書かれる「XML宣言」や、XMLのスタイルシートを指定する「xml-stylesheet処理命令」も処理命令の一種です〓14〓。

〓14〓xml-stylesheet処理命令
＜コード＞
<?xml version="1.0" encoding="UTF-8" ?> <!-- XML宣言 -->
<?xml-stylesheet type="text/xsl" href="basic.xsl" ?> <!-- xml-stylesheet処理命令  -->

＜本文＞
これらは、XML構文では意味を持ちますが、HTML構文では単にコメントとみなされます。〓15〓のようなコメントが書かれているものと解釈されます。

〓15〓HTML構文における〓14〓の解釈
＜コード＞
<!--xml version="1.0" encoding="UTF-8" -->
<!--xml-stylesheet type="text/xsl" href="basic.xsl" -->

＜小見出し＞
CDATA区間
＜本文＞
SGMLやXMLには「CDATA区間（CDATA Section）」と呼ばれるマークがあります。たとえば〓16〓のように書きます。

〓16〓CDATA区間の記述例
＜コード＞
<![CDATA[
<h1>CDATAのサンプル</h1>
<p>タグは無視され、すべてテキストとみなされます</p>
]]>

＜本文＞
タグは無視され、すべてテキストとみなされます。コメントも無効で、テキストとして表示されます。&amp;などの文字参照も展開されません。
XHTMLでは、script要素の中に<などの文字を書くためにCDATA区間を使うケースがありました〓17〓。

〓17〓XHTMLでCDATA区間を利用する記述例
＜コード＞
<script>
<!CDATA[[
  // JavaScriptのコード
  // CDATA の中なら < をそのまま書いてもエラーになりません
]]>
</script>

＜本文＞
現在のHTML構文では、このCDATA区間の記述がscript要素内に出現した場合、そのままスクリプトエンジンに送られます（そしてスクリプトエンジンの側で無視されます）。
svg要素やmath要素の中など、HTMLの要素ではない、XMLを記述するコンテキストで出現した場合は、XMLのCDATA区間として解釈されます。つまり、CDATA区間の内容はテキストとみなされ、マークが解釈されません。
これらに該当しない一般的なHTMLの要素の中では、CDATA区間は使えません。CDATA区間が出現した場合はエラーとなり、Bogus Commentとして処理されます。〓18〓は、HTMLのpre要素の中にCDATA区間を書こうとした例です。

＜memo＞
この場合、cdata-in-html-content errorというエラーになります。

〓18〓HTMLのpre要素の中にCDATA区間を記述した例
＜コード＞
<pre>
<!CDATA[[
<h1>HTMLのタグを無視してほしい</h1>
]]>
</pre>

＜本文＞
このようなCDATA区間は使用できません。この場合、CDATA区間内の最初の>までがコメントとみなされます。つまり、〓19〓のようなマークアップと等価になります。

〓19〓〓18〓の解釈
＜コード＞
<pre>
<!--CDATA[[
<h1-->HTMLのタグを無視してほしい
]]>
</pre>

＜小見出し＞
不正な終了タグ
＜本文＞
タグ名は「ASCII英字（ASCII alpha）」で始めなければなりません。このルールは開始タグ、終了タグ両方に適用されます。
興味深いことに、これに違反した場合のエラー処理は開始タグと終了タグとで異なり、開始タグがテキストとみなされるのに対し、終了タグはBogus Commentとみなされます。
たとえば、〓20〓のようなマークアップがあったとします。
「英字」ではなく「数字」をタグ名に使用しているので、これはエラーとなります。しかし、エラー処理の結果、開始タグはそのままテキストとなり、終了タグは中身部分がコメントとなります。つまり、〓21〓のマークアップと同じように扱われることになります。

＜memo＞
ASCII alpha
https://infra.spec.whatwg.org/#ascii-alpha


〓20〓タグ名に数字を利用したエラーとなる例
＜コード＞
<42></42>

〓21〓〓20〓の解釈
＜コード＞
&lt;42><!--42-->