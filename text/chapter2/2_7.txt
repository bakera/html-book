＜タイトル＞
コメント
＜本文＞
HTMLにはコメントを書くこともできます。コメントは、ソースコード中では読むことができますが、原則として表示などには影響しません。

＜中見出し＞
コメントの基本書式
＜本文＞
コメントは、基本的に〓01〓のような形式になります。
<!--がコメントの開始、-->がコメントの終了を表すマークです。これらに囲まれた部分がコメントの内容となります。

〓01〓コメントの記述例
＜コード＞
<!--コメント-->

＜本文＞
コメントは表示に影響しないので、コンテンツ制作者が好きな内容を書くことができます。主に、HTMLのソースコードを読みやすくするために利用されます。ソースコード内のパーツの区切りを示したり、div要素などの終了タグがどの開始タグに対応するのかを書いたりできます〓02〓。
コメントは要素ではありません。コメントの中に含まれるテキストはテキストノードではなく、コメントノードという独自のノードとして扱われます。

＜memo＞
コメントはノードなので、DOMを通じてコメントノードの内容にアクセスできます。

＜本文＞
〓02〓コメントの利用例
＜コード＞
<!-- ヘッダー開始 -->
<div class="header">
...
<!--/header--></div>
<!-- ヘッダー終了 -->

＜中見出し＞
コメントの構文ルール
＜本文＞
コメントにはさまざまな内容を入れることができます。コメントには改行を含むことが許されるので、複数行のテキストを書くことができます〓03〓。

〓03〓複数行にわたるのコメント
＜コード＞
<!--
複数行にわたる
コメントも可能
-->

＜本文＞
コメントは空でも構いません。〓04〓は有効なコメントで、内容が空のコメントノードができます。
コメントの中に<を書くこともできます。コメントの中でタグを記述した場合はタグとはみなされず、そのままコメントノードの内容となります。よくあるパターンとしては、既存のマークアップを一時的に除外するコメントアウトに使われます〓05〓。

〓04〓空のコメント
＜コード＞
<!---->

〓05〓コメント内に<を記述した例
＜コード＞
<!--
<h1>見出し</h1>
<p>テキスト</p>
-->

＜本文＞
なお、>も書くこともできますが、>はコメントの内容の先頭に書くことができないという制限があります。〓06〓はエラーとなり、空のコメントノードが追加されます。これらはいずれも、エラー処理によって、〓07〓のようなマークアップと同じものとみなされます。

〓06〓>をコメントの先頭に記述した誤った例
＜コード＞
<!-->コメント-->
<!--->コメント-->

〓07〓ブラウザーによる〓06〓の解釈結果
＜コード＞
!---->コメント-->

＜memo＞
>をコメントの先頭に記述した場合、abrupt-closing-of-empty-comment parse errorというエラーとして扱われます。

＜memo＞
〓07〓でわかるように、〓06〓の-->部分はコメントとはみなされません。

＜中見出し＞
コメントは入れ子にできない
＜本文＞
要素とは異なり、コメントの中に他のコメントを入れ子にはできません。〓08〓はエラーとなる例です。エラーとなりますが、<!--はコメントの一部とみなされます。また、-->をコメントの中に入れようとすると、そこでコメントが終了したものとみなされます。そのため、前<!--内側というコメントノードと、後-->というテキストノードになります。

〓08〓コメントを入れ子にした例
＜コード＞
<!-- 前 <!--内側--> 後 -->

＜memo＞
入れ子にした場合、nested-comment parse errorというエラーとして扱われます。

＜本文＞
また、コメントの内容の末尾に<!-を書くこともできません。〓09〓は誤った例です。
〓09〓もコメントの中で別のコメントを入れ子にしようとしたものと解釈され、エラーとなります。

〓09〓コメント内容の末尾に<!-を記述した誤った例
＜コード＞
<!-- <!--->

＜中見出し＞
コメントの前後にスペースを挟む
＜本文＞
〓06〓や〓09〓のように、コメントの内容の先頭に>や->を書いたり、末尾に<!-を書くとエラーになります。しかし、スペースを挟めば問題ありません。〓10〓はいずれも正当なコメントです。

〓10〓スペースを挟んだ記述例
＜コード＞
<!-- >コメント -->
<!-- ->コメント -->
<!-- コメント<!- -->

＜本文＞
ただし、スペースを挟んだとしても、入れ子のコメントは書けないので、〓11〓はエラーになってしまいます。

〓11〓スペースがあってもエラーになる記述例
＜コード＞
<!-- <!-- -->

＜本文＞
コメントの前後にスペースを入れる習慣をつけておくと、エラーを避けやすくなります。「コメントの前後にスペースを入れるとよい、ただし入れ子のコメントは書けない」と覚えておくとよいでしょう。

＜中見出し＞
bogus comment
＜本文＞
過去のHTMLには、SGMLやXML由来の現在では使われていないマークが入っていることがあります。多くの場合、それらはコメントとみなすようになっています。このように、かつて使われていたマークで、現在はコメントとみなされるものをbogus commentと呼んでいます。bogus commentには以下のようなものがあります。

＜memo＞
bogusは「偽物の」という意味です。

＜小見出し＞
マーク宣言
＜本文＞
SGMLやXMLでは<!で始まる「マーク宣言（Markup Declaration）」というマークがあります。現在のHTML構文では、<!の後に特定の文字列が出現しない場合はbogus commentとして扱われます。
〓12〓の記述は、SGMLの「実体宣言」の例です。
HTML構文では、〓12〓は単なるコメントとみなされ、〓13〓のようなマークアップと同じ意味になります。

〓12〓SGMLの実体宣言の例
＜コード＞
<!ENTITY external-file SYSTEM "external.xml">

〓13〓現在のHTML構文における〓12〓の解釈
＜コード＞
<!--ENTITY external-file SYSTEM "external.xml"-->

＜小見出し＞
処理命令
＜本文＞
SGMLやXMLでは<?で始まる「処理命令（Processing Instruction）」というマークが存在します。たとえば、XMLの先頭に書かれる「XML宣言」は処理命令の一種です〓14〓。

〓14〓XML宣言の例
＜コード＞
<?xml version="1.0" encoding="UTF-8" ?>

＜本文＞
処理命令は、XML構文では意味を持ちますが、HTML構文では単にコメントとみなされます。つまり、〓14〓は〓15〓のようなコメントが書かれているものと解釈されます。

〓15〓HTML構文における〓14〓の処理結果
＜コード＞
<!--?xml version="1.0" encoding="UTF-8" ?-->

＜小見出し＞
CDATA区間
＜本文＞
SGMLやXMLには「CDATA区間（CDATA Section）」と呼ばれるマークがあります。たとえば〓16〓のように書きます。

〓16〓CDATA区間の記述例
＜コード＞
<![CDATA[
<h1>CDATAのサンプル</h1>
<p>XML構文ではタグは解釈されず、テキストとみなされます</p>
]]>

＜本文＞
タグは解釈されず、すべてそのままのテキストとみなされます。また、コメントや文字参照も解釈されません。
実際にXML構文として〓16〓をブラウザーに解釈させると、〓17〓のように表示されます。

〓17〓XML構文で〓16〓をブラウザーで処理して表示した例
17.png

＜memo＞
CDATA区間では、<を&lt;とエスケープすることなく、<をそのまま記述できます。この機能を利用して、XHTMLではscript要素の中にCDATA区間を使うケースがありました。

＜本文＞
HTML構文では、svg要素やmath要素のような、XMLを記述するコンテキストで出現した場合、XMLのCDATA区間として解釈されます。つまり、〓17〓で示したような結果が得られます。
そうではなく、一般的なHTMLの要素の中では、CDATA区間は使えません。CDATA区間が出現した場合はエラーとなり、bogus commentとして処理されます。
〓16〓の例をHTML構文で解釈すると、〓18〓のようなマークアップと等価になります。

＜memo＞
この場合、cdata-in-html-content errorというエラーになります。

〓18〓HTML構文で〓16〓をブラウザーで処理した結果
＜コード＞
<!--[CDATA[
<h1-->CDATAのサンプル
<p>XML構文ではタグは解釈されず、テキストとみなされます</p>
]]>

＜小見出し＞
不正な終了タグ
＜本文＞
タグ名は「ASCII英字（ASCII alpha）」で始めなければなりません。
たとえば、〓19〓のように英字ではなく数字を終了タグ名に使用すると、これはエラーとなります。エラー処理の結果、終了タグはbogus commentとみなされてコメントとして扱われます〓20〓。

＜memo＞
ASCII alpha
https://infra.spec.whatwg.org/#ascii-alpha

＜memo＞
タグ名のルールは開始タグ、終了タグ両方に適用されます。不正な開始タグは別のエラー処理となります。詳しくはChapter2-8を参照してください。

〓19〓終了タグ名に数字を利用したエラーとなる例
＜コード＞
</42>

〓20〓ブラウザーによる〓19〓の処理結果
＜コード＞
<!--42-->