＜タイトル＞
コメント
＜本文＞
HTMLにはコメントを書くこともできます。コメントは、ソースコード中では読むことができますが、原則として表示などには影響しません。

＜中見出し＞
コメントの基本書式
＜本文＞
コメントは、基本的に〓01〓のような形式になります。
<!--がコメントの開始、-->がコメントの終了を表すマークです。これらに囲まれた部分がコメントの内容となります。

〓01〓コメントの記述例
＜コード＞
<!--コメント-->

＜本文＞
コメントは表示に影響しないので、コンテンツ制作者は好きな内容を書くことができます。〓02〓のように、ソースコード内のパーツの区切りを明示したり、終了タグがどの開始タグに対応するのかメモしておくために利用できます

〓02〓コメントの利用例
＜コード＞
<!-- ヘッダー開始 -->
<div class="header">
...
<!--/header--></div>
<!-- ヘッダー終了 -->

＜本文＞
コメントは、DOMツリー上ではコメントノードとして扱われます。

＜memo＞
コメントは表示されませんが、DOMツリー上にはコメントノードとして存在するため、JavaScriptから内容を読み取ることができます。DOMツリーについてはChapter1-2も参照してください。

＜中見出し＞
コメントの構文ルール
＜本文＞
コメントにはさまざまな内容が記述可能です。改行を含むことも許されるため、〓03〓のように複数行のテキストを書くことができます。

〓03〓複数行にわたるコメント
＜コード＞
<!--
複数行にわたる
コメントも可能
-->

＜本文＞
コメントは空でも構いません。〓04〓は有効なコメントで、内容が空のコメントノードができます。
コメントの中に<を書くこともできます。コメントの中でタグを記述した場合はタグとはみなされず、そのままコメントノードの内容となります。よくあるパターンとしては、既存のマークアップを一時的に除外するコメントアウトに使われます〓05〓。

〓04〓空のコメント
＜コード＞
<!---->

〓05〓コメント内に<を記述した例
＜コード＞
<!--
<h1>見出し</h1>
<p>テキスト</p>
-->

＜本文＞
>も書けますが、コメント内容の先頭には記述できないという制限があります。〓06〓は構文エラーとなり、空のコメントノードが追加されます。〓06〓は、いずれもエラー処理によって、〓07〓のようなマークアップと同じものとみなされます。

〓06〓>をコメントの先頭に記述した誤った例
＜コード＞
<!-->コメント-->
<!--->コメント-->

〓07〓ブラウザーによる〓06〓の解釈結果
＜コード＞
!---->コメント-->

＜memo＞
>をコメントの先頭に記述した場合、abrupt-closing-of-empty-comment parse errorというエラーとして扱われます。

＜memo＞
〓07〓からわかるように、〓06〓の-->部分はコメントとはみなされません。

＜中見出し＞
コメントは入れ子にできない
＜本文＞
コメントは入れ子にできません。〓08〓は構文エラーとなる例です。コメントの中に<!--を入れようとすると、エラーとなりますが、エラー補正の結果としてコメントの一部とみなされます。また、-->をコメントの中に入れようとすると、そこでコメントが終了したものとみなされます。そのため、〓08〓は「前<!--内側」というコメントノードと、「後-->」というテキストノードになります。

〓08〓コメントを入れ子にした例
＜コード＞
<!-- 前 <!--内側--> 後 -->

＜memo＞
入れ子にした場合、nested-comment parse errorというエラーとして扱われます。

＜本文＞
また、コメントの内容の末尾に<!-を書くこともできません。〓09〓はコメントを入れ子にしようとしたものと解釈され、構文エラーとなります。

〓09〓コメント内容の末尾に<!-を記述した誤った例
＜コード＞
<!-- <!--->

＜中見出し＞
コメントの前後にスペースを挟む
＜本文＞
〓06〓や〓09〓のように、コメントの内容の先頭に>や->を書いたり、末尾に<!-を書くとエラーになります。しかし、スペースを挟めば問題ありません。〓10〓はいずれも正当なコメントです。

〓10〓スペースを挟んだ記述例
＜コード＞
<!-- >コメント -->
<!-- ->コメント -->
<!-- コメント<!- -->

＜本文＞
ただし、スペースを挟んだとしても、入れ子のコメントは書けないので、〓11〓は構文エラーとなります。

〓11〓スペースがあってもエラーになる記述例
＜コード＞
<!-- <!-- -->

＜本文＞
コメントの前後にスペースを入れる習慣をつけておくと、エラーを避けやすくなります。「コメントの前後にスペースを入れるとよい、ただし入れ子のコメントは書けない」と覚えておくとよいでしょう。

＜中見出し＞
bogus comment
＜本文＞
HTML構文の場合、SGMLやXMLで使われる宣言などのマークのほとんどは、元の意味通りには解釈されず、構文エラーとなります。そして、エラー処理の結果、コメントとみなされます。このように、マークがコメントとして処理されたものをbogus commentと呼びます。〓12〓はbogus commentとなるマークの例です。

＜memo＞
bogusは「偽物の」という意味です。

〓12〓bogus commentとなるマークの例
＜コード＞
<!-- 実体宣言 -->
<!ENTITY external-file SYSTEM "external.xml">
<!-- XML宣言 -->
<?xml version="1.0" encoding="UTF-8"?>
<!-- xml-stylesheet処理命令 -->
<?xml-stylesheet type="text/xsl" href="basic.xsl" ?> 
<!-- CDATA区間 -->
<![CDATA[<h1>CDATAのサンプル</h1>]]>

＜本文＞
これらは〓13〓のように解釈されます。
 
〓13〓現在のHTML構文における〓12〓の解釈
＜コード＞
<!-- 実体宣言 -->
<!--ENTITY external-file SYSTEM "external.xml"-->
<!-- XML宣言 -->
<!--xml version="1.0" encoding="UTF-8"-->
<!-- xml-stylesheet処理命令 -->
<!--xml-stylesheet type="text/xsl" href="basic.xsl"--> 
<!-- CDATA区間 -->
<!--[CDATA[<h1-->CDATAのサンプル</h1>]]>

＜本文＞
XML構文の場合、〓12〓のマークはいずれもXMLのマークですので、本来の意味通りに解釈されます。
HTML構文の例外として、svg要素とmath要素の中のCDATA区間はbogus commentとはならず、CDATA区間として解釈されます。

＜memo＞
正確には、HTMLの名前空間に属さない要素の中ではCDATA区間が解釈されるというルールです。詳細はHTML仕様の「13.2.5.42 Markup declaration open state」を参照してください。
https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state

＜本文＞
<![CDATA[で始まり、]]>で終わるCDATA区間の中では、マークは解釈されず、すべて単なるテキストとみなされます。〓14〓はsvg要素の中でCDATA区間を利用した例です。

〓14〓svg要素の中でのCDATA区間の記述例
＜コード＞
<svg width="20cm" height="2cm" viewBox="0 0 1000 40">
  <text>
  <![CDATA[
  <h1>CDATAのサンプル</h1>
  <p>XML構文ではタグは解釈されず、テキストとみなされます</p>
  ]]>
  </text>
</svg>

＜本文＞
実際に〓14〓をブラウザーに解釈させると、〓15〓のように表示され、CDATA区間が適切に扱われていることがわかります。

〓15〓〓14〓をブラウザーで表示した例
＜囲み＞
<h1>CDATAのサンプル</h1> <p>XML構文ではタグは解釈されず、テキストとみなされます</p>
＜/囲み＞

＜memo＞
CDATA区間がscript要素の中に含まれている場合は、また扱いが異なります。この場合、全体がそのままの文字列と解釈され、<![CDATA[という文字列も込みでそのままスクリプトエンジンに送られます。Chapter3-12も参照してください。

＜本文＞
このほか、終了タグのタグ名に不正な文字が使用されてい場合もbogus commentとして処理されます。

＜memo＞
終了タグのタグ名が不正な場合のエラー処理は、Chapter2-8の「タグ名に使用できる文字」を参照してください。
