＜タイトル＞
URL
＜リード＞
HTMLの属性には、属性値としてURLを指定するものが多数あります。URLについては既にChapter1-5で説明しましたが、ここではURLのさまざまな形式と、属性値として指定する際の注意点を説明します。

＜中見出し＞
絶対URLと相対URL
＜本文＞
属性の中には、値としてURLを指定するものがあります。代表例はa要素のhref属性です〓01〓。

〓01〓href属性の記述例（絶対URL）
＜コード＞
<a href="https://example.com/foo/bar.html">bar</a>

＜本文＞
スキームから始まる形式のURLは、absolute-URL stringとして定義されているもので、「絶対URL（absolute URL）」と呼ばれます。〓01〓は絶対URLの記述例です。
一方、relative-URL stringとして定義されている形式もあり、「相対URL（relative URL）」と呼ばれます。属性にURLを指定する場合、相対URLを使うこともできます〓02〓。

〓02〓相対URLの記述例
＜コード＞
<a href="../bar.html">bar</a>

＜本文＞
相対URLは、「基準URL（base URL）」からの相対位置を示すものです。基準URLはbase要素で指定できますが、base要素による指定がない場合は現在のURLが基準URLとなります。
相対URLは、さらに以下のような種類があります。

・「スキーム相対URL（scheme relative URL）」
・「パス絶対URL（path absolute URL）」
・「パス相対URL（path relative URL）」

＜小見出し＞
スキーム相対URL
＜本文＞
スキーム相対URLは、絶対URLからスキームと:を取り除いたもので、URL Standardではscheme-relative-URL stringとして定義されています。先頭が//で始まり、ホスト名が続きます。たとえば、〓03〓のようになります。

〓03〓スキーム相対URLの記述例
＜コード＞
//example.com/foo/bar.html

＜本文＞
スキーム相対URLを使用した場合、スキームは基準URLと同じものとみなされます。〓03〓の例は、基準URLのスキームがhttpsならばhttps://example.com/foo/bar.htmlに、httpならばhttp://example.com/foo/bar.htmlと同じになります。

＜小見出し＞
パス絶対URL
＜本文＞
パス絶対URLは、スキーム相対URLから//とホスト名を取り除いたもので、URL Standardではpath-absolute-URL stringとして定義されています。先頭が/で始まり、パスの記述が続きます〓04〓。

〓04〓パス絶対URLの記述例
＜コード＞
/foo/bar.html

＜本文＞
パス絶対URLを使用した場合、スキームとホスト名は基準URLと同じものとみなされます。
名前に「絶対」とありますが、これはURL全体が絶対という意味ではなく、パス部分が絶対パスで書かれているという意味です。パス絶対URLは絶対URLではなく、相対URLの一種です。

＜小見出し＞
パス相対URL
＜本文＞
パス相対URLは、先頭が/で始まらないパスの記述で、URL Standardではpath-relative-URL stringとして定義されています〓05〓。

〓05〓パス相対URLの記述例
＜コード＞
foo/bar.html

＜本文＞
パス相対URLを使用した場合、スキームとホスト名は基準URLと同じとみなされ、基準URLからの相対パスとして解釈します。
パスの/で区切られたそれぞれの部分を「URLパスセグメント（URL path segment）」と呼びます。URL StandardではURL-path-segment stringとして定義されています。〓05〓の例ではfooとbar.htmlがURLパスセグメントにあたります。
特殊なURLパスセグメントとして、現在と同じ階層を示す.（「単一ドットパスセグメント（single-dot path segment）」）と、親階層を示す..（「二重ドットパスセグメント（double-dot path segment）」）があります。
パス相対URLでこれらを使用すると、現在の階層や親階層を指定できます。たとえば、基準URLのパスが/foo/bar/baz.htmlであるとき、以下のようになります。

・./ → /foo/bar/
・../ → /foo/
・../../ → /
・./baz2.html → /foo/bar/baz2.html
・../baz2.html → /foo/baz2.html

＜中見出し＞
URLに使える文字とパーセントエンコード
＜本文＞
URLに使える文字は、「URLコードポイント（URL code points）」として定められています。具体的には、次の文字になります。

・ASCII英数字
・記号類：!、$、&、'、(、)、*、+、,、-、.、/、:、;、=、?、@、_、~
・U+00A0〜U+10FFFDのUnicode文字。ただし、「サロゲート(surrogates)」と「非文字(noncharacters)」を除く

＜本文＞
括弧「(および)」が使えることに注意してください。メールなどで文中のURLがリンクになるような仕組みがありますが、「(https://example.com)」と書くと、末尾の)がURLの一部とみなされることがあります。不等号「<および>」はURLに使用できないため、URLを囲みたい場合は<https://example.com>のように不等号を使うと誤認識を防げます。

＜小見出し＞
パーセントエンコード
＜本文＞
URLに使用できない文字や、特別な意味に解釈される文字は、「パーセントエンコードバイト（percent-encoded bytes）」として記述できます。文字をパーセントエンコードバイトに変換することを「パーセントエンコード（percent-encode）」といいます。「URLエンコード」、「パーセントエンコーディング」などと呼ばれることもあります。
パーセントエンコードバイトは、%に続いて2桁の16進数で文字コードを表記したものです。たとえば、<は%3C、>は%3Eとなります。%文字そのものを書きたい場合は、%25と記述します。
非ASCII文字をパーセントエンコードする際には、原則としてUTF-8で符号化して扱います。たとえば、「日本語」という文字列の場合、UTF-8で符号化すると以下のようになります。

・「日」(U+65E5) → E6 97 A5
・「本」(U+672C) → E6 9C AC
・「語」(U+8A9E) → E8 AA 9E

これをパーセントエンコードすると〓06〓のようになります。

〓06〓パーセントエンコードバイトの例
＜コード＞
%E6%97%A5%E6%9C%AC%E8%AA%9E

＜小見出し＞
パーセントデコード
＜本文＞
パーセントエンコードされた文字を元に戻すことを「パーセントデコード（percent-decode）」と呼びます。パーセントデコードの処理では、%に続いて2桁の16進数と解釈できる文字が出現した場合、それを元の文字に戻します。たとえば、%2Fは/となります。
仕様上、%が単独で出現したり、後ろ2文字が16進数と解釈できない場合は、そのまま%という文字とみなすことになっています。たとえば、%xxxという文字列は、そのまま%xxxと解釈されます。しかし、ウェブサーバーやプロキシーの中には、%が単独で出現すると"400 bad request"エラーを返すものもあります。
パーセントエンコード・デコードの処理の詳細については、URL Standardを参照してください。

＜memo＞
1.3. Percent-encoded bytes
https://url.spec.whatwg.org/#percent-encoded-bytes

＜小見出し＞
&を含むURLを属性値に記述する場合
＜本文＞
URLのクエリーには&が含まれることがあります。前述のように&はURLに使える文字であり、URLの中に出現しても問題ありません。しかし、&はHTMLの文字参照に使用する文字でもあるため、&を含むURLを属性値に記述するときは、&amp;と書く必要があります〓07〓。
文字参照についてはChapter2-6で詳しく説明します。

〓07〓&を含むURLを属性値に記述する例
＜コード＞
<!-- foo.php?name=a&value=b へのリンク-->
<a href="foo.php?name=a&amp;value=b">

＜中見出し＞
サブリソースとして利用できるURLスキーム
＜本文＞
HTMLの要素の中には、属性に「サブリソース（subresource）」のURLを指定するものもあります。サブリソースとは単独で表示されるものではない補助的なリソースのことで、HTMLに埋め込まれるメディア、CSSファイル、JavaScriptファイルなどが該当します。
たとえば、img要素のsrc属性に画像のURLを指定すると、HTML文書の中に画像を埋め込んで表示できます〓08〓。

〓08〓属性にサブリソースを利用した例
＜コード＞
<img src="https://example.com/foo.png" alt="foo">

＜本文＞
属性値にはURLであれば何でも指定できますが、URLのスキームによっては、サブリソースとして利用できない場合があります。
URLで示されるリソースを取得することを「フェッチ（Fetch）」といい、リソース取得時のルールはFetch Standardで定められています。
リソースの取得が可能なスキームを「Fetchスキーム（fetch scheme）」と呼びます。Fetchスキームに該当するURLは、サブリソースとして利用可能です。以下のスキームがFetchスキームとされています。

・http
・https
・file
・about
・blob
・data

＜memo＞
Fetch Living Standard
https://fetch.spec.whatwg.org/

＜小見出し＞
httpおよびhttpsスキーム
＜本文＞
httpやhttpsは、ウェブで一般的に利用されるものです。通信を行い、データをダウンロードすることでリソースを取得します。

＜小見出し＞
fileスキーム
＜本文＞
fileスキームは、ローカルファイルを指すURLです。この場合、ローカルのファイルシステムからリソースを取得します。

＜小見出し＞
aboutスキーム
＜本文＞
aboutスキームがフェッチ可能なものはabout:blankのみです。この場合、空のリソースが取得されます。その他の場合、たとえばabout:configなどは、サブリソースとして用いることはできません。

＜小見出し＞
blobスキーム
＜本文＞
blobスキームは、JavaScriptで生成したデータをサブリソースとして利用できるようにURLを与えたものです。JavaScriptによってメモリー上に置かれたデータをリソースとして参照します。

＜小見出し＞
dataスキーム
＜本文＞
dataスキームは、データURLを表します。データURLとは、URLの中にデータを直接表現するもので、Fetch仕様で定義されています。
〓09〓は、データURLを用いてSVG画像を埋め込んだ例です。
MIMEタイプの後に、データURLとしてパーセントエンコーディングされたSVGが記載されています。また、データURLには、Base64エンコードを行ってバイナリーデータを埋め込むことも可能です。

〓09〓データURLの記述例
＜コード＞
<img src="data:image/png,base64,[base64エンコードしたバイナリーデータ]" alt="">

＜小見出し＞
リソースを取得できないスキームの例
＜本文＞
Fetchスキーム以外のURLのスキームは、リソースを取得できないため、サブリソースとして利用できません。
たとえば、mailtoスキームはメール送信先のメールアドレスを示します。多くのブラウザーでは、mailtoスキームのURLへのナビゲーションが発生すると、メーラーを起動しようとします。
同様に、javascriptスキームのURLへのナビゲーションが発生すると、JavaScriptが実行されます。
またｍ、img要素のsrc属性に指定した場合、多くのブラウザーは壊れた画像のアイコンを表示します。これらのURLはサブリソースとして利用できません〓10〓。

〓10〓リソースを取得できないURLの記述例
＜コード＞
<a href="mailto:foo@example.com">foo@example.com</a>
<a href="javascript:alert(1)">alert</a>
<img src="mailto:foo@example.com" alt="foo@example.com">
<img src="javascript:alert(1)" alt="alert">
