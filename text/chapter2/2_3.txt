＜タイトル＞
URLの応用
＜リード＞
HTMLの属性には、属性値としてURLを指定するものが多数あります。URLについては既にChapter1-5で説明しましたが、ここではURLのさまざまな形式と、属性値として指定する際の注意点を説明します。

＜中見出し＞
絶対URLと相対URL
＜本文＞
属性の中には、値としてURLを指定するものがあります。代表例はa要素のhref属性です〓01〓。

〓01〓絶対URLをhref属性に記述した例
＜コード＞
<a href="https://example.com/foo/bar.html">bar</a>

＜本文＞
スキームから始まる形式のURLは、「絶対URL（absolute URL）」といいます。〓01〓は絶対URLで記述した例です。
一方で、スキームで始まらない形式のURLを「相対URL（relative URL）」といいます。属性にURLを指定する場合、相対URLを使うこともできます〓02〓。

＜memo＞
正確には、「absolute URL」「relative URL」はそれぞれ、「absolute-URL string」「relative-URL string」としてURL Standardで定義されています。
https://url.spec.whatwg.org/#absolute-url-string

〓02〓相対URLをhref属性に記述した例
＜コード＞
<a href="../bar.html">bar</a>

＜本文＞
相対URLは、「基準URL（base URL）」からの相対位置を示すものです。基準URLはbase要素で指定できますが、base要素による指定がない場合は現在のURLが基準URLとなります。
相対URLには、さらに以下のような種類があります。

・「スキーム相対URL（scheme relative URL）」
・「パス絶対URL（path absolute URL）」
・「パス相対URL（path relative URL）」

＜小見出し＞
スキーム相対URL
＜本文＞
スキーム相対URLは、絶対URLからスキームと:を取り除いたもので、先頭が//で始まり、ホスト名が続きます〓03〓。

＜memo＞
スキーム相対URLは、URL Standardでは「scheme-relative-URL string」として定義されています。

〓03〓スキーム相対URLの例
＜コード＞
//example.com/foo/bar.html

＜本文＞
スキーム相対URLを使用した場合、スキームは基準URLと同じものとみなされます。〓03〓の例は、基準URLのスキームがhttpsならばhttps://example.com/foo/bar.htmlに、httpならばhttp://example.com/foo/bar.htmlと同じになります。

＜小見出し＞
パス絶対URL
＜本文＞
パス絶対URLは、スキーム相対URLから//とホスト名を取り除いたもので、先頭が/で始まり、パスの記述が続きます〓04〓。

＜memo＞
パス絶対URLは、URL Standardでは「path-absolute-URL string」として定義されています。

〓04〓パス絶対URLの例
＜コード＞
/foo/bar.html

＜本文＞
パス絶対URLを使用した場合、スキームとホスト名は基準URLと同じものとみなされます。

＜memo＞
パス絶対URLは名前に「絶対」とついていますが、絶対URLではなく、相対URLの一種です。パス部分が絶対パスで書かれていますが、URL全体としては相対URLとなります。

＜小見出し＞
パス相対URL
＜本文＞
パス相対URLは、先頭が/で始まらないパスです〓05〓。

＜memo＞
パス相対URLは、URL Standardでは「path-relative-URL string」として定義されています。

〓05〓パス相対URLの例
＜コード＞
foo/bar.html

＜本文＞
パス相対URLを使用した場合、スキームとホスト名は基準URLと同じとみなされ、基準URLからの相対パスとして解釈します。
パスの/で区切られたそれぞれの部分を「URLパスセグメント（URL path segment）」といいます。〓05〓の例ではfooとbar.htmlがURLパスセグメントにあたります。

＜memo＞
URLパスセグメントは、URL Standardでは「URL-path-segment string」として定義されています。

＜本文＞
特殊なURLパスセグメントとして、現在と同じ階層を示す.（「単一ドットパスセグメント（single-dot path segment）」）と、親階層を示す..（「二重ドットパスセグメント（double-dot path segment）」）があります。
パス相対URLでこれらを使用すると、現在の階層や親階層を指定できます。たとえば、基準URLのパスが/foo/bar/baz.htmlであるとき、以下のようになります。

・./ → /foo/bar/
・../ → /foo/
・../../ → /
・./baz2.html → /foo/bar/baz2.html
・../baz2.html → /foo/baz2.html

＜中見出し＞
URLに使える文字とパーセントエンコード
＜本文＞
URLに使える文字は、「URLコードポイント（URL code points）」として定められています。具体的には、次の文字になります。

・ASCII英数字
・記号類：!、$、&、'、(、)、*、+、,、-、.、/、:、;、=、?、@、_、~
・U+00A0〜U+10FFFDのUnicode文字。ただし、「サロゲート(surrogates)」と「非文字(noncharacters)」を除く

＜memo＞
括弧「(」および「)」がURLに使える文字であることに注意してください。メールなどで文中のURLがリンクになるような仕組みがありますが、「(https://example.com)」と書くと、末尾の)がURLの一部とみなされることがあります。不等号「<」および「>」はURLに使用できないため、URLを囲みたい場合は<https://example.com>のように不等号を使うと誤認識を防げます。

＜小見出し＞
パーセントエンコード
＜本文＞
URLに使えない文字や、特別な意味に解釈される文字は、「パーセントエンコードバイト（percent-encoded bytes）」として記述できます。文字をパーセントエンコードバイトに変換することを「パーセントエンコード（percent-encode）」といいます。

＜memo＞
パーセントエンコードは、「URLエンコード」、「パーセントエンコーディング」などということもあります。

＜本文＞
パーセントエンコードバイトは、%に続いて2桁の16進数で文字コードを表現します。たとえば、<は%3C、>は%3Eとなります。%文字そのものを書きたい場合は、%25と記述します。
非ASCII文字をパーセントエンコードする際には、原則としてUTF-8で符号化して扱います。たとえば、「日本語」という文字列の場合、UTF-8で符号化すると以下のようになります。

・「日」(U+65E5) → E6 97 A5
・「本」(U+672C) → E6 9C AC
・「語」(U+8A9E) → E8 AA 9E

これをパーセントエンコードすると〓06〓のようになります。

〓06〓パーセントエンコードバイトの例
＜コード＞
%E6%97%A5%E6%9C%AC%E8%AA%9E

＜memo＞
文字の符号化、文字エンコーディングについてはChapter2-5で説明します。

＜小見出し＞
パーセントデコード
＜本文＞
パーセントエンコードされた文字を元に戻すことを「パーセントデコード（percent-decode）」といいます。パーセントデコードの処理では、%に続いて2桁の16進数と解釈できる文字が出現した場合、それを元の文字に戻します。たとえば、%2Fは/となります。

＜memo＞
仕様上、%が単独で出現したり、後ろ2文字が16進数と解釈できない場合は、そのまま%という文字とみなすことになっています。たとえば、%xxxという文字列は、そのまま%xxxと解釈されます。
ただし、一部のウェブサーバーやプロキシーの実装では、%が単独で出現すると400 bad requestとしてエラーを返すものがあります。

＜本文＞
パーセントエンコード・デコードの処理の詳細については、URL Standardを参照してください。

＜memo＞
1.3. Percent-encoded bytes
https://url.spec.whatwg.org/#percent-encoded-bytes

＜小見出し＞
&を含むURLを属性値に記述する場合
＜本文＞
URLのクエリーには&が含まれることがあります。前述のように&はURLに使える文字であり、URLの中に出現しても問題ありません。しかし、&はHTMLの文字参照に使用する文字でもあるため、&を含むURLを属性値に記述するときは、&amp;と書く必要があります〓07〓。

＜memo＞
文字参照についてはChapter2-6で詳しく説明します。

＜本文＞
〓07〓&を含むURLを属性値に記述する例
＜コード＞
<a href="foo.php?name=a&amp;value=b">

＜中見出し＞
サブリソースとURLスキーム
＜本文＞
HTMLの要素の中には、属性に「サブリソース（subresource）」のURLを指定するものもあります。サブリソースとは、起点となるHTMLファイル以外のリソースで、HTMLに埋め込まれる画像などのメディアファイル、CSSファイル、JavaScriptファイルなどが該当します。
たとえば、img要素のsrc属性に画像のURLを指定すると、HTML文書の中に画像を埋め込んで表示できます〓08〓。

〓08〓属性にサブリソースを利用した例
＜コード＞
<img src="https://example.com/foo.png" alt="foo">

＜本文＞
〓08〓のURLのスキームはhttpsであり、サブリソースとして利用可能な「Fetchスキーム（fetch scheme）」に分類されます。Fetch Standardでは、以下のスキームをFetchスキームと定義しています。

・http、https：一般的に利用されるウェブを経由した取得
・file：ローカルファイルを指定して取得
・about：about:blankとして空のリソースを取得
・blob：JavaScriptでなどで生成したデータURL
・data：インラインに埋め込まれるデータURL

＜memo＞
それぞれのスキームの詳細な処理については、Fetch Standardの「4.2. Scheme fetch」を参照してください。
https://fetch.spec.whatwg.org/#scheme-fetch

＜小見出し＞
Fetchスキーム以外のスキーム
＜本文＞
Fetchスキーム以外のURLのスキームは、リソースを取得できないため、サブリソースとして利用できません。
たとえば、mailtoスキームやjavascriptスキームは、img要素のsrc属性に指定した場合、多くのブラウザーは壊れた画像のアイコンを表示します。これらのスキームを持つURLはサブリソースとして利用できません〓09〓。

〓09〓リソースを取得できないURLの記述例
＜コード＞
<img src="mailto:foo@example.com" alt="foo@example.com">
<img src="javascript:alert(1)" alt="alert">

＜memo＞
mailtoスキームはメール送信先のメールアドレスを示します。多くのブラウザーでは、mailtoスキームのURLへのナビゲーションが発生すると、メーラーを起動しようとします。

＜memo＞
javascriptスキームは、URLへのナビゲーションが発生すると、JavaScriptが実行されます。
