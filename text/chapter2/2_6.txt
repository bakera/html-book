＜タイトル＞
文字参照

＜リード＞
ときには、HTMLで直接記述できない文字をそのままテキストとして書きたいこともあります。ここでは、そのような場合に利用できる文字参照の仕組みについて説明します。

＜中見出し＞
文字参照の概要
＜本文＞
ときには、タグをタグとして解釈されては困ることもあります。〓01〓は、HTMLのタグの書き方を説明している文章です。

〓01〓HTMLのタグを解説するテキスト
＜コード＞
見出しの先頭に<h1>を、末尾に</h1>を入れてください

＜本文＞
これをHTMLで表現するために、単純にp要素として〓02〓のようにマークアップしてみます。これをブラウザーで表示すると〓03〓のようになってしまいます。

〓02〓〓01〓をp要素でマークアップ
＜コード＞
<p>見出しの先頭に<h1>を、末尾に</h1>を入れてください</p>

〓03〓〓02〓の表示例
03.png

＜本文＞
<h1>などの文字がタグと認識されて表示されず、意図とは異なる挙動になっています。これは、<の文字がタグを開始するマークとして認識されているためです。
このような場合には、「文字参照（character reference）」という仕組みを利用すると、文字をマークとして認識されないようにできます。〓02〓は、〓04〓のように書くことができます。

〓04〓〓02〓を表示する記述例
＜コード＞
<p>見出しの先頭に&lt;h1>を、末尾に&lt;/h1>を入れてください</p>

＜本文＞
<という文字の代わりに、&lt;という文字列を書きました。これが文字参照です。&lt;という記述は、<という文字を参照します。そして<を直接書いた場合と異なり、マークとして解釈されることはありません。
このように、特別な意味を持つ文字を書いて、その意味を失わせることを「エスケープ（escape）」といいます。
文字参照の方法には大きく2種類あります。1つが「名前付き文字参照（named character reference）」、もう1つが「数値文字参照（numeric character reference）」です。

＜中見出し＞
名前付き文字参照
＜本文＞
名前付き文字参照は、文字を名前で参照する方法です。先ほど紹介した&lt;は名前付き文字参照の例で、lt;の部分が名前です。
名前付き文字参照には、比較的覚えやすい名前が使われています。たとえばltは「less than」の略で、小なり記号<に対応するといった具合です。わかりやすい名前が付いている一方で、すべての文字に対応しているわけではありません。
HTMLでは、名前付き文字参照が延べ2230種類定義されています。仕様でこの一覧を見ることができます。

＜memo＞
2230種類は、同じ文字に別名が付いているものと、セミコロンの有無が両方定義されているものも含んだ延べ数です。

＜memo＞
12.5 Named character references
https://html.spec.whatwg.org/multipage/named-characters.html

＜小見出し＞
大文字小文字の区別
＜本文＞
名前付き文字参照では、名前の大文字と小文字を区別します。通常、大文字と小文字の違いで別の文字を指します。たとえば、&aacute;はアクセント記号付きの小文字「á」を表しますが、&Aacute;はアクセント付き大文字「Á」を表します。
なお、よく使われるamp、lt、gt、quotについては、過去との互換性のために大文字の参照も定義されており、AMPのようにすべて大文字で書いても展開されます。ただし、Ampのように大文字と小文字の混ざったものは定義されていないので、この場合は参照されません。いずれにせよ、互換性のためのものなので、小文字で記述するべきです。

＜小見出し＞
末尾のセミコロンを忘れた場合
＜本文＞
名前付き参照は、原則として&で始まり;で終わります。末尾にはセミコロンが必要で、これを忘れるとエラーとなります。
ただし、一部の名前については、名前付き文字参照の一覧にセミコロンのないものが登録されています。この場合、例外的にセミコロンなしで文字参照として展開されます。
たとえば、Abreve;の場合、Abreveは登録されていないため、セミコロンを書き忘れて&Abreveとすると展開されず、&Abreveという文字列がそのまま表示されます。
それに対し、たとえばamp;の場合、セミコロンがないampも登録されています。そのため、&ampと書いてセミコロンを書き忘れても、エラー処理の結果として文字参照が有効になり、&に展開されます。ただし、属性値の中ではエラー処理の結果が異なり、セミコロンのない文字参照は無効となって、書いたままの文字列&ampとして解釈されます〓05〓。
属性値のエラー処理が特別扱いされているのは、URLに使用される&のエスケープのし忘れで問題を起こすことがあるためです。

＜memo＞
具体的には“missing-semicolon-after-character-reference parse error”となります。具体的には以下を参照してください。
13.2.5.73 Named character reference state 
https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state

〓05〓セミコロンの有無による処理例
表
書いた内容	処理結果	備考
<p>&amp;</p>	<p>&</p>	展開される
<p>&amp</p>	<p>&</p>	エラーだが、エラー処理の結果として展開される
href="&amp;"	href="&"	展開される
href="&amp"	href="&amp"	エラー。属性値中では展開されない

＜本文＞
URLのクエリー文字列の区切りに&を使っているケースはよくあります。たとえば、/foo?type=square&degree=30というURLがあったとしましょう。このURLをhref属性に書く場合、本来は、〓06〓のように&を&amp;にエスケープしなければなりません。しかし、残念ながら、多数の人がエスケープを忘れて〓07〓のように書いてしまいます。

〓06〓URL内にある&をhref属性に書く場合の例
＜コード＞
<a href="/foo?type=square&amp;degree=30">

〓07〓URL内にある&をhref属性に書いた間違った例
＜コード＞
<a href="/foo?type=square&degree=30">

＜本文＞
ここで、属性値中の&はどう扱われるでしょうか。実はdegという名前付き文字参照が定義されており、°という文字を参照しています。もし、エラー処理によって文字参照を展開するならば、〓08〓のようになってしまいます。

〓08〓URL内にある&の解釈
＜コード＞
<a href="/foo?type=square°ree=30">

＜本文＞
このように、属性値のURLに含まれる&をエスケープし忘れると、予期しない動作になります。エスケープを忘れる人が後を絶たたないため、現在のHTMLでは、属性値の中のセミコロンなしの文字参照は置換しないことにしています。
いずれにしても、これはエラー処理の結果にすぎません。セミコロンを書かないのは正しい書き方ではありませんし、トラブルの原因にもなりますので、記述し忘れないようにしましょう。

＜小見出し＞
数値文字参照
＜本文＞
数値文字参照は、名前ではなく数値によって文字を指定する方法です。文字のコードポイントを直接指定して文字を参照します。
名前付き文字参照との違いは、&の直後に#が入ることです。&#の後に数値を書き、末尾にセミコロンを書きます。
数値の表記の仕方は2つあり、それぞれ「10進数値文字参照（Decimal numeric character reference）」、「16進数値文字参照（Hexadecimal numeric character reference）」と呼ばれます。
10進数値文字参照では、&#の後にそのまま10進数のコードポイントを書きます。Unicodeスカラー値はU+003Cのように16進数で表記されるので、10進数値文字参照で書くときには10進数に直す必要があります。
16進数表記をそのまま書きたい場合は、16進数値文字参照を使用します。&#の直後にxもしくはXを書き、その後に、16進数でコードポイントを指定します。大文字小文字は問いません。

たとえば<のUnicodeスカラー値はU+003Cなので、10進数値文字参照、16進数値文字参照ではそれぞれ以下のようになります。

・&#60;
・&#x3c;

16進数値文字参照は大文字で書いてもかまいません。たとえば、以下のように書くこともできます。

・&#X3C;

＜中見出し＞
よく使われる名前付き文字参照
＜本文＞
文字参照が最もよく利用されるのは、マークに使われる文字をエスケープして意味を失わせる場合です。エスケープ目的でよく利用される名前付き文字参照は、以下の4種類です。

・&lt;→<
・&gt;→>
・&quot;→"
・&amp;→&

<はタグやコメントの開始として解釈されるため、それを防ぐためにエスケープします。
対になる>については、実はほとんどの場合にエスケープ不要です。エスケープが必要になるのは、引用符で括られていない属性値の中で出現する時くらいです。しかし運用上は、<だけをエスケープするとすわりが悪いからか、>もエスケープするケースが多いようです。
"は属性値の引用符として使われるため、"で括られた属性値の中ではエスケープする必要があります〓09〓。

〓09〓属性値内で"をエスケープした記述例
＜コード＞
<img alt="he said &quot;wait!&quot;">

＜本文＞
&は、今まさに紹介している文字参照に使用する文字です。〓10〓のようなテキストがあったとします。これをこのままHTMLに書くと〓11〓のようになります。

〓10〓&quot;を表示するテキスト例
＜コード＞
引用符で括られた属性値の中で"を書きたいときは、&quot;と書きましょう。

〓11〓〓10〓のマークアップ例
＜コード＞
<p>引用符で括られた属性値の中で"を書きたい場合は、&quot;と書きましょう。</p>

このとき、&quot;と書かれている部分は文字参照とみなされて"に展開されます。結果として〓12〓のような表示になってしまいます。
これを防ぐためには、〓13〓のように&の部分を文字参照で表現してエスケープします。

〓12〓〓10〓の表示例
12.png

〓13〓&quot;の&をエスケープ
＜コード＞
<p>引用符で括られた属性値の中で"を書きたい場合は、&amp;quot;と書きましょう。</p>

＜本文＞
なお、属性値は'で括ることもできます。その場合は属性値に含まれる'を&apos;としてエスケープします。ただし、属性値を'で括るスタイル自体が稀であるため、このエスケープはあまり使われていません。また、&apos;という文字参照は、かつてのHTML4には存在しなかったため、後述する数値文字参照を使って&#39;とすることもあります。

＜小見出し＞
入力しにくい文字に使う文字参照
＜本文＞
前述したエスケープが必要な場合を除き、文字参照の利用が必須となる場合はありません。通常、HTMLファイルはUTF-8で符号化するので、Unicodeのすべての文字をそのまま書くことができます。
しかし、表現はできても入力が難しいということもあるかもしません。たとえば、コピーライトマーク「©」は比較的よく利用されますが、環境によっては簡単に入力できないかもしれません。
このような文字にも多くの場合、文字参照が定義されています。比較的よく使われるのは、以下のようなものです。

・&copy;
・&reg;
・&nbsp;
・&endash;

とはいえ、必要のないところで文字参照を使用すると、HTMLのソースコードが長く、読みにくくなります。入力が難しくなければ、文字参照を使わずにそのまま書いたほうがよいでしょう。

＜memo＞
歴史的な理由からUTF-8を利用せず、別の文字エンコーディングを採用していることがあるかもしれません。その場合でも、数値文字参照を使えばUnicodeの文字を表現できます。 

＜コラム＞
実体参照という呼び名
＜コラム本文＞
以前のHTMLでは、名前付き文字参照のことを「文字実体参照（character entity reference）」と呼んでいました。これは、SGMLの「実体参照（entity reference）」の仕組みを利用して文字を参照するものです。
実体参照とは、主に外部で定義した「実体（entity）」を文書などから参照するものです。〓01〓はXMLで実体参照を利用している例です。

〓01〓XMLで実体参照を利用している例
＜コード＞
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE foo [
  <!ENTITY greeting "こんにちは">
]>
<foo>
  <hello>&greeting;</hello>
</foo>

＜コラム本文＞
この例では、まず文書型定義の中で「こんにちは」という実体にgreetingという名前を付けています。そして、文書の中で&greeting;のように書いて実体を参照しています。この実体参照は「こんにちは」という実体に置き換えられます。
実体は外部ファイルとしても定義できます〓02〓。

〓02〓実態を外部ファイルとして定義
＜コード＞
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE foo [
  <!ENTITY external-file SYSTEM "external.xml">
]>
<foo>
  <ext>&external-file;</ext>
</foo>

＜コラム本文＞
外部ファイルexternal.xmlを実体として、external-fileという名前を付けています。このとき、外部ファイルの内容を「外部実体（external entity）」と呼びます。文書の側に&external-file;と書くと、この外部実体を参照し、ファイルの内容がここに展開されます。
「実体」というのは参照される側で、参照する側の記述は「実体参照」であることに注意してください。実体参照を「実体」「エンティティー」と呼んでしまう混乱がしばしば見られます。
現在のHTMLでは、そもそも「実体参照」という呼び方は使われなくなっています。現在のHTMLはSGMLではないため、SGMLの機能名を使う必要もなくなったのです。