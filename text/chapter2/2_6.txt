＜タイトル＞
文字参照

＜リード＞
ときには、HTMLのタグなどをそのままテキストとして書きたいこともあります。ここでは、そのような場合に利用できる文字参照の仕組みについて説明します。

＜中見出し＞
文字参照の概要
＜本文＞
HTMLのタグについて、タグとして解釈されると困ることがあります。〓01〓は、HTMLのタグの書き方を説明している文章です。

〓01〓HTMLのタグを解説するテキスト
＜コード＞
見出しの先頭に<h1>を、末尾に</h1>を入れてください

＜本文＞
〓01〓をHTMLで表現するために、単純にp要素として〓02〓のようにマークアップしてみます。〓02〓をブラウザーで表示すると〓03〓のようになってしまいます。

〓02〓p要素で〓01〓をマークアップした例
＜コード＞
<p>見出しの先頭に<h1>を、末尾に</h1>を入れてください</p>

〓03〓ブラウザーによる〓02〓の表示例
03.png

＜本文＞
〓03〓は、<の文字がタグを開始するマークと解釈され、<h1>がテキストではなくタグと認識された結果です。
このような場合には、「文字参照（character reference）」という仕組みを利用すると、文字をマークとして認識されないようにできます。〓02〓は、〓04〓のように書くことができます。

〓04〓〓02〓を書き換えた記述例
＜コード＞
<p>見出しの先頭に&lt;h1>を、末尾に&lt;/h1>を入れてください</p>

＜本文＞
<という文字の代わりに、&lt;という文字列を書きました。これが文字参照です。&lt;という記述は、<という文字に置き換わります。<を直接書いた場合と異なり、マークとして解釈されることはありません。
このように、特別な意味を持つ文字について、特殊な書き方をすることで意味を失わせることを「エスケープ（escape）」といいます。
文字参照の方法には大きく2種類あります。1つが「名前付き文字参照（named character reference）」、もう1つが「数値文字参照（numeric character reference）」です。
いずれの文字参照も、&（アンパサンド、U+0026）で始まり、;（セミコロン、U+003B）で終わります。

＜中見出し＞
名前付き文字参照
＜本文＞
名前付き文字参照は、文字を名前で参照する方法です。先ほど紹介した&lt;は名前付き文字参照の例で、lt;の部分が名前です。

＜memo＞
HTML仕様では、名前付き文字参照の名前はセミコロンを含む形で定義されています。これは後述のエラー処理との兼ね合いです。名前付き文字参照の末尾にセミロコンを2つ書くというわけではありません。

＜本文＞
名前付き文字参照には、比較的覚えやすい名前が使われています。たとえばltは「less than」の略で、小なり記号<に対応します。
HTMLでは、名前付き文字参照が延べ2230種類定義されています。すべての文字を網羅しているわけではなく、名前付き文字参照では表現できない文字もあります。

＜memo＞
2230種類は、同じ文字に別名が付いているものと、セミコロンの有無が両方定義されているものを含んだ延べ数です。仕様に一覧があります。
12.5 Named character references
https://html.spec.whatwg.org/multipage/named-characters.html

＜小見出し＞
大文字小文字の区別
＜本文＞
名前付き文字参照では、名前の大文字と小文字を区別します。通常、大文字と小文字の違いで別の文字を指します。たとえば、&aacute;はアキュートアクセントの付いた小文字の「á」を表しますが、&Aacute;は大文字の「Á」を表します。
なお、よく使われる&amp;、&lt;、&gt;、&quot;については、過去との互換性のために大文字の参照も定義されており、&AMP;のようにすべて大文字で書いても展開されます。ただし、&Amp;のように大文字と小文字の混ざったものは定義されていないので、この場合は参照されません。いずれにせよ、互換性のためのものなので、小文字で記述するべきです。

＜小見出し＞
末尾のセミコロンがない場合のエラー処理
＜本文＞
名前付き参照の末尾にはセミコロンが存在しなければならず、これを忘れるとエラーとなります。
ただし、一部の名前付き文字参照では、セミコロンのない名前も登録されています。その場合、例外的にセミコロンなしで文字参照として展開されます。
たとえばamp;の場合、セミコロンがないampも登録されています。そのため、セミコロンを書き忘れて&ampと書いても、エラー処理の結果として文字参照が有効になり、&に展開されます。

＜memo＞
一覧に登録されていない、末尾にセミコロンのない名前（例：&Aacute）の場合は、展開されずに文字列がそのまま表示されます。

＜本文＞
ただし、属性値の中ではエラー処理の結果が異なり、セミコロンのない文字参照は無効となって、書いたままの文字列&ampとして解釈されます〓05〓。

＜memo＞
具体的には“missing-semicolon-after-character-reference parse error”となります。詳細は以下を参照してください。
13.2.5.73 Named character reference state 
https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state

〓05〓セミコロンの有無による処理例
表
書いた内容	処理結果	備考
<p>&amp;</p>	<p>&</p>	展開される
<p>&amp</p>	<p>&</p>	エラーだが、エラー処理の結果として展開される
href="&amp;"	href="&"	展開される
href="&amp"	href="&amp"	エラー。属性値中では展開されない

＜本文＞
属性値のエラー処理が特別扱いされているのは、URLに使用される&のエスケープのし忘れで問題を起こすことがあるためです。
たとえば、クエリー文字列の区切りに&を用いた/foo?type=square&degree=30というURLがあるとしましょう。このURLをhref属性に書く場合、本来は、〓06〓のように&を&amp;にエスケープしなければなりません。しかし、残念ながら、多数の人がエスケープをし忘れて〓07〓のように書いてしまっています。

〓06〓URL内にある&をエスケープしてhref属性に書いた例
＜コード＞
<a href="/foo?type=square&amp;degree=30">

〓07〓URL内にある&をエスケープせずにhref属性に書いた例
＜コード＞
<a href="/foo?type=square&degree=30">

＜本文＞
ここで、属性値中の&に続く文字列に注目すると、&degとなるのがわかります。degという名前の名前付き文字参照は存在しており、°（度、U+00B0）という文字を参照します。もしエラー処理によって文字参照を展開するならば、〓08〓のようになってしまいます。

＜memo＞
&deg;の場合、セミコロンなしのdegという名前も定義されており、属性値の外で&degという表記が現れた場合は、セミコロンを忘れていてもエラー処理によって「°」に展開されます。

〓08〓URL内にある&degの文字参照が仮に展開された場合の例
＜コード＞
<a href="/foo?type=square°ree=30">

＜本文＞
このように、属性値のURLに含まれる&をエスケープし忘れると、予期しない動作になります。エスケープを忘れる人が後を絶たないため、現在のHTMLでは、属性値の中のセミコロンなしの文字参照は置換しないことにしたのです。
いずれにしても、これはエラー処理の結果にすぎません。セミコロンを書かないのは正しい書き方ではなく、トラブルの原因にもなりますので、記述し忘れないようにしましょう。

＜中見出し＞
数値文字参照
＜本文＞
数値文字参照は、名前ではなく数値によって文字を指定する方法です。文字のコードポイントを直接指定して文字を参照します。

＜memo＞
指定する数値は、Unicodeの符号化文字集合におけるコードポイントです。文字エンコーディングの種類には依存しません。符号化文字集合と文字エンコーディングについてはChapter2-5を参照してください。

＜本文＞
名前付き文字参照との違いは、&の直後に#が入ることです。&#の後に数値を書き、末尾にセミコロンを書きます。
数値の表記の仕方は2つあり、それぞれ「10進数値文字参照（Decimal numeric character reference）」、「16進数値文字参照（Hexadecimal numeric character reference）」といいます。
10進数値文字参照では、&#の後にそのまま10進数のコードポイントを書きます。Unicodeスカラー値はU+003Cのように16進数で表記されるので、10進数値文字参照で書くときには10進数に直す必要があります。
16進数表記をそのまま書きたい場合は、16進数値文字参照を使用します。&#の直後にxもしくはXを書き、その後に、16進数でコードポイントを指定します。

たとえば、Unicodeスカラー値がU+003Cである文字<は、10進数値文字参照、16進数値文字参照ではそれぞれ以下のようになります。

・&#60;
・&#x3c;

数値文字参照では、大文字小文字を区別しません。上記の例は大文字で書くこともできます。

・&#X3C;

名前付き文字参照では、名前が定義されてない文字を表現できませんでした。それに対し、数値文字参照では、HTMLで使用できるあらゆる文字を表現できます。

＜中見出し＞
よく使われる文字参照
＜本文＞
文字参照は、主にエスケープの目的で利用されます。よく利用されるのは、以下の4種類の名前付き文字参照です。

・&lt;→<
・&gt;→>
・&quot;→"
・&amp;→&

<はタグやコメントの開始として解釈されるため、それを防ぐためにエスケープします。
対になる>は、実際にはほとんどの場合エスケープ不要です。しかし運用上は、<だけをエスケープするとすわりが悪いからか、>もエスケープするケースが多いようです。

＜memo＞
>のエスケープが必要になるのは、引用符で括られていない属性値の中で出現する場合です。ほとんどの場合、属性値は引用符で括りますから、>のエスケープは不要になります。

＜本文＞
"は属性値の引用符として使われるため、"で括られた属性値の中ではエスケープする必要があります〓09〓。

〓09〓"で括った属性値内で"をエスケープした記述例
＜コード＞
<img alt="he said &quot;wait!&quot;" src="...">

＜本文＞
なお、属性値は'で括ることもできます。その場合は属性値に含まれる'を&apos;としてエスケープします〓10〓。ただし、属性値を'で括るスタイル自体が稀であるため、このエスケープはあまり使われていません。

＜memo＞
&apos;という文字参照は、かつてのHTML4には存在しなかったため、数値文字参照を使って&#39;とすることもあります。

＜本文＞
〓10〓'で括った属性値内で'をエスケープした記述例
＜コード＞
<img alt='What&apos;s New!' src='...'>

＜本文＞
&は、今まさに紹介している文字参照に使用する文字です。〓11〓のようなテキストをそのままHTMLに書くと〓12〓のようになります。

〓11〓&を含むテキスト例
＜コード＞
アンパサンドは文字参照で&amp;と書きます。

〓12〓〓11〓のマークアップ例
＜コード＞
<p>アンパサンドは文字参照で&amp;と書きます。</p>

このとき、&amp;は文字参照とみなされて&に展開されます。結果として〓13〓のような表示になり、文意が伝わらなくなってしまいます。

〓13〓〓12〓の表示例
13.png

これを防ぐために、〓14〓のように&自身を文字参照で表現してエスケープします。

〓14〓〓12〓の&自身をエスケープした例
＜コード＞
<p>アンパサンドは文字参照で&amp;amp;と書きます。</p>

＜小見出し＞
入力しにくい文字に使う文字参照
＜本文＞
通常、HTMLファイルはUTF-8で符号化するため、Unicodeのすべての文字をそのまま書くことができます。

＜memo＞
歴史的な理由ででUTF-8を利用せず、別の文字エンコーディングを採用している場合、直接表現できない文字が存在することがあります。その場合でも、数値文字参照を使えばUnicodeの文字すべてを表現できます。 

＜本文＞
しかし、文字によっては入力が難しいこともあります。たとえば、©（コピーライトマーク、U+00A9）は比較的よく利用されますが、環境によっては簡単に入力できないかもしれません。
このような文字にも多くの場合、名前付き文字参照が定義されています。比較的よく使われるのは、以下のようなものです。

・&copy;
・&reg;
・&nbsp;
・&endash;

とはいえ、必要のないところで文字参照を使用すると、HTMLのソースコードが長く、読みにくくなります。入力が難しくなければ、文字参照を使わずにそのまま書いたほうがよいでしょう。

＜コラム＞
実体参照という呼び名
＜コラム本文＞
以前のHTMLでは、名前付き文字参照のことを「文字実体参照（character entity reference）」と呼んでいました。これは、SGMLの「実体参照（entity reference）」の仕組みを利用して文字を参照していたことに由来します。
実体参照とは、主に外部で定義した「実体（entity）」を文書などから参照するものです。〓01〓はXMLで実体参照を利用している例です。

〓01〓XMLで実体参照を利用している例
＜コード＞
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE foo [
  <!ENTITY greeting "こんにちは">
]>
<foo>
  <hello>&greeting;</hello>
</foo>

＜コラム本文＞
この例では、まず文書型定義の中で「こんにちは」という実体にgreetingという名前を付けています。文書の中で&greeting;のように書くと、その箇所が「こんにちは」という実体に置き換えられます。
実体は外部ファイルとしても定義できます〓02〓。

〓02〓実体を外部ファイルとして定義
＜コード＞
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE foo [
  <!ENTITY external-file SYSTEM "external.xml">
]>
<foo>
  <ext>&external-file;</ext>
</foo>

＜コラム本文＞
外部ファイルexternal.xmlを実体として、external-fileという名前を付けています。このとき、外部ファイルの内容を「外部実体（external entity）」と呼びます。文書の側に&external-file;と書くと、外部実体を参照し、ファイルの内容がここに展開されます。
「実体」というのは参照される側で、参照する側の記述は「実体参照」であることに注意してください。実体参照を「実体」「エンティティー」と呼んでしまう混乱がしばしば見られます。
現在のHTMLはSGMLではないため、SGMLの機能名を使う必要もなく、「実体参照」という呼び方はもはや使われていません。