＜タイトル＞
グローバル属性
＜リード＞
HTMLの個々の要素は異なる属性を持ちますが、属性の中には、複数の要素に共通して利用できるものもあります。ここでは、すべての要素で共通して利用できる「グローバル属性（Global attributes）」について説明します。

＜中見出し＞
グローバル属性とは
＜本文＞
グローバル属性とは、すべてのHTML要素に共通して利用できる属性です。HTML仕様が定義しているもののほかに、他の仕様で定義されているものもあります。WAI-ARIA仕様で規定されているrole属性やaria-*属性（Chapter4-2で詳しく説明します）や、XML仕様で規定されているxml:lang属性やxml:space属性などが典型例です。
ここでは、グローバル属性のうち代表的なものを紹介します。ここで紹介していない属性については、仕様を参照してください。

＜memo＞
text/htmlではXML属性は効果を及ぼすものではなく、単に無意味です。

＜memo＞
3.2.6 Global attributes
https://html.spec.whatwg.org/multipage/dom.html#global-attributes

＜中見出し＞
title属性
＜本文＞
グローバル属性としてのtitle属性は、要素に対するヒントや助言の情報を表します。属性値は任意のテキストで、要素に対するヒントや助言となり得る単語や文章を指定します。
一部の要素ではtitle属性が特別な意味を持ちます。abbr要素、dfn要素、link要素、特定の属性が指定されたinput要素などが該当します。詳細はそれぞれの要素のセクションを参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
ウェブアクセシビリティの観点では、title属性の値はユーザーに伝わらない可能性があることに注意してください。ほとんどのブラウザーは、要素にマウスポインターを乗せたときにtitle属性の値をツールチップとして表示します。タッチスクリーンやキーボードで操作している場合、ツールチップを表示できないことがあります。
スクリーンリーダーでは、状況によって、title属性の値を「アクセシブルな名前（accessible name）」として扱うことがあります。たとえばimg要素の場合、alt属性があればalt属性の値を読み上げますが、alt属性が存在しない場合、title属性の値を読み上げます。input要素にlabel要素が結び付けられていない場合にも、同様にtitle属性の値が読み上げられます。

＜memo＞
アクセシブルな名前は、HTML Accessibility API Mappings仕様のAccessible Name and Description Computationに基づいて決定されます。 
https://w3c.github.io/html-aam/#accessible-name-and-description-computation

＜中見出し＞
lang属性
＜本文＞
lang属性は、指定された要素の言語（自然言語）を指定します。lang属性の値には、主に以下のような用途があります。

・言語によって適切なフォントやグリフを選択する（中国語繁体字、簡体字、日本語で漢字の字形が異なる場合など）
・言語によって引用符を選択する（Chapter3-4のq要素も参照ください）
・スクリーンリーダーの音声合成エンジンを選択する
・翻訳機能を利用する際、翻訳元の言語を特定する

属性値には、BCP47の「言語タグ（language tag）」を指定します。言語タグの詳しい説明は、W3C文書「HTMLとXMLにおける言語タグ」を参照してください。

＜memo＞
HTMLとXMLにおける言語タグ
https://www.w3.org/International/articles/language-tags/

＜本文＞
日本語を表す言語タグとしては、jaもしくはja-JPが利用されます。言語タグは「サブタグ（subtag）」 を組み合わせて構成されており、ja-JPの場合にはjaの部分が「言語（language）」サブタグ、JPの部分が「地域（region）」サブタグです。ほかによく見るものとして「用字（script）」サブタグがあり、たとえば、中国語簡体字を表すzh-HansのHansの部分が該当します。2つ以上のサブタグを使う場合、ハイフン-でつなぎます。
言語タグの例としては、以下のようなものがあります。

・en（英語）
・en-GB（イギリス英語）
・en-US（アメリカ英語）
・zh（中国語）
・zh-Hant（繁体字中国語）
・zh-Hant-HK（香港で使われる、繁体字中国語）
・ja-Hira（日本語ひらがな）

言語サブタグは必須ですが、用字サブタグや地域サブタグは必須ではありません。「日本で話される日本語」を意味するja-JPは、単に「日本語」を意味するjaとしたほうが簡潔です。不要なサブタグは省略するとよいでしょう。
言語タグは慣習的に言語サブタグを小文字、地域サブタグを大文字で記述しますが、lang属性の値は大文字・小文字を区別しません。
言語指定は子孫要素に継承されます。このため、lang属性を持たない要素にも言語の指定は行われていることになります。CSSで特定要素の言語指定を参照する場合は、属性セレクターでlang属性の値を参照するのではなく、:lang擬似クラスを利用します。
どの祖先要素にもlang属性がない場合、meta要素で指定された値が参照されます。meta要素の指定もない場合、ウェブページのHTTPレスポンスヘッダーのContent-Languageの値が参照されます。いずれもない場合、言語指定は不明（unknown）となります。原則として、html要素のlang属性でページ全体の言語を指定しておくべきです。

＜小見出し＞
XML構文の場合
＜本文＞
XML構文の場合、XMLの属性であるxml:lang属性も使用できます。属性値の規則はlang属性と同じです。古いXHTMLの慣習として、xml:lang属性とlang属性の両方を記述することもありますが、両方を記述する場合は、両者に同じ値を指定しなければなりません。

＜memo＞
大文字・小文字の違いについては許されます。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
スクリーンリーダーは、lang属性の値によって音声合成エンジンを切り替えることがあります。適切な言語設定が行われていないと、コンテンツを一切読み上げなかったり、理解不能な読み上げをすることがあります。そのため、html要素にlang属性を用いてページ全体の言語を適切に指定しておくべきです。

＜memo＞
WCAG 2.1達成基準3.1.1ページの言語で要求されています。 
Success Criterion 3.1.1 Language of Page
https://www.w3.org/TR/WCAG21/#language-of-page

＜中見出し＞
style属性
＜本文＞
要素にstyle属性を指定すると、その要素に対してCSSのスタイルを設定できます。属性値にはCSSの「宣言（declaration）」を記述します。セミコロンで区切って複数の宣言を記述できます。

＜memo＞
仕様としてはCSS Style Attributesで規定されます。
CSS Style Attributes
https://www.w3.org/TR/css-style-attr/

＜本文＞
style属性で指定したスタイルは、原則としてその要素のみに適用されます。複数の要素に対してまとめてスタイルを指定したい場合、style要素を使用するか、link要素で外部スタイルシートを参照するほうがよいでしょう。

＜memo＞
継承が行われるスタイルは、子孫要素に継承されます。

＜memo＞
メンテナンス性の観点から、外部スタイルシートによる指定のほうがより望ましいでしょう。

＜本文＞
なお、style属性で指定した宣言の「詳細度（specificity）」はもっとも高くなり、他のあらゆるセレクターよりも優先されます。古いCSS仕様ではIDセレクターと同一の詳細度とされていましたが、現在ではstyle属性が最優先となっています。

＜memo＞
CSS Cascading and Inheritance Level 4 - Specificity 
https://www.w3.org/TR/css-cascade/#cascade-specificity

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
style属性を利用すると要素の見た目を変更できますが、見た目の変更はスクリーンリーダーの利用者には伝わらないことがあります。
style属性でdisplay:noneを指定した場合、その要素はアクセシビリティツリーから取り除かれます。つまり、視覚だけでなく、スクリーンリーダーでも読み上げられなくなります。display:noneについては、Chapter4-4で詳しく説明します。
また、table要素のdisplayプロパティをtable以外のものに変更すると、テーブルとして扱われなくなることがあります。

＜中見出し＞
class属性
＜本文＞
class属性を利用すると、要素のクラス名を指定できます。値はスペース区切りのトークンで、複数の値をASCII空白文字で区切って指定できます。また、空の値（class=""）も指定可能です。
クラス名はセマンティクス上の特定の意味を持つものではなく、コンテンツ制作者が自由に命名して指定できます。

＜memo＞
空の値を指定した場合、クラス名が指定されていないものとみなされます。意味はありませんが構文エラーにもなりません。
CSS Cascading and Inheritance Level 4 - Specificity 
https://www.w3.org/TR/css-cascade/#cascade-specificity

＜小見出し＞
クラス名の用途
＜本文＞
クラス名は主に以下のような用途に用いられます。

・CSSのスタイルを適用する
・JavaScriptで使用する

また、後述するマイクロフォーマットと呼ばれるメタデータを記述する試みにも用いられていました。

＜丸見出し＞
CSSのスタイルを適用する
＜本文＞
最も多い利用法は、CSSのスタイルを適用するためのものでしょう。CSSのクラスセレクターを利用すると、特定のクラス名を持つ要素にスタイルを適用できます〓01〓。

〓01〓CSSのスタイル適用でクラス名を使用する例
＜コード＞
.global-footer__top {
  margin-top: 3em;
}

＜丸見出し＞
JavaScriptで使用する
＜本文＞
クラス名はJavaScriptからも利用できます。DOMのgetElementsByClassName()メソッドを用いると、特定のクラス名を持つ要素を選択できます。また、querySelector()メソッドにクラスセレクターを含めることもできます。後述のid属性と異なり、複数の要素に同一のクラス名を指定できるため、複数の要素を一括処理したい場合はクラス名が便利です。〓02〓は、"js-menu-button"というクラス名の要素をメニューボタンとして扱うJavaScriptの例です。

〓02〓JavaScriptでクラス名を使用する例
＜コード＞
<script>
  const menuButtonsList = document.querySelectorAll('.js-menu-button');
  menuButtonsList.forEach(element => {
    // メニューボタンの処理
  });
</script>

＜本文＞
JavaScriptからclass属性を参照する場合は、classNameIDL属性を利用できます。ただし、クラス名が複数指定されている場合は、スペース区切りの属性値全体が帰ってきてしまいます。クラス名の追加や削除をする場合は、classListプロパティが便利です。〓03〓のように追加、削除、トグルなどの操作ができます。

〓03〓classListプロパティの記述例
＜コード＞
<div id="menu_target" class="c1 c2">menu</div>
<script>
  const target = document.getElementById('menu_target');
  target.classList.add('c3'); // c3を追加。class="c1 c2 c3" に
  target.classList.remove('c2'); // c2を削除。class="c1 c3" に
  target.classList.toggle('c1'); // c1がなければ追加、あれば削除。class="c3"に
</script>

＜コラム＞
マイクロフォーマット
＜本文＞
「マイクロフォーマット（Microformats）」と呼ばれる仕様では、（HTML4に対して）要素や属性を追加することなく、既存のHTMLのclass属性やrel属性などを利用して、その要素の意味を表すという試みです。〓01〓は、マイクロフォーマットの仕様の1つであるh-cardの例です。

〓01〓マイクロフォーマットの例
＜コード＞
<div class="h-card">
  <a class="p-name u-url"
     href="https://blog.lizardwrangler.com/" 
    >Mitchell Baker</a> 
  (<a class="p-org h-card" 
      href="https://mozilla.org/"
     >Mozilla Foundation</a>)
</div>
＜下キャプション＞
http://microformats.org/wiki/h-card

＜本文＞
h-やp-の接頭辞の付けられたものがマイクロフォーマットのクラス名です。この例では、2つのa要素とその内容が、それぞれ人名と組織名を表すことがわかるようになっています。
なお現在のHTMLでは、メタデータとしてJSON-LDやマイクロデータ、RDFaを利用できます。マイクロフォーマット自体は既存の属性を利用しているため有害なものではありません。しかし、裏を返せば専用の語彙で情報を伝えているものではありません。そのため、ユーザーエージェントに意味を伝えられないことがあります。新規でHTMLにメタデータを埋め込む場合は、専用の語彙が提供されているJSON-LD等を利用するのがよいでしょう。
＜/コラム＞

＜丸見出し＞
クラス名の命名
＜本文＞
属性値はスペース区切りのトークンであるため、クラス名にはASCII空白文字を含めることができません。他には特に制約がなく、ASCII英数字に加えて漢字や絵文字なども使えます。
慣習として、JavaScriptからの操作を前提としたクラス名には、js-というプレフィクスを付けることがあります。こうすることで、JavaScriptで操作するためのクラス名であることが明確になります。
クラス名の命名は開発者の自由ですが、無秩序に命名すると運用や管理が困難になる場合があります。管理のためのクラス名の命名規則にはいくつもの流儀があり、CSS設計手法として知られています。参考にしてルールを整えるとよいでしょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
仕様では、コンテンツの見た目ではなく性質を表す名前を使うことが奨められています。ただし、性質によって名付けたとしても、ユーザーエージェントにその性質が伝わるわけではないことに注意してください。たとえば、class=headingと名付けても、その要素が見出しとして扱われることはありません。
同様に、要素の状態をclass属性で表現することもありますが、これもユーザーエージェントには伝わりません。状態を伝えたい場合には、class属性ではなくARIA属性を利用します。ARIA属性についてはChapter4-2を参照してください。

＜コラム＞
状態を伝える属性
＜本文＞
要素の状態をclass属性で表現する代わりに、ARIA属性を利用することで、classの指定を省略できることもあります。
〓01〓は、ボタンが押されたときに見た目が変化する例です。ボタンが押されるとJavaScriptの処理で"js-pressed"というクラスが付き、それに対応するCSSのスタイルが適用されて見た目が変化します。

〓01〓状態を伝える属性の例
＜コード＞
<style>
  .js-pressed {
    /* 押されたときのスタイル */
  }
</style>
<button class="js-pressed">このボタンは押されている</button>

＜本文＞
これは見た目が変化するだけで、ボタンが押された状態であるという意味までは表現できていないことに注意してください。押されたという状態は、ARIA属性aria-pressedで表現できます。aria-pressed属性を追加すると〓02〓のようになります。

〓02〓aria-pressed属性を追加した記述例
＜コード＞
<style>
  .js-pressed {
    /* 押されたときのスタイル */
  }
</style>
<button class="js-pressed" aria-pressed="true">このボタンは押されている</button>

＜本文＞
こうなるとCSSのセレクターでaria-pressed属性を参照すればよく、class属性は不要になります〓03〓。このように、ARIA属性をうまく利用すると、意味を伝えると同時に、class属性を削除してHTMLをシンプルにできます。

〓03〓class属性を省略した例
＜コード＞
<style>
  [aria-pressed="true"] {
    /* 押されたときのスタイル */
  }
</style>
<button aria-pressed="true">このボタンは押されている</button

＜/コラム＞

＜中見出し＞
id属性
＜本文＞
id属性を利用すると、要素に対して「ユニークID（unique identifier）」を付与できます。ユニークIDは単に「ID」と略して呼ぶこともあります。IDは文書内において唯一でなければなりません。同一のIDを持つ要素が同じ文書内に存在すると、構文エラーとなります。

＜memo＞
IDは俗称ではなく、仕様で使われている略称です。
An element can have an associated unique identifier (ID)
https://dom.spec.whatwg.org/#concept-id

＜小見出し＞
IDの用途
＜本文＞
IDは主に以下のような用途で用いられます。

・URLのフラグメント
・他要素からの参照
・JavaScriptでの使用
・CSSスタイルの適用

＜丸見出し＞
URLのフラグメント
＜本文＞
URLのフラグメントは、IDの最も代表的な用途です。ページ内の目次から見出しへのリンク、脚注へのリンクなど、ページ内のリンクに利用できます〓04〓。

〓04〓URLのフラグメントの例
＜コード＞
<ul class="toc">
  <li><a href="#section1-1">1-1. HTMLについて</a></li>
</ul>
...
<h2 id="section1-1">1-1. HTMLについて</h2>

＜本文＞
古いHTMLでは、この用途にa要素とname属性を利用することがありました。その名残で、これは「アンカーリンク」と呼ばれることもあります。詳しくは、Chapter3-5のa要素を参照してください。

＜丸見出し＞
他要素からの参照
＜本文＞
HTMLの要素には、他の要素と連携して機能するものがあり、属性値として他の要素のIDを指定するものがあります。代表例はlabel要素のfor属性です〓05〓。

〓05〓label要素のfor属性の例
＜コード＞
<label for="username01">ユーザー名</label>
...
<input type="text" name="username" id="username01">

＜本文＞
ほかにも、input要素のform属性やlist属性など、他の要素のIDを参照する属性がいくつかあります。また、属性によっては、複数のIDを列挙して参照できるものもあります。output要素のfor属性や、WAI-ARIAのaria-labelledby属性などがその例です。複数のIDを列挙する場合はASCII空白文字で区切ります〓06〓。

〓06〓aria-labelledby属性の記述例
＜コード＞
<h2 id="form-name">ユーザー情報の登録</h2>
<label for="username01">ユーザー名</label>
<input type="text" name="username" id="username01" aria-describedby="form-name username-desc">
<p id="username-desc">英数8文字以内で入力してください</p>
</form>

＜本文＞
この例では、入力欄に対して「ユーザー情報の登録」「英数8文字以内で入力してください」という2つの説明文がこの順で結び付けられます。
複数の要素に同一のIDを指定できないことに注意してください。特に、HTMLを機械的に生成してlabel要素などを繰り返し出力しているケースでは、IDの重複が起こりがちです。末尾に連番を付けるなど、IDを重複させないような工夫が必要になります。

＜丸見出し＞
JavaScriptでの使用
＜本文＞
JavaScriptで使用する場合、getElementById()メソッドで要素のIDを指定すると、該当IDを持つ要素を取得できます。また、querySelector()やquerySelectorAll()メソッドにIDセレクターも含めて参照できます。
前述のclass属性と異なり、複数の要素に同一のIDは指定できないため、複数の要素を一括処理したい場合には向きません。

＜丸見出し＞
CSSスタイルの適用
＜本文＞
IDは、CSSのスタイルを適用するためにも利用できます。IDセレクターを利用して、該当するIDを持つ要素にスタイルを適用できます〓07〓。

〓07〓CSSスタイルを適用する記述例
＜コード＞
#global-footer {
  margin-top: 3em;
}

＜本文＞
近年のCSS設計では、IDセレクターを使わず、クラスセレクターのみで統一することを好む傾向も見られます。設計ポリシーと照らし合わせて、必要に応じて利用を検討するとよいでしょう。

＜小見出し＞
IDの命名
＜本文＞
IDにはほとんどすべての文字が利用できますが、ASCII空白文字を含めることはできません。ASCII空白文字が含まれている場合、構文エラーとなります。class属性と異なり、複数のIDを列挙する指定はできないので注意してください。また、空のID（id=""）も指定できず、構文エラーとなります。
大文字小文字は区別されることに注意してください。たとえば、"Test"と"test"は異なるIDとみなされます。これは古いHTML仕様とは異なるルールです。

＜memo＞
古いHTMLでは、IDで使用できる文字列に制限がありましたが、現在のHTML仕様にはそのような制限はありません。
HTML4では、ASCII英数字、-（ハイフン）、_（アンダースコア）、.（ピリオド）、:（コロン）のみが利用でき、かつ、先頭がASCII英字でなければなりませんでした。

＜memo＞
HTML4の仕様では大文字・小文字を区別しませんでした。正確には、SGMLの処理ルール上、小文字を大文字に変換して解釈することになっていました。

〓08〓IDの命名例
＜コード＞
<h1 id="test">h1</h1>
<p id="Test">p</p>
<script>
  const test1 = document.getElementById('test');
  console.log(test1); // h1
  const test2 = document.getElementById('Test');
  console.log(test2); // p
  const test3 = document.getElementById('TEST');
  console.log(test3); // null
</script>

＜本文＞
前述のように、IDはURLのフラグメントとして使われます。URLは慣習的に小文字で書かれるため、IDの命名でも小文字が好まれる傾向があります。

＜中見出し＞
tabindex属性
＜本文＞
tabindex属性を利用すると、その要素がフォーカスを受け取るかどうかを制御できます。
HTMLの要素の中には、「フォーカス可能（focusable）」と定義されているものもあります。インタラクティブ要素に分類されるものはフォーカス可能で、具体的には以下の要素が該当します。

・a要素（href属性がある場合）
・area要素
・button要素
・details要素
・iframe要素
・input要素
・select要素
・textarea要素

ユーザーがマウスポインターで操作している場合、これらの要素をクリックするとフォーカスを受け取ります。
一方で、h1やp、div、span要素といった多くの要素は、通常はインタラクティブではありません。ユーザーがクリックしてもフォーカスを受け取らず、Tabでフォーカスも移動できず、JavaScriptからfocus()メソッドを呼んでも効果はありません。
tabindex属性を使用すると、インタラクティブではない要素もフォーカス可能にできます。tabindex属性の属性値には整数を指定できます。属性の有無と値の範囲によって挙動が変化します。

＜小見出し＞
属性が指定されていない場合
＜本文＞
tabindex属性が指定されていない場合、その要素がフォーカス可能とされている場合にはフォーカスを受け取ります。そうでない場合はフォーカスを受け取りません。
キーボード操作時には、Tabキーを押すことで、一定の順序でフォーカスを移動させることができます。このときのフォーカス移動を「シーケンシャルフォーカスナビゲーション（sequential focus navigation）」と呼びます。
tabindex属性が指定されていない場合、シーケンシャルフォーカスナビゲーションではDOMツリー順（HTMLソースコード中の要素の出現順）にフォーカスが遷移します。

＜memo＞
Tabキーは順方向に、Shift+Tabキーは逆方向にフォーカスを移動できます。

＜小見出し＞
0を指定した場合
＜本文＞
tabindex=0を指定した場合、その要素がフォーカス可能と分類されていない場合でもフォーカスを受け取るようになります。ユーザーは要素をクリックしたり、キーボード操作でフォーカスを移すことができます。
シーケンシャルフォーカスナビゲーションのフォーカス順序には影響しません。通常通り、DOMツリー順にフォーカスが遷移します。
ただし、フォームコントロールにdisabled属性が指定されて無効になっている場合、tabindex属性を指定してもフォーカス可能にはなりませんので注意してください。Chapter3-9のdisabled属性も参照してください。

＜小見出し＞
負の数を指定した場合
＜本文＞
tabindex=-1など、負の値を指定した場合、要素はフォーカス可能になりますが、シーケンシャルフォーカスナビゲーションの対象になりません。クリック操作やJavaScriptのfocus()メソッドではフォーカスを受け取りますが、キーボード操作ではフォーカスを移すことができません。これは、主にJavaScriptでフォーカスを制御する場合に使用します。

＜memo＞
負の数であればどの値でも扱いは同じですが、慣習的にtabindex=-1を使用します。

＜小見出し＞
正の数を指定した場合
＜本文＞
正の数を指定した場合、tabindex=0の場合と同様にフォーカス可能になります。
それに加えて、シーケンシャルフォーカスナビゲーションのフォーカス順序に影響を与える場合があります。正の値のtabindex属性が指定されている場合、その要素には優先的にフォーカスが移るようになります。複数の要素に正の値のtabindex属性が指定されていると、数値の小さいものが優先され、小さいものから大きいものへと順にフォーカスが移ります（同値の場合は出現順になります）。
正の値を使用すると、見た目とはまったく異なるフォーカス順序も設定できますが、十分な配慮をせずに使用するとアクセシビリティの問題を起こすことがあります。アクセシビリティ上の注意点も参照してください。

＜memo＞
フォーカスに関する挙動の厳密な定義は、仕様の6.5 Focusに記載されています。 
6.6 Focus
https://html.spec.whatwg.org/multipage/interaction.html#focus 

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
キーボード操作時は、Tabキーを押すことで、一定の順序でフォーカスを移動させることができます。通常はDOMツリー順（HTMLソースコード中の要素の出現順）にフォーカスが遷移します。

＜memo＞
Tabキーは順方向に、Shift+Tabキーは逆方向にフォーカスを移動できます。

＜本文＞
tabindex属性に正の値を指定すると、フォーカス順序が変化します。不用意にフォーカス順序を変更すると、ユーザーの意図しない箇所にフォーカスが移動し、混乱を招くことがありますので注意が必要です。WCAG 2.1達成基準2.4.3フォーカス順序では、「意味及び操作性を損なわない順序でフォーカスを受け取る」ことが要求されています。

tabindex属性は、特にキーボード操作をするユーザーに対して大きな影響を与えます。WAI-ARIAと組み合わせて、キーボード操作を改善するために利用することもあります。Chapter4-4を参照してください。

＜memo＞
Success Criterion 2.4.3 Focus Order
https://www.w3.org/TR/WCAG21/#focus-order

＜中見出し＞
autofocus属性
＜本文＞
autofocus属性を指定すると、その要素が表示されたときに即座にフォーカスを受け取ることが期待されます。autofocus属性はブール型属性です。この属性がdialog要素の子孫要素に指定されている場合は、そのdialogが表示されたときにフォーカスを受け取ります。そうでない場合は、ページの読み込み時にフォーカスを受け取ります。
この属性を指定できる要素は、同一ページ内（dialog要素の中で使われる場合は、同一のdialog要素内）で1つだけです。複数の要素に同時に指定すると構文エラーとなります。
tabindex属性と組み合わせると、通常はインタラクティブでない要素にフォーカスを移動させることもできます〓09〓。

〓09〓autofocus属性とtabindex属性を組み合わせた記述例
＜コード＞
<div tabindex="0" autofocus>autofocusでフォーカスがページ読み込み時に移動します</div>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
この属性が指定されている要素は、強制的にフォーカスを奪います。スクリーンリーダーは通常、ページの先頭から順に読み上げますが、この属性を持つ要素が存在すると、その要素から読み上げることがあります。ページの読み込みに時間がかかり、読み始めた後でこの属性を持つ要素が出現すると、不意にフォーカスが予想外の場所に移動し、混乱を招くこともあります。
この属性を有効活用できるのは、ログインフォームや検索フォームしか存在しないページなど、入力欄以外のコンテンツがほとんどないような場合です。入力欄のほかに読むべきコンテンツがある場合、この属性の利用が本当に必要なのかどうかを含め、慎重に検討してください。

＜中見出し＞
イベントハンドラーコンテンツ属性
＜本文＞
「イベントハンドラーコンテンツ属性（event handler content attributes）」を利用すると、要素のイベントが発生したときにJavaScriptを実行できます。単にイベントハンドラー属性と呼ぶこともあります。

＜小見出し＞
イベントハンドラーとは
＜本文＞
ユーザーがクリック操作をする、あるいは画像の読み込みが完了するなど、何らかの動作や出来事をトリガーにしてJavaScriptの処理を実行したい場合があります。そのような動作や出来事を「イベント（event）」と呼びます。
HTML仕様では60以上のイベントが定義されており、キーボード操作やマウス操作、フォーカスの受け取りやフォーカス移動、ページの読み込み、エラー発生などさまざまなものをトリガーにできます。MDNのイベントリファレンスも参考になります。
こういったイベントの発生を監視する仕組みを「イベントリスナー（event listener）」と呼びます。イベントリスナーはイベントを監視し、イベントが発生したときに処理を行います。また、イベントリスナーと、イベント時に実行するコードを組み合わせたものを「イベントハンドラー（event handler）」と呼んでいます。

＜memo＞
イベントリファレンス | MDN 
https://developer.mozilla.org/ja/docs/Web/Events

＜memo＞
HTML仕様の用語定義では、ハンドラーは、値とリスナーという2つの項目から構成されるとされています。 
8.1.7.1 Event handlers
https://html.spec.whatwg.org/multipage/webappapis.html#event-handlers

＜memo＞
「イベントリスナー」と「イベントハンドラー」の用語は厳密には使い分けられず、同じ意味で使われることもあります。

＜小見出し＞
イベントハンドラー属性
＜本文＞
イベントハンドラー属性を利用すると、HTMLの要素に対してイベントハンドラーを定義できます。属性名はonで始まり、その直後にイベントの名前が続きます。たとえばonclick属性は、要素のclickイベントに対応するイベントハンドラーを定義します。要素がクリックされると、属性値で指定したJavaScriptを実行します。
このJavaScript内では、eventという名前でイベントオブジェクトを参照できます。〓10〓の例では、MouseEventオブジェクトのoffsetXプロパティの値が表示されます。

〓10〓イベントハンドラー属性の例
＜コード＞
<button type="button" onclick="alert(event.offsetX)">このボタンのどこかをクリック</button>

＜memo＞
なお、CSP（Content-Security-Policy）でインラインのコードを禁止する設定にしている場合、イベントハンドラー属性に記述されたJavaScriptもブロックされます。
コンテンツセキュリティポリシー (CSP)
https://developer.mozilla.org/ja/docs/Web/HTTP/CSP

＜コラム＞
イベントハンドラーの戻り値
＜本文＞
イベントハンドラー属性値に指定したJavaScriptを実行後、最終的な戻り値がfalseであった場合、要素の本来の動作がキャンセルされます。これはpreventDefault()メソッドを実行するのと同じ効果です。〓01〓の例にはa要素が2つありますが、どちらもクリックしても何も起こりません。

〓01〓最終的な戻り値がfalseであった場合の例
＜コード＞
<script>
  const clickExample = (event) => {
    event.preventDefault();
  }
</script>
<p>
  <a href="https://example.com/" onclick="return false">example1</a>
  <a href="https://example.com/" onclick="clickExample(event)">example2</a>
</p>

＜本文＞
余談ですが、button要素の誤用が原因でreturn falseが必要になっているケースを見ることがあります。〓02〓は、ボタンを押すと住所検索ダイアログが表示されるフォームのイメージです。

〓02〓return falseの指定
＜コード＞
<form action="https://example.com">
  <!-- さまざまなフォームコントロール -->
  <button onclick="searchAddress(); return false">住所検索</button>
  <button>送信</button>
</form>

＜本文＞
return falseを指定しているのは、フォーム送信を抑制するためです。しかし、〓03〓のように記述すればreturn falseは必要ありません。

〓03〓return falseが不要な例
＜コード＞
<form action="https://example.com">
  <!-- さまざまなフォームコントロール -->
  <button type="button" onclick="searchAddress()">住所検索</button>
  <button>送信</button>
</form>

＜本文＞
フォーム送信が行われるのは、button要素のtype属性のデフォルトが"submit"であるためです。"button"を指定するだけで解決します。

＜小見出し＞
イベントハンドラー属性を使用しないイベント定義
＜本文＞
イベントを定義する際、必ずしもHTMLの属性を利用する必要はありません。JavaScriptからもイベントを定義可能です。〓11〓の例では、button要素にイベントリスナーを設定している例です。
このようにJavaScriptからイベントリスナーを設定するほうがスマートであるため、近年ではHTMLのイベントハンドラー属性を利用することは少なくなっています。

〓11〓button要素にイベントリスナーを設定している例
＜コード＞
<button type="button" id="talk_button">Click Me!</button>
<script>
  const sayHello = () => {
    alert('Hello World!');
  }
  const button = document.getElementById('talk_button');
  button.addEventListener('click', sayHello, false);
</script>

＜中見出し＞
accesskey属性
＜本文＞
accesskey属性を指定すると、要素のショートカットキーのヒントを提示できます。属性値にはキーの文字を指定します。〓12〓はaキーをショートカットキーとする例です。

〓12〓accesskey属性の記述例
＜コード＞
<button type="button" accesskey="1" onclick="alert(1)">click</button>

＜本文＞
多くのブラウザーでは、ショートカットを利用する際に修飾キーとの同時押しが必要です。〓12〓の例に示したボタンは、alt+1やControl+Option+1といった操作で反応します。
デバイスによっては、使用できるキーの数が少ない場合もあります。HTML仕様はフォールバックの仕組みも用意しており、複数のキーを空白類文字で区切って指定できることになっています〓13〓。

＜memo＞
モバイル端末、特にフィーチャーフォンには、修飾キーとの同時押しを必要としないものもあります。古いフィーチャーフォン端末向けのサイトでは、accesskey属性を積極的に利用するものが多く見られました。

〓13〓複数のキーを指定する記述例
＜コード＞
<button type="button" accesskey="a 1" onclick="alert(1)">click</button>

＜本文＞
この場合、aキーが利用できる環境ではaキーで、テンキーのみしか使えないような環境では1キーで操作できることが期待されます。ただし、現状のブラウザーのほとんどは、このような複数指定をうまく解釈しません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
accesskey属性は、ブラウザーの対応が良好ではなく、OSやブラウザーによって、修飾キーは異なることが知られています。
また、OSやブラウザーが持つ既存のキーボードショートカットと競合することがあります。特にスクリーンリーダーなどの支援技術では、AltキーやCtrlキーなども操作に利用することがあるため、より深刻な結果を引き起こす可能性があります。
こういった問題のため、通常のウェブサイトやウェブアプリの多くでは、accesskey属性を使用しないよう一般にアドバイスされます。

＜memo＞
accesskey
https://developer.mozilla.org/ja/docs/Web/HTML/Global_attributes/accesskey

＜memo＞
WebAIM: Keyboard Accessibility - Accesskey 
https://webaim.org/techniques/keyboard/accesskey

＜中見出し＞
hidden属性
＜本文＞
要素にhidden属性を指定すると、現時点でこの要素がページと無関係であることを示します。hidden属性はブール型属性です。
この属性が指定されると、ブラウザーは要素をレンダリングしなくなります。hidden属性が指定された要素に子孫要素がある場合、子孫要素もまるごと非表示になります。
hidden属性が指定されていない要素から、hidden属性が指定されている要素に対してハイパーリンクを設定してはなりません。〓14〓は正しくない例です。

〓14〓不適切なhidden属性の記述例
＜コード＞
<a href="#section1">セクション1</a>

<section hidden>
  <h1 id="section1">セクション1</h1>
</section>

＜本文＞
ページ内リンクが設定されていますが、リンク先はhidden属性が指定された要素の中にあります。この場合、ページ内リンクは機能しません（クリックしても何も起こりません）。同様に、label要素やoutput要素のfor属性による参照もできません。
ただし、他の方法による参照は可能です。たとえば、JavaScriptからはhidden属性の指定された要素に対する読み書きが可能です。これを利用して、hidden属性を指定した非表示のcanvas要素に内容を描き込んでおき、あとで表示する、といった処理を行うことができます。
なお、フォームコントロールにhidden属性を指定しても、フォーム送信時には値が送信されることに注意してください。

＜memo＞
入力途中の選択肢によって入力欄の表示・非表示が変化するようなフォームを実装する場合、hidden属性で隠した入力項目も送信されます。値が送信されないようにしたい場合は、disabled属性と併用するとよいでしょう。

＜小見出し＞
hidden属性とCSS
＜本文＞
HTML仕様では、ユーザーエージェントスタイルシートに[hidden]{display:none}のスタイルを適用することを勧めています。これにより、ブラウザーはhidden属性の指定された要素を非表示にします。
しかし、このスタイル指定の優先度は高くないため、コンテンツ制作者がCSSでdisplayプロパティを指定すると、打ち消されることがあります。
〓15〓は見出しにhidden属性を指定している例です。

＜memo＞
仕様の15.3.1 Hidden elementsを参照してください
https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements

＜memo＞
スタイルシートのカスケーディング順序はCSS Cascading and Inheritance仕様の§6. Cascadingで定義されているとおりです。
https://www.w3.org/TR/css-cascade/#cascading

〓15〓見出しにhidden属性を指定している記述例
＜コード＞
<style>
  h1{
    display: inline-block;
  }
</style>
<section>
  <h1>見出しその1</h1>
  本文その1...
</section>
<section>
  <h1 hidden>見出しその2</h1>
  本文その2...
</section>

＜本文＞
この例では2番目の見出しにhidden属性を指定していますが、これは非表示になりません。style要素内でdisplay: inline-blockが指定されており、hidden属性に対するdisplay: noneが上書きされるためです。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
hidden属性を指定すると、ブラウザーで視覚的に非表示になるだけでなく、スクリーンリーダーでも読み上げられなくなります。これはCSSのdisplay:noneの指定と同じ挙動です。
なお、WAI-ARIAのaria-labelledby属性などでは、hidden属性が指定された要素も問題なく参照できます。
〓16〓では、入力欄にフォーカスした際、スクリーンリーダーは「秘密の合言葉」と読み上げます。aria-labelledby属性についてはChapter4-2を参照してください。

〓16〓hidden属性の参照
＜コード＞
<input aria-labelledby="label">
<p id="label" hidden>秘密の合言葉</p>

＜小見出し＞
カスタムデータ属性: data-*属性
＜本文＞
カスタムデータ属性を利用すると、任意の要素に任意の属性値を指定できます。この属性は特別な効果を持たず、ユーザーに対して表示されることもありません。主にJavaScriptから参照して利用します。
カスタムデータ属性の属性名は、data-から始まり、その後に1文字以上の任意の名前を付けることができます（*に対応する部分です）。
JavaScriptからは、HtmlElementインターフェイスのdatasetプロパティを通じてアクセスします。属性名から先頭のdata-を除去したものがプロパティ名となります〓17〓。

〓17〓カスタムデータ属性の属性名
＜コード＞
<span id="datatest"
  data-html_book="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.html_book); // データにアクセスできました
</script>

＜本文＞
*部分にハイフンを含む場合、キャメルケースでプロパティ名にアクセスできます。つまり、ハイフンの直後の文字を大文字にして、ハイフンを除去したものが名前となります〓18〓。

〓18〓ハイフンの除去
＜コード＞
<span id="datatest"
  data-html-book="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.htmlBook); // データにアクセスできました
</script>

＜小見出し＞
カスタムデータ属性の命名規則
＜本文＞
前述の*部分の名前はコンテンツ制作者が自由に設定できます。ただし、HTMLの属性名に利用できない文字は使えません。
これらの文字が出現すると、その前で属性名が終わったものとみなされます。また、XMLとの互換性の兼ね合いで、:も使用できません。これはXMLの名前空間接頭辞の区切りとみなされます。

＜memo＞
具体的には、ASCII空白文字と、/、>、=、"、'、<が該当します。

＜本文＞
その他の文字は使用でき、漢字やひらがな、絵文字なども利用できます。ただし、名前が数字で始まる場合や、+などJavaScriptの識別子として解釈される文字が含まれる場合、プロパティ名として記述するとJavaScriptの文法エラーになります。〓19〓は動作しない例です。この場合は、〓20〓のようにすれば参照できます。

〓19〓JavaScriptの文法エラーとなる例
＜コード＞
<span id="datatest"
  data-01="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.01); // Uncaught SyntaxError: missing ) after argument list
</script>

〓20〓〓19〓の修正例
＜コード＞
<span id="datatest"
  data-01="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset["01"]); //データにアクセスできました
</script>

＜本文＞
このようにJavaScriptのコードが煩雑になるため、*部分の名前を記号や数字で始めるのは避けたほうがよいでしょう。
なお、XML構文の場合には、ASCIIアルファベット大文字（A-Z）も使用できません。HTML構文の場合は大文字も使えますが、属性名は小文字に変換して解釈するため、JavaScriptからは小文字の名前で参照することになります。属性名をキャメルケースで書くと、大文字は小文字に変換されてしまうので注意が必要です〓21〓。混乱のもとになるので、大文字は使わないほうがよいでしょう。

〓21〓htmlBookがhtmlbookに変換
＜コード＞
<span id="datatest"
  data-htmlBook="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.htmlBook); // undefined
  alert(element.dataset.htmlbook); // データにアクセスできました
</script>

＜小見出し＞
その他のグローバル属性
＜本文＞
その他、HTMLの要素に共通して指定できる属性として、以下のようなものがあります。ここでは簡単な紹介にとどめます。

・itemid / itemprop / itemref / itemscope / itemtype属性。HTMLコンテンツにメタデータを記述できるmicrodata（マイクロデータ）のための属性
・translate属性。翻訳対象とするかどうかを示します。機械翻訳サービスがこの属性を尊重することがある
・xmlns属性。XML名前空間を記述するための属性です。主にXML構文の場合に利用

＜本文＞
HTML構文では特に効力がありませんが、svg要素やmath要素など、XMLアプリケーションとして規定された要素の中で見られます。
