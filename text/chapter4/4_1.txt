＜タイトル＞
グローバル属性
＜リード＞
HTMLの個々の要素は異なる属性を持ちますが、属性の中には、複数の要素に共通して利用できるものもあります。ここでは、すべての要素で共通して利用できるグローバル属性について説明します。

＜中見出し＞
グローバル属性とは
＜本文＞
「グローバル属性（Global attributes）」とは、すべてのHTML要素に共通して利用できる属性です。HTML仕様が定義しているもののほかに、WAI-ARIA仕様やXML仕様など、他の仕様で定義されているものもあります。

＜memo＞
WAI-ARIA仕様で規定されているrole属性やaria-*属性については、Chapter4-2で詳しく説明します。
XML仕様はxml:langなどの属性が定義されていますが、これはXML構文の場合のみ利用できます。HTML構文の場合には効果がなく、単に無視されます。

＜本文＞
ここでは、グローバル属性のうち代表的なものを紹介します。ここで紹介していない属性については、仕様を参照してください。

＜memo＞
HTML仕様が定義するグローバル属性の一覧は、仕様の「3.2.6 Global attributes」で確認できます。
https://html.spec.whatwg.org/multipage/dom.html#global-attributes

＜中見出し＞
title属性
＜本文＞
title属性は、要素に対するヒントや助言の情報を表します。属性値は任意のテキストで、要素に対するヒントや助言となり得る単語や文章を指定します。
一部の要素ではtitle属性が特別な意味を持ちます。abbr要素（P000）、dfn要素（P000）、link要素（P000）、特定の属性が指定されたinput要素（P000）などが該当します。詳細はそれぞれの要素のセクションを参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
title属性の値はユーザーに伝わらない可能性があることに注意してください。ほとんどのブラウザーは、要素にマウスポインターを乗せたときにtitle属性の値をツールチップとして表示します。タッチスクリーンやキーボードで操作している場合、ツールチップを表示できないことがあります。
スクリーンリーダーでは、特定の条件下で、title属性の値を「アクセシブルな名前（accessible name）」として扱います。たとえばimg要素でalt属性が存在しない場合、title属性の値をアクセシブルな名前として読み上げます。

＜memo＞
アクセシブルな名前についての詳細は、Chapter4-3を参照してください。

＜中見出し＞
lang属性
＜本文＞
lang属性は、指定された要素の言語（自然言語）を指定します。主に以下のような用途があります。

・言語によって適切なフォントやグリフを選択する（中国語繁体字、簡体字、日本語で漢字の字形が異なる場合など）
・言語によって引用符を選択する（Chapter3-4のq要素（P000）も参照してださい）
・スクリーンリーダーの音声合成エンジンを選択する
・翻訳機能を利用する際、翻訳元の言語を特定する

属性値には、BCP47の「言語タグ（language tag）」を指定します。日本語を表す言語タグとしては、jaやja-JPが利用されます。言語タグは「サブタグ（subtag）」を組み合わせて構成されており、ja-JPの場合にはjaの部分が「言語（language）」サブタグ、JPの部分が「地域（region）」サブタグです。2つ以上のサブタグを使う場合、ハイフン-でつなぎます。
ほかによく見るものとして「用字（script）」サブタグがあります。たとえば、ja-Hiraで日本語のひらがなを表すことができます。

＜memo＞
言語タグの詳しい説明は、W3C文書「HTMLとXMLにおける言語タグ」を参照してください。
HTMLとXMLにおける言語タグ
https://www.w3.org/International/articles/language-tags/

＜本文＞
以下に言語タグの例を示します。

・en（英語）
・en-GB（イギリス英語）
・en-US（アメリカ英語）
・zh（中国語）
・zh-Hans（簡体字中国語）
・zh-Hant-HK（香港で使われる、繁体字中国語）

言語サブタグは必須ですが、それ以外のサブタグは必須ではありません。「日本で話される日本語」を意味するja-JPは、単に「日本語」を意味するjaとするのが簡潔であり十分です。不要なサブタグは省略するようにします。
lang属性の値は大文字・小文字を区別しません。一般的に言語サブタグを小文字、地域サブタグを大文字で記述しますが、これは慣習的なものに過ぎません。
言語指定は子孫要素に継承されます。このため、html要素にlang属性を指定すれば、個別の要素にlang属性を指定しなくても、すべての要素に言語の指定が行われます。

＜memo＞
CSSで言語指定にマッチさせたい場合は、属性セレクターでlang属性の値を指定するのではなく、:lang()擬似クラスを利用します。

＜本文＞
どの祖先要素にもlang属性がない場合、meta要素で指定された値が参照されます。meta要素の指定もない場合、ウェブページのHTTPレスポンスヘッダーのContent-Languageの値が参照されます。いずれもない場合、言語指定は不明（unknown）となります。原則として、html要素のlang属性でページ全体の言語を指定しておくべきです。

＜小見出し＞
XML構文の場合
＜本文＞
XML構文の場合、XMLの属性であるxml:lang属性も使用できます。属性値の規則はlang属性と同じです。古いXHTMLの慣習として、xml:lang属性とlang属性の両方を記述することもあります。
lang属性とxml:lang属性の両方を記述する場合、両者に同じ値を指定しなければなりません（大文字小文字の違いは許容されます）。

＜memo＞
xml:lang属性はXML仕様で定義されています。
Extensible Markup Language (XML) 1.0 (Fifth Edition)
https://www.w3.org/TR/xml/#sec-lang-tag

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
スクリーンリーダーは、lang属性の値によって音声合成エンジンを切り替えることがあります。適切な言語設定が行われていないと、コンテンツを一切読み上げなかったり、理解不能な読み上げをすることがあります。アクセシビリティの観点からも、html要素にlang属性を用いてページ全体の言語を指定しておくべきです。

＜memo＞
言語の指定は、WCAG 2.1達成基準3.1.1「ページの言語」で要求されています。
Success Criterion 3.1.1 Language of Page
https://www.w3.org/TR/WCAG21/#language-of-page

＜中見出し＞
style属性
＜本文＞
要素にstyle属性を指定すると、その要素に対してCSSのスタイルを設定できます。属性値にはCSSの「宣言（declaration）」を記述します。セミコロンで区切って複数の宣言を記述できます。

＜memo＞
style属性はCSS Style Attributes仕様で定義されています。
CSS Style Attributes
https://www.w3.org/TR/css-style-attr/

＜本文＞
style属性で指定した宣言の「詳細度（specificity）」はもっとも高くなり、他のあらゆるセレクターよりも優先されます。

＜memo＞
古いCSS仕様では、style属性はIDセレクターと同一の詳細度とされていましたが、現在ではstyle属性が最優先となっています。
2021年現在、スタイルの継承や詳細度はCSS Cascading and Inheritance Level 4仕様で定義されています。
Specificity
https://www.w3.org/TR/css-cascade/#cascade-specificity

＜本文＞
複数の要素に対してまとめてスタイルを指定したい場合は、style要素（P000）を使用するか、link要素で外部スタイルシート（P000）を利用するのがよいでしょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
CSS一般の注意点として、CSSで要素の見た目を変更しても、そのことがスクリーンリーダーのユーザーに伝わらない場合があります。
display:noneを指定した場合、その要素はアクセシビリティツリーから取り除かれます。つまり、視覚だけでなく、スクリーンリーダーでも読み上げられなくなります。
table要素のdisplayプロパティをtable以外のものに変更すると、スクリーンリーダーはテーブルとして扱われなくなることがあります。

＜中見出し＞
class属性
＜本文＞
class属性を利用すると、要素のクラス名を指定できます。値はスペース区切りのトークンで、複数の値をASCII空白文字で区切って指定できます。また、空の値（class=""）も指定可能です。
クラス名はセマンティクス上の特定の意味を持つものではなく、コンテンツ制作者が自由に命名して指定できます。

＜memo＞
空の値を指定した場合、クラス名が指定されていないものとみなされます。意味はありませんが構文エラーにもなりません。

＜小見出し＞
クラス名の用途
＜本文＞
クラス名は主に以下のような用途に用いられます。

・CSSのスタイルを適用する
・JavaScriptで使用する

また、マイクロフォーマットと呼ばれるメタデータの記述に用いられることもありました。

＜memo＞
「マイクロフォーマット（Microformats）」は、既存のHTMLのclass属性やrel属性などを利用して、その要素の意味を表すものです。現在では、マイクロデータ、JSON-LDやRDFaといった構造化データを利用できるようになったため、マイクロフォーマットを活用する機会は少なくなりました。

＜丸見出し＞
CSSのスタイルを適用する
＜本文＞
CSSのクラスセレクターを利用すると、特定のクラス名を持つ要素にスタイルを適用できます。〓01〓の例では、class="global-footer__top"が指定された要素にスタイルを適用します。

〓01〓クラスセレクターを用いて要素にスタイルを適用する例
＜コード＞
.global-footer__top {
  margin-top: 3em;
}

＜丸見出し＞
JavaScriptで利用する
＜本文＞
クラス名はJavaScriptでも利用できます。getElementsByClassName()メソッドで特定のクラス名を持つ要素を取得したり、querySelector()メソッドでクラスセレクターとして利用できます。

＜memo＞
要素の特定には後述のid属性も利用できますが、クラス名は複数の要素に同一の名前を指定できるため、複数の要素を一括処理したい場合に適しています。

＜本文＞
〓02〓は、"js-menu-button"というクラス名の要素をメニューボタンとして扱うJavaScriptの例です。

〓02〓JavaScriptで対象のクラスを一括処理する例
＜コード＞
<script>
  const menuButtonsList = document.querySelectorAll('.js-menu-button');
  menuButtonsList.forEach(element => {
    // メニューボタンの処理
  });
</script>

＜本文＞
JavaScriptからクラス名の追加や削除をする場合は、classListプロパティが便利です。〓03〓のように追加、削除、トグルなどの操作ができます。

〓03〓classListプロパティの利用例
＜コード＞
<div id="menu_target" class="c1 c2">menu</div>
<script>
  const target = document.getElementById('menu_target');
  target.classList.add('c3'); // c3を追加。class="c1 c2 c3" に
  target.classList.remove('c2'); // c2を削除。class="c1 c3" に
  target.classList.toggle('c1'); // c1がなければ追加、あれば削除。class="c3"に
</script>

＜memo＞
IDL属性のclassNameプロパティを利用する方法もあります。ただし、この場合はclass属性の属性値にアクセスするため、クラス名が複数指定されていると、すべてのクラス名を含んだスペース区切りの値が返ってくることになります。

＜丸見出し＞
クラス名の命名
＜本文＞
class属性の属性値はスペース区切りのトークンであるため、クラス名にはASCII空白文字を含めることができません。そのほかには特に制約がなく、ASCII英数字はもちろん、漢字や絵文字なども使えます。

＜memo＞
慣習として、JavaScriptからの操作を前提としたクラス名には、js-というプレフィクスを付けることがあります。こうすることで、JavaScriptで操作するためのクラス名であることが明確になります。

＜本文＞
クラス名の命名は開発者の自由ですが、無秩序に命名すると運用や管理が困難になる場合があります。管理のためのクラス名の命名規則にはいくつもの流儀があり、CSS設計手法として知られています。参考にしてルールを整えるとよいでしょう。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
仕様では、コンテンツの見た目ではなく性質を表す名前を使うことが奨められています。ただし、性質によって名付けたとしても、ユーザーエージェントにその性質が伝わるわけではないことに注意してください。たとえば、class=headingと名付けても、その要素が見出しとして扱われることはありません。
要素の役割や状態を伝えたい場合は、ARIA属性を利用します。ARIA属性の詳細についてはChapter4-2を参照してください。

＜コラム＞
状態を伝える属性
＜本文＞
要素の状態を伝えるためにclass属性を利用することもありますが、この場合も、ユーザーエージェントに状態は伝わりません。〓01〓は、ボタンの押下時に見た目が変化する例です。ボタンが押されるとJavaScriptの処理で"js-pressed"というクラスが付き、対応するCSSが適用されて見た目が変化します。

〓01〓class属性で見た目が変化する例
＜コード＞
<style>
  .js-pressed {
    /* 押されたときのスタイル */
  }
</style>
<button class="js-pressed">このボタンは押されている</button>

＜本文＞
ボタンの見た目が変化するため、視覚的には押された状態が伝わりますが、ユーザーエージェントや支援技術には伝わりません。
支援技術に押された状態を伝えるには、〓02〓のようにaria-pressed属性を利用します。

〓02〓class属性の代わりにaria-pressed属性を用いた例
＜コード＞
<style>
  [aria-pressed="true"] {
    /* 押されたときのスタイル */
  }
</style>
<button aria-pressed="true">このボタンは押されている</button>

＜本文＞
〓02〓からはclass属性がなくなっていることに注目してください。
class属性とARIA属性は併用できますが、属性セレクターを利用することで、ARIA属性のみでスタイルの変化を実装できます。こうすることで、意味を伝えると同時に、class属性を削除してHTMLをシンプルにできます。
＜/コラム＞

＜中見出し＞
id属性
＜本文＞
id属性を利用すると、要素に対して「ユニークID（unique identifier）」を付与できます。ユニークIDは単に「ID」と略して呼ぶこともあります。IDは文書内において唯一でなければなりません。同一のIDを持つ要素が同じ文書内に存在すると、構文エラーとなります。

＜memo＞
IDは俗称ではなく、仕様で使われている略称です。
An element can have an associated unique identifier (ID)
https://dom.spec.whatwg.org/#concept-id

＜小見出し＞
IDの用途
＜本文＞
IDは主に以下のような用途で用いられます。

・URLのフラグメント
・他要素からの参照
・JavaScriptでの使用
・CSSスタイルの適用

＜丸見出し＞
URLのフラグメント
＜本文＞
URLのフラグメントは、IDの最も代表的な用途です。ページ内の特定箇所へのリンクに利用できます。〓04は、ページ内の目次から見出しへリンクする例です。

〓04〓URLのフラグメントの例
＜コード＞
<ul class="toc">
  <li><a href="#section1-1">1-1. HTMLについて</a></li>
</ul>
...
<h2 id="section1-1">1-1. HTMLについて</h2>

＜memo＞
フラグメントを利用したリンクについては、Chapter1-5のフラグメント、Chapter3-5のa要素も参照してください。

＜丸見出し＞
他要素からの参照
＜本文＞
HTMLの要素には、他の要素と連携して機能するものがあり、属性値として他の要素のIDを指定するものがあります。代表例はlabel要素のfor属性（P000）で、〓05〓のように記述します。

〓05〓label要素のfor属性でidを参照する例
＜コード＞
<label for="username01">ユーザー名</label>
...
<input type="text" name="username" id="username01">

＜本文＞
ほかにも、input要素のform属性（P000）やlist属性（P000）など、他の要素のIDを参照する属性がいくつかあります。

＜memo＞
属性によっては、複数のIDを列挙して参照できるものもあります。output要素のfor属性（P000）や、WAI-ARIAのaria-labelledby属性（P000）などが該当します。詳細はそれぞれの属性の説明を参照してください。

＜本文＞
繰り返しになりますが、複数の要素に同一のIDを指定できないことに注意してください。特に、HTMLを機械的に生成してlabel要素などを繰り返し出力しているケースでは、IDの重複が起こりがちです。末尾に連番を付けるなど、IDを重複させないような工夫が必要になります。

＜丸見出し＞
JavaScriptでの使用
＜本文＞
IDはJavaScriptでも利用できます。
getElementById()メソッドでそのIDを持つ要素を取得したり、querySelector()やquerySelectorAll()メソッドでIDセレクターとして利用できます。

＜memo＞
要素の特定には前述のclass属性も利用できます。複数の要素に同一のIDは指定できないため、複数の要素を一括処理したい場合にはclass属性のほうが適しています。

＜丸見出し＞
CSSスタイルの適用
＜本文＞
IDは、CSSのスタイルを適用するためにも利用できます。〓07〓の例では、id="global-footer"が指定された要素にスタイルを適用できます。

〓07〓IDセレクターを用いて要素にスタイルを適用する例
＜コード＞
#global-footer {
  margin-top: 3em;
}

＜memo＞
近年のCSS設計では、IDセレクターを使わず、クラスセレクターのみで統一することを好む傾向も見られます。class属性の説明も参照してください。

＜小見出し＞
IDの命名
＜本文＞
IDには、ASCII空白文字を除くすべての文字が利用できます。ASCII空白文字が含まれている場合、構文エラーとなります。class属性と異なり、複数のIDを列挙する指定はできませんので注意してください。また、空のID（id=""）も指定できず、構文エラーとなります。

＜memo＞
HTML4では、IDに利用できる文字はASCII英数字、-（ハイフン）、_（アンダースコア）、.（ピリオド）、:（コロン）のみで、かつ、先頭がASCII英字でなければなりませんでした。現在のHTML仕様にはそのような制限はありません。

＜本文＞
大文字小文字は区別されることに注意してください。〓08〓の例では、要素に"Test"と"test"というIDをつけていますが、両者は同一視されません。

＜memo＞
HTML4の仕様ではIDの大文字小文字を区別しませんでした。正確には、SGMLの処理ルール上、小文字を大文字に変換して解釈することになっていました。

〓08〓IDの大文字小文字が区別される例
＜コード＞
<h1 id="test">h1</h1>
<p id="Test">p</p>
<script>
  const test1 = document.getElementById('test');
  console.log(test1); // h1
  const test2 = document.getElementById('Test');
  console.log(test2); // p
  const test3 = document.getElementById('TEST');
  console.log(test3); // null
</script>

＜本文＞
前述のように、IDはURLのフラグメントとしても使われます。URLは慣習的に小文字で書かれるため、IDの命名も小文字が好まれる傾向があります。

＜memo＞
IDには日本語の文字も利用できます。ただし、URLの中に現れる場合、パーセントエンコード（P000）で表現されて読みにくくなることがあります。

＜中見出し＞
tabindex属性
＜本文＞
tabindex属性を利用すると、その要素がフォーカスを受け取るかどうかを制御できます。
キーボード操作時には、Tabキーを押すことで、一定の順序でフォーカスを移動させることができます。このときのフォーカス移動を「シーケンシャルフォーカスナビゲーション（sequential focus navigation）」と呼びます。通常は、DOMツリー順（HTMLソースコード中の要素の出現順）にフォーカスが遷移します。

＜memo＞
Tabキーでは順方向に、Shift+Tabキーでは逆方向にフォーカスを移動できます。

＜本文＞
ただし、すべての要素がフォーカスを受け取るわけではありません。
HTMLの要素の中には「フォーカス可能（focusable）」と定義されているものがあり、フォーカス可能な要素だけがシーケンシャルフォーカスナビゲーションの対象になります。フォーカス可能な要素は、JavaScriptのfocus()メソッドでフォーカスを受け取ることもできます。

＜memo＞
フォーカス可能な要素の代表例は、a要素やbutton要素などのインタラクティブ要素です。フォーカスに関する挙動の詳細は、仕様の6.5 Focusを参照してください。
6.5 Focus
https://html.spec.whatwg.org/multipage/interaction.html#focus 

＜本文＞
tabindex属性を使用すると、フォーカス可能でない要素をフォーカス可能にできます。
tabindex属性の属性値には整数を指定します。属性の有無と指定する数値によって挙動が変化します。

＜小見出し＞
属性が指定されていない場合
＜本文＞
tabindex属性が指定されていない場合、もともとフォーカス可能とされている要素であればフォーカスを受け取ります。そうでない場合はフォーカスを受け取りません。

＜小見出し＞
0を指定した場合
＜本文＞
tabindex=0を指定した場合、その要素がフォーカス可能と分類されていない場合でもフォーカスを受け取るようになります。シーケンシャルフォーカスナビゲーションのフォーカス順序には影響せず、DOMツリー順にフォーカスが遷移します。

＜memo＞
フォームコントロールにdisabled属性（P000）が指定されて無効になっている場合、tabindex属性を指定してもフォーカス可能にはなりません。

＜小見出し＞
負の整数を指定した場合
＜本文＞
tabindex=-1など、負の値を指定した場合、要素はフォーカス可能となり、JavaScriptのfocus()メソッドではフォーカスを受け取りますが、シーケンシャルフォーカスナビゲーションの対象になりません。そのため、キーボード操作でフォーカスを移すことができません。主にJavaScriptでフォーカスを制御する場合に使用します。

＜memo＞
負の数であればどの値でも扱いは同じですが、慣習的にtabindex=-1を使用します。

＜小見出し＞
正の整数を指定した場合
＜本文＞
正の値を指定した場合、tabindex=0の場合と同様にフォーカス可能になります。
加えて、シーケンシャルフォーカスナビゲーションのフォーカス順序が変更され、その要素に優先的にフォーカスが移るようになります。複数の要素に正の値のtabindex属性が指定されていると、数値の小さいものが優先され、小さいものから大きいものへと順にフォーカスが移ります（同値の場合はDOMツリー順になります）。
正の値を使用すると、見た目とはまったく異なるフォーカス順序も設定できますが、十分な配慮をせずに使用するとアクセシビリティの問題を起こします。アクセシビリティ上の注意点も参照してください。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
キーボード操作でフォーカスを移動するとき、通常はDOMツリー順にフォーカスが遷移します。しかし、tabindex属性に正の値を指定すると、シーケンシャルフォーカスナビゲーションのフォーカス順序が変化します。不用意にフォーカス順序を変更すると、ユーザーが予測しない箇所にフォーカスが移動し、混乱を招くことがあります。

＜memo＞
WCAG 2.1達成基準2.4.3「フォーカス順序」では、「意味及び操作性を損なわない順序でフォーカスを受け取る」ことが要求されています。
Success Criterion 2.4.3 Focus Order
https://www.w3.org/TR/WCAG21/#focus-order

＜本文＞
tabindex属性は、特にキーボード操作をするユーザーに対して大きな影響を与えます。WAI-ARIAと組み合わせて、キーボード操作を改善するために利用することもあります。Chapter4-3も参照してください。

＜中見出し＞
autofocus属性
＜本文＞
autofocus属性を指定すると、その要素が表示されたときに即座にフォーカスを受け取ることが期待されます。autofocus属性はブール型属性です。
この属性を指定できる要素は、基本的に同一ページ内で1つだけです。複数の要素に同時に指定すると構文エラーとなります。
〓09〓のようにtabindex属性と組み合わせると、通常はインタラクティブでない要素にフォーカスを移動させることもできます。

＜memo＞
この属性がdialog要素の子孫要素に指定されている場合、そのdialogが表示されたときにフォーカスを受け取ります。この場合、同一のdialog要素内で1つのみ指定できます。

＜本文＞
〓09〓autofocus属性とtabindex属性を組み合わせた記述例
＜コード＞
<div tabindex="0" autofocus>autofocusでフォーカスがページ読み込み時に移動します</div>

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
この属性が指定されている要素は、強制的にフォーカスを奪います。スクリーンリーダーは通常、ページの先頭から順に読み上げますが、この属性を持つ要素が存在すると、その要素から読み上げることがあります。ページの読み込みに時間がかかり、読み始めた後でこの属性を持つ要素が出現すると、フォーカスが予想外の場所に突然移動し、混乱を招くことあります。
この属性を有効活用できるのは、ログインフォームや検索フォームしか存在しないページなど、入力欄以外のコンテンツがほとんどないような場合です。入力欄のほかに読むべきコンテンツがある場合、この属性の利用が本当に必要なのかどうかを含め、慎重に検討してください。

＜中見出し＞
イベントハンドラーコンテンツ属性
＜本文＞
「イベントハンドラーコンテンツ属性（event handler content attributes）」を利用すると、要素のイベントが発生したときにJavaScriptを実行できます。

＜memo＞
イベントハンドラーコンテンツ属性は、単にイベントハンドラー属性と呼ぶこともあります。

＜小見出し＞
イベントハンドラーとは
＜本文＞
ユーザーがクリック操作をする、あるいは画像の読み込みが完了するなど、何らかの動作や出来事をトリガーにしてJavaScriptの処理を実行したい場合があります。そのような動作や出来事を「イベント（event）」と呼びます。
HTML仕様では60以上のイベントが定義されており、キーボードやマウスの操作、フォーカスの受け取りや移動、ページの読み込み、エラー発生などさまざまなものをイベントとしてトリガーにできます。
こういったイベントの発生を監視する仕組みを「イベントリスナー（event listener）」と呼びます。イベントリスナーはイベントを監視し、イベントが発生したときに処理を行います。
イベントリスナーと、イベント時に実行するコードを組み合わせたものを「イベントハンドラー（event handler）」と呼んでいます。

＜memo＞
どのようなイベントが存在するのか知りたい場合は、MDNのイベントリファレンスが参考になります。
イベントリファレンス | MDN 
https://developer.mozilla.org/ja/docs/Web/Events

＜memo＞
「イベントリスナー」と「イベントハンドラー」の用語は厳密には使い分けられず、同じ意味で使われることもあります。それぞれの正確な定義はHTML仕様を参照してください。
8.1.7.1 Event handlers
https://html.spec.whatwg.org/multipage/webappapis.html#event-handlers

＜小見出し＞
イベントハンドラー属性
＜本文＞
イベントハンドラー属性を利用すると、HTMLの要素に対してイベントハンドラーを定義できます。属性名はonで始まり、その直後にイベントの名前が続きます。たとえばonclick属性は、要素のclickイベントに対応するイベントハンドラーを定義します。要素がクリックされると、属性値で指定したJavaScriptを実行します。
このJavaScript内では、eventという名前でイベントオブジェクトを参照できます。〓10〓の例では、MouseEventオブジェクトのoffsetXプロパティの値が表示されます。

〓10〓イベントハンドラー属性の例
＜コード＞
<button type="button" onclick="alert(event.offsetX)">このボタンのどこかをクリック</button>

＜コラム＞
イベントハンドラーの戻り値
＜本文＞
イベントハンドラー属性値に指定したJavaScriptを実行後、最終的な戻り値がfalseであった場合、要素の本来の動作がキャンセルされます。これはpreventDefault()メソッドを実行するのと同じ効果です。〓01〓の例にはa要素が2つありますが、どちらもクリックしても何も起こりません。

〓01〓最終的な戻り値がfalseであった場合の例
＜コード＞
<script>
  const clickExample = (event) => {
    event.preventDefault();
  }
</script>
<p>
  <a href="https://example.com/" onclick="return false">example1</a>
  <a href="https://example.com/" onclick="clickExample(event)">example2</a>
</p>

＜本文＞
余談ですが、button要素の誤用が原因でreturn falseが必要となるケースを見ることがあります。〓02〓は、ボタンを押すと住所検索ダイアログが表示されるフォームの断片です。

〓02〓onclick属性にreturn falseを指定している例
＜コード＞
<form action="https://example.com">
  <!-- さまざまなフォームコントロール -->
  <button onclick="searchAddress(); return false">住所検索</button>
  <button>送信</button>
</form>

＜本文＞
〓02〓でreturn falseを指定しているのは、フォーム送信を抑制するためです。しかし、フォーム送信が行われるのは、button要素のtype属性のデフォルトが"submit"であるためです。〓03〓のようにtype="button"を指定するだけで、return falseは必要なくなります。

〓03〓〓02〓のbutton要素の修正例
＜コード＞
<form action="https://example.com">
  <!-- さまざまなフォームコントロール -->
  <button type="button" onclick="searchAddress()">住所検索</button>
  <button>送信</button>
</form>

＜小見出し＞
イベントハンドラー属性を使用しないイベント定義
＜本文＞
イベントを定義する際、必ずしもHTMLの属性を利用する必要はありません。〓11〓の例では、JavaScriptからbutton要素にイベントリスナーを設定しています。このように、JavaScriptからイベントリスナーを設定するほうがスマートであるため、近年ではHTMLのイベントハンドラー属性を利用することは少なくなっています。

〓11〓button要素にイベントリスナーを設定している例
＜コード＞
<button type="button" id="talk_button">ボタンをクリック</button>
<script>
  const sayHello = () => {
    alert('Hello World!');
  }
  const button = document.getElementById('talk_button');
  button.addEventListener('click', sayHello, false);
</script>

＜memo＞
イベントハンドラー属性には、CSPとの相性が悪いという問題もあります。CSPでインラインのコードを禁止する設定にしている場合、イベントハンドラー属性に記述されたJavaScriptもブロックされます。
コンテンツセキュリティポリシー (CSP)
https://developer.mozilla.org/ja/docs/Web/HTTP/CSP

＜中見出し＞
accesskey属性
＜本文＞
accesskey属性は、ユーザーエージェントに対して、この要素にアクセスするためのショートカットキーのヒントを与えます。属性値にはキーの文字を指定します。〓12〓は1キーをショートカットキーとする例です。

〓12〓accesskey属性の記述例
＜コード＞
<button type="button" accesskey="1" onclick="alert(1)">click</button>

＜本文＞
多くのブラウザーでは、ショートカットを利用する際に修飾キーとの同時押しが必要です。〓12〓の例に示したボタンは、alt+1やControl+Option+1といった操作で反応します。

＜memo＞
モバイル端末、特にフィーチャーフォンには、修飾キーとの同時押しを必要としないものもあります。古いフィーチャーフォン端末向けのサイトでは、accesskey属性を積極的に利用するものが多く見られました。

＜本文＞
仕様では、accesskey属性に複数の値を指定することでフォールバックする仕組みも規定されています。しかし、現状のブラウザーのほとんどは、そのような複数指定をうまく解釈できません。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
accesskey属性はキーボードのキーを指定するものですが、OSやデバイスによって利用できるキーは異なります。利用する修飾キーもOSやブラウザーによって異なり、操作方法は統一されていません。

＜memo＞
MDNでは、各種のOSやブラウザーで利用する修飾キーの一覧がまとめられています。
accesskey | MDN
https://developer.mozilla.org/ja/docs/Web/HTML/Global_attributes/accesskey

＜本文＞
状況によっては、OSや支援技術が持つ既存のキーボードショートカットと競合することもあります。特にスクリーンリーダーなどの支援技術では、AltキーやCtrlキーなども操作に利用するため、誤操作につながる可能性があります。
米国の非営利団体であるWebAIMは、accesskey属性には実装上の問題があり、ウェブサイトやウェブアプリではaccesskey属性の利用を避けることが望ましく、利用する場合はきわめて慎重に用いるべきだと述べています。また、一部のユーザーにはメリットがあるものの、メリットのないユーザーもいれば、逆に不利になるユーザーもいると指摘しています。

＜memo＞
WebAIM: Keyboard Accessibility - Accesskey 
https://webaim.org/techniques/keyboard/accesskey

＜中見出し＞
hidden属性
＜本文＞
要素にhidden属性を指定すると、現時点でこの要素がページと無関係であることを示します。hidden属性はブール型属性です。
この属性が指定されると、ブラウザーは要素をレンダリングしなくなります。hidden属性が指定された要素に子孫要素がある場合、子孫要素もまるごと非表示になります。
hidden属性が指定されていない要素から、hidden属性が指定されている要素に対してハイパーリンクを設定してはなりません。〓14〓は正しくない例です。

〓14〓不適切なhidden属性の記述例
＜コード＞
<a href="#section1">セクション1</a>

<section hidden>
  <h1 id="section1">セクション1</h1>
</section>

＜本文＞
ページ内リンクが設定されていますが、リンク先はhidden属性が指定された要素の中にあります。この場合、ページ内リンクは機能しません（クリックしても何も起こりません）。同様に、label要素やoutput要素のfor属性による参照もできません。
ただし、他の方法による参照は可能です。たとえば、JavaScriptからはhidden属性の指定された要素に対する読み書きが可能です。これを利用して、hidden属性を指定した非表示のcanvas要素に内容を描き込んでおき、あとで表示するといった処理を行うことができます。
なお、フォームコントロールにhidden属性を指定しても、フォーム送信時には値が送信されることに注意してください。

＜memo＞
入力途中の選択肢によって入力欄の表示・非表示が変化するようなフォームを実装する場合、hidden属性で隠した入力項目も送信されます。値が送信されないようにしたい場合は、disabled属性と併用するとよいでしょう。

＜小見出し＞
hidden属性とCSS
＜本文＞
HTML仕様では、ユーザーエージェントスタイルシートに[hidden]{display:none}のスタイルを適用することを勧めています。これにより、ブラウザーはhidden属性の指定された要素を非表示にします。

＜memo＞
HTML仕様の15.3.1 Hidden elementsでユーザーエージェントに対する具体的なCSSが提案されています。
https://html.spec.whatwg.org/multipage/rendering.html#hidden-elements

＜本文＞
しかし、このスタイル指定の優先度は高くないため、コンテンツ制作者がCSSでdisplayプロパティを指定すると、打ち消されることがあります。〓15〓は、hidden属性が機能しない例です。

＜memo＞
CSSのカスケーディング順序は、2021年現在、CSS Cascading and Inheritance Level 4仕様の6. Cascadingで定義されています。
https://www.w3.org/TR/css-cascade/#cascading

〓15〓見出しにhidden属性を指定している記述例
＜コード＞
<style>
  h1 {
    display: inline-block;
  }
</style>
<section>
  <h1 hidden>見出し</h1>
  本文...
</section>

＜本文＞
〓15〓では見出しにhidden属性を指定していますが、非表示にはなりません。style要素でのdisplay: inline-blockの指定が優先され、hidden属性のdisplay: noneの指定が上書きされるためです。

＜小見出し＞
アクセシビリティ上の注意点
＜本文＞
hidden属性を指定すると、ブラウザーで視覚的に非表示になるだけでなく、スクリーンリーダーでも読み上げられなくなります。これはCSSのdisplay:noneの指定と同じ挙動です。
なお、WAI-ARIAのaria-labelledby属性などでは、hidden属性が指定された要素も問題なく参照できます。〓16〓では、入力欄にフォーカスした際、スクリーンリーダーは「秘密の合言葉」と読み上げます。aria-labelledby属性についてはChapter4-2を参照してください。

〓16〓hidden属性を持つ要素を参照している参照
＜コード＞
<input aria-labelledby="label">
<p id="label" hidden>秘密の合言葉</p>

＜中見出し＞
カスタムデータ属性: data-*属性
＜本文＞
カスタムデータ属性を利用すると、任意の要素に任意の属性を指定できます。この属性は特別な効果を持たず、ユーザーに対して表示されることもありません。主にJavaScriptから参照して利用します。
カスタムデータ属性の属性名は、data-から始まり、その後に1文字以上の任意の名前を付けることができます。総称として「data-*属性（data-* attribute）」と呼ばれます。実際に利用する際は、*の部分をコンテンツ制作者が命名した任意の名前に置き換えます。
JavaScriptからは、〓17〓のようにdatasetプロパティを通じてアクセスします。属性名から先頭のdata-を除去したものがプロパティ名となります。

〓17〓カスタムデータ属性の属性名
＜コード＞
<span id="datatest"
  data-html_book="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.html_book); // データにアクセスできました
</script>

＜本文＞
*部分にハイフンを含む場合は、キャメルケースでプロパティ名にアクセスできます。つまり、ハイフンの直後の文字を大文字にして、ハイフンを除去したものが名前となります。〓18〓はdata-html-book属性にhtmlBookプロパティでアクセスする例です。

＜WORD＞
キャメルケース
プログラミングなどで英語の複合語やフレーズを一語に繋げて表記する際に、単語の先頭を大文字にする方式。語の途中に大文字が出現する様子をラクダ（camel）のこぶに例えた表現で、たとえばgetElementByIdのような表記となる。

〓18〓ハイフンの除去
＜コード＞
<span id="datatest"
  data-html-book="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.htmlBook); // データにアクセスできました
</script>

＜小見出し＞
カスタムデータ属性の命名規則
＜本文＞
data-*の*部分の名前はコンテンツ制作者が自由に設定できます。ただし、HTMLの属性名に利用できない文字は使えません。また、XMLとの互換性のため、:も使用できません。

＜memo＞
HTMLの属性名に利用できない文字は、ASCII空白文字と、/、>、=、"、'、<が該当します。これらの文字が出現すると、その文字の直前で属性名が終わったものとみなされます。また、:が出現した場合は、XMLの名前空間接頭辞の区切りとみなされます。

＜本文＞
さらに、名前にはASCIIアルファベット大文字も利用できないことになっています。ただし、HTML構文の場合は、構文解析の際に属性名が小文字に変換されるため、大文字で書いても構文エラーにはなりません。この場合、JavaScriptからは小文字の名前で参照することになります。混乱のもとになるため、大文字で書くことは避けるべきです。

＜memo＞
XML構文の場合は小文字への変換が行われないため、ASCIIアルファベット大文字で書くことは許可されません。

＜本文＞
漢字やひらがな、絵文字など、その他の文字は使用できます。ただし、名前が数字で始まる場合や、+などJavaScriptの識別子として解釈される文字が含まれる場合、プロパティ名として記述するとJavaScriptの構文エラーになります。
〓19〓は動作しない例です。〓20〓のようにすれば参照できますが、JavaScriptのコードが煩雑になるため、*部分の名前を記号や数字で始めるのは避けるのが賢明です。

〓19〓JavaScriptの構文エラーとなる例
＜コード＞
<span id="datatest"
  data-01="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset.01); // Uncaught SyntaxError: missing ) after argument list
</script>

〓20〓〓19〓の修正例
＜コード＞
<span id="datatest"
  data-01="データにアクセスできました">
</span>
<script>
  const element = document.getElementById('datatest');
  alert(element.dataset["01"]); //データにアクセスできました
</script>

＜小見出し＞
その他のグローバル属性
＜本文＞
その他、HTMLの要素に共通して指定できる属性として、以下のようなものがあります。ここでは簡単な紹介にとどめます。

・itemid / itemprop / itemref / itemscope / itemtype属性: HTMLコンテンツにメタデータを記述できるmicrodata（マイクロデータ）のための属性です
・translate属性: 翻訳対象とするかどうかを示します。機械翻訳サービスがこの属性を尊重することがあります
・xmlns属性: XML名前空間を記述するための属性でXML構文で利用されます。HTML構文では特に効力がありませんが、svg要素やmath要素など、XMLアプリケーションとして規定された要素の中で見られます
