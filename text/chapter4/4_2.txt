＜タイトル＞
WAI-ARIA
＜本文＞
HTMLで利用できる属性の中には、HTML仕様とは別の文書で定義されているものもあります。その1つに、近年利用されるようになったWAI-ARIAがあります。ここでは、WAI-ARIAで定義されているARIA属性について説明します。

＜中見出し＞
WAI-ARIAの概説
＜本文＞
Chapter1-4で触れたように、WAI-ARIAは、W3CのWAIによって発行されている仕様です。単にARIAとも呼ばれます。
WAI-ARIAは単独で使うものではなく、別のマークアップ言語と組み合わせて、補助する形で利用します。組み合わせる相手のマークアップ言語のことを「ホスト言語（host language）」と呼びます。HTMLがホスト言語になることがほとんどですが、たとえばSVGがホスト言語になることもあります。

<memo>
「ワイ アリア」や「ウェイ アリア」などと発音します。WAIの発音は英語圏でも一定ではないようです

<memo>
Accessible Rich Internet Applications (WAI-ARIA) 1.1
https://www.w3.org/TR/wai-aria/

＜小見出し＞
ARIA属性の分類
＜本文＞
WAI-ARIAは、ホスト言語の要素に対して追加の情報を与える属性を定義しています。WAI-ARIAが定義する属性を「WAI-ARIA属性（WAI-ARIA attribute）」、もしくは単に「ARIA属性（ARIA attribute）」と呼びます。
ARIA属性は、その性質によって「ロール（role）」、「ステート（state）」、「プロパティ（property）」の3種類に分類されます。

＜丸見出し＞
ロール
＜本文＞
ロールとは要素の役割を表すもので、この要素が何であるのか、何をするものかという情報を与えます。要素にロールを付与する場合は、role属性を使用します。
たとえば、div要素にrole="navigation"を指定すると、HTMLのnav要素と同じようなナビゲーションのセマンティクスを持つことを示せます。ロールの中には、role="search"のように、HTMLの要素では表現できないものもあります。

＜丸見出し＞
ステート
＜本文＞
ステートは、要素の現在の状態を表すものです。ステートを定義するARIA属性には、aria-で始まる名前が付けられています（aria-*属性）。ステートと後述のプロパティとの役割はほとんど同じですが、ステートは頻繁に変化することが想定されるものを表します。主にJavaScriptからの操作によって設定や変更され、現時点でのその要素の状態を表します。
たとえば、aria-disabled="true"は、指定された要素が現在無効になっていることを伝えます。また、aria-expanded属性は、指定された要素と関連する要素が開閉どちらの状態になっているのかを伝えます。

＜丸見出し＞
プロパティ
＜本文＞
プロパティは、要素に対し、性質や特性などの情報を表現するものです。要素のプロパティを定義するARIA属性には、ステート同様にaria-で始まる名前が付けられています。
たとえば、aria-required="true"は、指定されたフォームの要素が必須であることを伝えます（HTMLのrequired属性と同じセマンティクスを持ちます）。aria-label属性のように、要素に対して追加の説明を与えるものや、aria-controls属性のように、他の要素との関連性を示すものもあります。
なお、ステートとプロパティとの違いはそこまで厳密なものではありません。プロパティが頻繁に変更されたり、ステートが変更されずに使われることもあります。たとえば、aria-valuenowプロパティは範囲を示すコントロールの現在値を示すもので、頻繁に変化する可能性があります。aria-hiddenステートは要素を支援技術から隠すものですが、頻繁には変更されないような使われ方が主流です。

<memo>
実際、WAI-ARIA仕様ではステートとプロパティは一括りのセクションで記述されています。
6. Supported States and Properties
https://www.w3.org/TR/wai-aria-1.2/#states_and_properties

＜小見出し＞
WAI-ARIAとその周辺仕様
＜本文＞
WAI-ARIAには、本体の仕様のほかに複数の関連文書があります。WAI-ARIAを体系立てて理解したい場合や、HTML仕様との対応関係を調べたい場合などは、関連文書を参照する必要があります。

＜丸見出し＞
WAI-ARIA仕様
＜本文＞
WAI-ARIA仕様の本体では、WAI-ARIAそのものの説明と、ロール、プロパティ、ステートを定義します。それぞれの意味や効果、どのロールにどのプロパティやステートが指定可能か、といった情報も含まれています。
WAI-ARIA 1.2からは、JavaScriptからARIA属性へアクセスする場合に利用するIDLインターフェイスも定義されるようになりました。
ロールの情報の中には、"Related Concepts"のような、どのHTML要素に類似する概念かという情報もあります。ただし、これはあくまで参考情報という位置付けです。HTML要素とロールとの対応関係については、後述のARIA in HTMLを参照する必要があります。

＜丸見出し＞
ARIA in HTML
＜本文＞
ARIA in HTMLは、HTMLをホスト言語とした場合のARIAの位置付けを規定した文書です。ARIAロールとHTMLの要素との対応関係や、どのHTML要素にどのロールを指定できるかといった情報があります。
この文書は、ARIA属性の具体的な使い方までは説明していません。使い方のガイドや具体例について、後述のUsing ARIAとWAI-ARIA Authoring Practicesを参照するように促しています。

<memo＞
ARIA in HTML
https://www.w3.org/TR/html-aria/

＜丸見出し＞
Using ARIA
＜本文＞
Using ARIAはW3Cのワーキンググループノートで、ARIAの使い方の基本的な方針について書かれた、入門ガイドのような位置付けの文書です。ただし、2018年に公開されてから2021年現在まで更新されておらず、一部の情報は他のW3C文書と重複して古いものになっていることに注意してください。
Using ARIAには使用例も出ていますが、コード例は基本的な説明にとどまります。本格的なウィジェットをデザインするには不十分かもしれません。

＜memo>
Using ARIA
https://www.w3.org/TR/using-aria/


＜丸見出し＞
WAI-ARIA Authoring Practices
＜本文＞
WAI-ARIA Authoring PracticesはW3Cのグループノートで、カルーセルやモーダルダイアログなどの本格的なウィジェットの実装例が紹介されています。コード例はもちろん、実際に動作を見ることのできるサンプルも用意されており、実際に制作する際の参考になるでしょう。

<memo>
WAI-ARIA Authoring Practices 1.1
https://www.w3.org/TR/wai-aria-practices/

＜丸見出し＞
その他の関連文書
＜本文＞
その他、WAI-ARIAの関連文書には以下のようなものがあり、WAI-ARIAスイートとして位置付けられています。

・Core Accessibility API Mappings : ブラウザーや支援技術の開発者向けの仕様
・HTML Accessibility API Mappings : プラットフォームAPIとの対応を示した仕様
・Accessible Name and Description Computationというアクセシブルな名前や説明などの優先順位を決める仕様

さらに、WAI-ARIA仕様の拡張として、EPUBのためのDPUB-ARIA10、SVGのためのSVG Accessibility API Mappings11といった仕様もあります。

<memo>
Core Accessibility API Mappings 1.1
https://www.w3.org/TR/core-aam/

<memo>
HTML Accessibility API Mappings 1.0
https://www.w3.org/TR/html-aam/

<memo>
Accessible Name and Description Computation 1.1
https://www.w3.org/TR/accname/

<memo>
Digital Publishing WAI-ARIA Module 1.0
https://www.w3.org/TR/dpub-aria/

＜中見出し＞
role属性
＜本文＞
role属性を使用すると、要素のロールを指定できます。属性値ロールの名前を指定します。
ロールは複数指定可能で、ASCII空白文字で区切って列挙します。複数指定はフォールバックのためのもので、ブラウザーが解釈でき、かつ、その要素に適用可能なロールのうち、先頭にあるものが適用されます。〓01〓は複数指定の例です。

〓01〓role属性の記述理恵
＜コード＞
<div role="dummyrole blockquote note">
...
</div>

＜本文＞
この場合、dummyroleというロールは現在のARIA仕様に存在しないため、無視されます。blockquoteロールはARIA 1.2仕様で定義されたロールであり、ARIA 1.2に対応するブラウザーはこれを採用するでしょう。そうでないブラウザーはこれも無視してnoteロールを採用することになります。なお、role属性にはさまざまな注意点があります。

＜小見出し＞
抽象ロールは指定できない
＜本文＞
ARIA仕様では、ロールを継承・派生関係で定義しているため、「抽象ロール（abstract role）」が存在します。これはロールの派生関係を表現するために定義されているもので、実際に使うことはできません。
role属性で抽象ロールを指定してはなりません。抽象ロールを指定しても、ブラウザーはそれを無視します。たとえば、windowロールは抽象ロールなので〓02〓のような指定はできません。

<memo>
逆に、実際に使える具体的なロールは「具象ロール」(concrete role)と呼びますが、この言葉が使われることはまれです。

〓02〓windowロールを指定した不適切な例
＜コード＞
<div role="window">
ダイアログのつもり?
</div>

＜本文＞
windowロールの派生ロールであるdialogロールは抽象ロールではないので、問題なく指定可能です〓03〓。
あるロールが抽象ロールかどうかは、ARIA仕様で確認でき、全部で12のロールが抽象ロールとなっています。

〓03〓dialogロールを指定した適切な例
＜コード＞
<div role="dialog">
ダイアログのつもり
</div>

<memo>
5.3.1 Abstract Roles
https://www.w3.org/TR/wai-aria-1.2/#abstract_roles

＜小見出し＞
ロールの上書き
＜本文＞
role属性はホスト言語にセマンティクスの情報を追加しますが、HTMLの要素は、もともとセマンティクスを持っています。たとえば、h1要素はランク1の見出しを、main要素は主要なコンテンツを表します。
role属性で明示的にロールを指定しなくても、その要素が暗黙的にロールを持っていることがあります。このような、ホスト言語がもともと持つロールを「暗黙のネイティブロール（implicit native role）」、もしくは単に「ネイティブロール（native role）」と呼びます。
要素がネイティブロールを持つ場合、role属性で異なるロールを指定すると、ネイティブロールを上書きします。〓04〓は、a要素にrole属性を指定した例です。


<memo>
HTMLのどの要素がどのようなネイティブロールを持つかは、先に紹介したARIA in HTMLで定義されています。

〓04〓a要素にrole属性を指定した例
＜コード＞
<a href="/register" role="button">今すぐ登録</a>

＜本文＞
a要素がhref属性を持つ場合、ネイティブロールとしてlinkを持ちますが、role属性によってbuttonロールが上書きされています。そのため、支援技術は、この要素をリンクではなくボタンとして認識します。
ただし、role属性が上書きするのはセマンティクスだけで、機能は変更しません。〓04〓例は「ボタン」と読み上げられますが、button要素のような機能は持ちません。たとえば、スペースキーでボタンを押せるようにはなりません。

<memo>
たとえば、スクリーンリーダーは「今すぐ登録 リンク」ではなく「今すぐ登録 ボタン」と読み上げるようになります。



＜コラム＞
ネイティブ、暗黙、ホスト言語
＜本文＞
WAI-ARIA仕様では、ネイティブ（native）、暗黙の（implicit）、ホスト言語（host language）といった用語が出てきますが、これらはすべて同じ概念を表しているものです。
つまり、HTMLを考える場合、すべてHTMLデフォルトの（default）と読み替えることができます。なお、本書ではネイティブとして統一して言及します。
ネイティブセマンティクス（native semantics）というような表現がARIA関連仕様で出てきますが、この文脈でのセマンティクスはロール、ステート、プロパティの総称ということができます。


＜小見出し＞
指定できるロールの制限
＜本文＞
role属性では要素のネイティブロールを上書きできますが、ネイティブロールの機能と矛盾するような指定はできません。〓05〓は適切でない例です。


<memo>
実際に使える具体的なロールは「具象ロール（concrete role）」と呼びますが、この言葉が使われることはまれです。

〓05〓button要素を見出しとした不適切な例
＜コード＞
<button role="heading">見出し?</button>

＜本文＞
button要素をボタンではなく見出しにしようとしていますが、ボタンと見出しとでは役割や機能がかけ離れており、互換性がありません。このような無理のあるロール変更はできず、エラーとなります。
ARIA in HTMLでは、どの要素にどのロールが適用可能かを定義しています。button要素に適用可能なロールは以下のとおりです。
＜引用囲み＞
checkbox, link, menuitem, menuitemcheckbox, menuitemradio, option, radio, switch or tab.
＜/引用囲み＞
headingロールは含まれていないため、button要素にheadingロールは適用できません。なお、見出しをボタンとして押せるようにしたい場合には、〓07〓のように、見出しの中にボタンを入れる方法があります。
ARIA in HTMLで許されている組み合わせであっても、不用意なセマンティクスの変更は望ましくありません。

<memo>
後述の「ARIAルール3：ネイティブセマンティクスをむやみに変更しない」も参照してください。

〓07〓見出しの中にボタンを入れた記述例
＜コード＞
<h1><button>見出しボタン</button></h1>
<!-- 見出し要素の内部にボタン要素を設置している -->

＜小見出し＞
特殊な働きをするロール
＜本文＞
基本的に、ロールはユーザーにセマンティクスを伝えるものであり、要素の機能を変更することはありません。ただし、中には特殊な働きをするロールもあります。ここでは、注意が必要なロールをいくつか紹介します。

＜丸見出し＞
ランドマークロール
＜本文＞
Chapter3でも触れましたが、ロールの中には「ランドマークロール」と呼ばれるものがあります。これはその名のとおり、ナビゲーションのランドマークとして機能するものです。以下の8つがランドマークロールです。

・banner
・complementary
・contentinfo
・form
・main
・navigation
・region
・search

支援技術の多くはランドマークロールを利用したナビゲーションの機能を持ち、特定のランドマークを連続的に移動することが可能になっています。これを利用すると、mainロールのランドマークが「登場するまで読み飛ばして本文から読み上げ始める」、「searchロールのランドマークに移動して検索する」、といったことができるようになります。

<memo＞
ただし、1つのコンテンツ内で必要以上に大量のランドマークが存在すると、目的のランドマークを見つけ出すのに多大な労力がかかるようになってしまいます。使い過ぎには注意してください。

＜丸見出し＞
ライブリージョンロール
＜本文＞
「ライブリージョン（live region）」とは、内容が更新されたときにユーザーへ通知される領域です。たとえば、株価の表示、ゲームのスコア表示、緊急性の高いエラーメッセージなど、リアルタイムで更新される箇所に使用します。
支援技術のユーザーがある箇所を読んでいるとき、他の特定の箇所がリアルタイムで更新されても、その更新に気づかないことがあります。更新される領域をライブリージョンとして定義しておくと、更新された際にユーザーへ通知され、他の箇所を読んでいても更新に気づくことができます。
以下の5つのロールはライブリージョンの機能を持ちます。

・alert
・log
・marquee
・status
・timer

通知の必要がない箇所でこれらのロールを使用しないように注意してください。場合によっては、スクリーンリーダーのユーザーが通知を受け続けて操作不能となることもあります。

<memo>
後述のaria-live属性を使用すると、他のロールの要素をライブリージョンとしたり、これらのロールの挙動を変更したりできます。

＜丸見出し＞
ロールの削除：presentationとnoneロール
＜本文＞
ときには、ホスト言語のネイティブロールを削除したい場合もあります。その場合に使用するのがpresentationロールやnoneロールです。これらはセマンティクスを持たないことを意味するロールであり、ネイティブロールを打ち消す働きをします。
presentationロールとnoneロールは同じ機能を持ちます。同義の別名のロールが存在するに至った経緯は、仕様の注記で言及されています。
ネイティブロールを打ち消したいケースには、たとえば以下のようなものがあります。

・table要素を純粋にレイアウト調整のためだけに用いている場合
・親子のロール関係を修復したい場合

ここでいう親子のロール関係の修復というのは、たとえばul/li要素を用いてタブコンポーネントを作成するような場合です。具体例を示します〓09〓。

<memo>
Note regarding the ARIA 1.1 none role.
https://www.w3.org/TR/wai-aria-1.2/#note-regarding-the-aria-1-1-none-role-0

〓09〓ul/li要素を用いてタブコンポーネントを作成する記述例
＜コード＞
<ul role="tablist">
  <li>
    <button role="tab" aria-controls="panel1">タブ1</button> 
  </li>
  ...
</ul>
<div role="tabpanel" id="panel1">
タブ1は…。
</div>

＜本文＞
一見すると問題ないように見えますが、ul要素のネイティブロール（list）をtablistロールによって上書きした一方で、li要素はネイティブロール（listitem）のままです。これは、ul要素なしにli要素が出現しているのと同じ状態で、親子のロール関係に矛盾が生じています。
そこで、presentationロールを用いて〓10〓のようにマークアップすることで、親子のロール関係の修復をします。


〓10〓親子のロール関係の修復
＜コード＞
<ul role="tablist">
  <li role="none presentation">
    <button role="tab" aria-controls="panel1">タブ1</button> 
  </li>
  ...
</ul>
<div role="tabpanel" id="panel1">
タブ1は…。
</div>

＜本文＞
このようにすることで、セマンティクスの観点から矛盾のないタブコンポーネントを作成できます。タブコンポーネントについてはChapter4-4の事例3.でも詳しく検討していますので、あわせて参照してください。

<memo>
presentationロールは特定の場合に継承されることがあります。「必須の所有要素がある場合のロール変更」も参照してください。


＜丸見出し＞
ロールを削除できない場合
＜本文＞
ロールを削除できない場合もあります。まず、フォーカス可能要素やインタラクティブ要素のロールを打ち消すことはできません。これは、要素が操作可能であることを担保するための決まりです。〓11〓はrole属性が機能しない例です。

〓11〓ロールを削除できない例
＜コード＞
<button role="presentation">ボタンじゃない?</button>

＜本文＞
この場合、ブラウザーはrole属性を無視しなければならないと定められています。ロールの指定は無視され、ネイティブロールであるbuttonロールが有効になります。
また、グローバルARIA属性が明示的に指定されている場合、その要素のロールは削除できません。〓12〓はaria-describedby属性が指定されている例です。

〓12〓aria-describedby属性が指定されている記述例
＜コード＞
<section role="presentation" aria-describedby="heading01">
  <h1 id="heading01">このセクションの説明</h1>
</section>

＜本文＞
この場合、要素のロールは削除できません。role="presentation"の指定は無視され、ネイティブロールがそのまま残ります。グローバルARIA属性が指定されていることが要件のため、たとえばaria-hidden=falseのような一見無意味な指定でも、ロールは打ち消せなくなります。
〓13〓のも、ブラウザーはrole属性の指定を無視します。

〓13〓role属性の指定を無視する例
＜コード＞
<section role="presentation" aria-hidden="false">
  <h1 id="heading01">このセクションの説明</h1>
</section>

＜本文＞
なお、グローバルでないARIA属性が付いている場合は、ロールの削除が可能です。〓14〓はaria-level属性を使用している例です。

〓14〓aria-level属性を使用している例
＜コード＞
<h1 role="presentation" aria-level="1">このセクションの説明</h1>

＜本文＞
この場合、role=presentationの指定は有効になり、ロールを削除できます。aria-level属性はheadingロールに対してのみ指定できる属性であり、グローバル属性ではないためです。

＜小見出し＞
必須の所有要素がある場合のロール変更
＜本文＞
HTMLの要素には、table要素やul要素のように、必ず特定の子孫とセットで用いるものがあります。このような場合に必須となる特定の子孫を、ARIA仕様では「必須の所有要素（Required Owned Elements）」と呼んでいます。table要素ならばtr要素が、ul要素ならばli要素が必須の所有要素となります。
必須の所有要素を持つ親要素のロールを変更した場合、ブラウザーは必須の所有要素のロールを打ち消します。
〓15〓は、テーブルレイアウトでカラムを左右に並べたものです。

〓15〓テーブルレイアウトでカラムを左右に並べる記述例
＜コード＞
<table>
  <tr>
    <td>左カラム</td>
    <td>右カラム</td>
  <tr>
</table>

＜本文＞
このとき、ネイティブロールとして、table要素はtableロール、td要素はcellロールを持ちます。
このままでは支援技術に表として扱われてしまい、混乱を招くことがあります。そこで、table要素にpresentationロールやnoneロールを指定し、表としてのセマンティクスを打ち消します。

<memo>
ブラウザーによっては、table要素にth要素やcaption要素などが一切使われていない場合、レイアウト目的のテーブルと判断して独自のロールを割り当てることもあります。

＜本文＞
このままでは支援技術に表として扱われてしまい、混乱を招くことがあります。そこで、table要素にpresentationロールやnoneロールを指定し、表としてのセマンティクスを打ち消します〓16〓。

〓16〓noneロールを指定
＜コード＞
<table role="none presentation">
  <tr>
    <td>左カラム</td>
    <td>右カラム</td>
  <tr>
</table>

＜本文＞
cellロールは祖先がtableロールであることを前提としていますが、tableロールが失われたことにより、td要素のロールは宙に浮いてしまうことになります。このようなとき、ブラウザーはtd要素のネイティブセマンティクスを自動的に削除します。

＜中見出し＞
代表的なaria-*属性
＜本文＞
ここでは、ステートおよびプロパティを表すaria-*属性のうち、よく利用される代表的なものを紹介します。ここで挙げていないaria-*属性については、先に紹介したW3C文書群を参照してください。

＜小見出し＞
aria-hidden属性（ステート）
＜本文＞
aria-hidden属性は、その要素がアクセシビリティAPIに対して公開されるかどうかを指定する属性です。属性値として"true"もしくは"false"を指定します。HTMLのブール型属性とは指定の仕方が異なり、aria-hiddenと書いただけでは効果を発揮しないので注意してください。
aria-hidden=trueを指定すると、アクセシビリティAPIに公開されなくなり、支援技術から要素を隠すことができます。要素は視覚環境では表示されますが、スクリーンリーダーでは読み上げられなくなります。
視覚的に非表示にするhidden属性、CSSのdisplay: noneやvisibility: hiddenは、aria-hidden=trueと同様にアクセシビリティツリーから削除させる機能があります。そのため、aria-hidden属性をこれら機能と併用しないようにします。
この属性は、冗長な情報を支援技術から隠すために使用します。たとえば、意味を持たないアイコンを表現するためにアイコンフォントを利用するようなとき、スクリーンリーダーでは意図しない読み上げがなされてしまうことがあります。aria-hidden=trueを指定することで、意図しない読み上げを回避し、ユーザー体験を向上できることがあります〓17〓。

〓17〓aria-hidden=trueを指定
＜コード＞
<span class="icon" aria-hidden="true">□</span>

＜本文＞
本当にaria-hidden属性を利用する必要があるのか、十分に考慮してください。意味を持つ要素にaria-hidden=trueを指定すると、支援技術のユーザーにはその意味が伝わらなくなります。この属性を利用してよいのは、その要素を隠していても支援技術のユーザーに十分な情報が伝わり、同等の機能が利用できる場合だけです。


<memo>
フォーカス可能な要素にaria-hidden="true"を指定した場合、フォーカスを見失う危険性があります。フォーカスに関してはChapter4-4のARIAコンセプト2も参照してください。

＜小見出し＞
aria-label属性（プロパティ）
＜本文＞
aria-label属性は、要素に対して「アクセシブルな名前（accessible name）」を提供します。言い換えると、要素にラベル付けする文字列を定義します。
主にアイコンボタンなど、視覚的には意味を持ち、かつテキストを持たない要素にラベルを与えるために使用します。〓18〓の例は、閉じるボタンに「X」とだけ記載されている例です。

〓18〓閉じるボタンの記述例
＜コード＞
<button type="button" aria-label="閉じる" onclick="myDialog.close()">X</button>

＜本文＞
視覚環境ではこの「X」がバツ印のように見え、閉じるボタンであることが伝わりますが、スクリーンリーダーは単に「エックス ボタン」などと読み上げてしまいます。aria-label属性によって「閉じる」というラベルを与えることで、「閉じる ボタン」と読み上げることが期待されます。
このとき、ボタンの内容である「X」というテキストを読み上げない点に注意してください。もともとラベルを持っている要素にaria-label属性でラベルを与えた場合、元のラベルは上書きされる形になります。

＜丸見出し＞
aria-labelの使い過ぎに注意
＜本文＞
aria-label属性は支援技術のユーザーに情報を伝えるための手段としては便利なものです。しかし、そのラベルが支援技術のユーザーにしか伝わらないことに注意してください。aria-label属性を使うことにより、ラベルを提供する一方で、視覚的には隠すことになります。
そのラベルが多くのユーザーにとって有益なものならば、すべてのユーザーに見える形で提示することを検討しましょう。見えているテキストをコントロールと結びつけたい場合は、後述のaria-labelledby属性が利用できます。

＜丸見出し＞
名前付けできないロール
＜本文＞
aria-label属性はグローバルARIA属性ですが、WAI-ARIA 1.2では「名前付けできないロール（Roles which cannot be named）」が定義されました。
WAI-ARIA 1.2において、span要素のデフォルトのロールはgenericとなり、名前づけできないロールとなります。そのため、〓19〓のような実装は語彙的ルールに反します。これはaria-label属性による代替テキストを意図していると考えられますが、そもそもラベルは代替テキストではないことに注意しましょう。

<memo>
5.2.8.6 Roles which cannot be named (Name prohibited)
https://www.w3.org/TR/wai-aria-1.2/#namefromprohibited


〓19〓語彙的ルールに反した記述
＜コード＞
<span class="close-icon" aria-label="閉じる">
  <!-- 要素の内容は空だが、CSSでアイコンを表示 -->
</span>

＜小見出し＞
aria-labelledby属性（プロパティ）
＜本文＞
aria-labelledby属性はaria-label属性と同様の働きをしますが、ラベルの文字列を直接指定するのではなく、ラベルを含む要素のIDを指定する点が異なります。視覚環境でも見えているラベルがある場合に、そのラベルを要素に結び付けることができます。HTMLのlabel要素のfor属性と似ていますが、label要素とは参照の方向が逆となることに注意してください。
属性値は要素のID（id属性の値）です。IDの複数指定もでき、その場合はスペースで区切ります。複数指定されている場合、そのすべてが有効となり、順に読まれます。〓20〓のコード例のように、2つ以上の要素を連結させることもできます。

〓20〓aria-labelledby属性の記述例
＜コード＞
<div id="billing">請求書</div>
<div>
  <div id="name">名前</div>
  <input type="text" aria-labelledby="billing name"/>
</div>
<div>
  <div id="address">住所</div>
  <input type="text" aria-labelledby="billing address"/>
</div>

＜本文＞
1つ目のinput要素は「請求書 名前」、2つ目のinput要素は「請求書 住所」とラベル付けされます。
aria-label属性と同様に、元あったラベルが上書きされることに注意してください。〓21〓は、ラベルを持つボタンにaria-labelledby属性を指定した例です。

〓21〓ラベルを持つボタンにaria-labelledby属性を指定した例
＜コード＞
<div id="billing">請求書</div>
<button aria-labelledby="billing">
下書き保存する
</button>

＜本文＞
この例の場合、「請求書 ボタン」とだけ読み上げられ、「下書き保存する」は読み上げられません。ボタンのラベルも読み上げさせたい場合は、その要素にIDを付けて、自身のIDを参照します〓22〓。こうすると、「請求書 下書き保存する 送信ボタン」と読み上げることが期待されます。


〓22〓ボタンのラベルを読み上げさせる例
＜コード＞
<div id="billing">請求書</div>
<button id="submitbutton" aria-labelledby="billing submitbutton">
下書き保存する
</button>

＜本文＞
aria-labelledby属性では不可視の要素も参照できるため、不可視の要素を利用した細かい調整も可能です〓23〓。
こうすると不可視のspan要素の内容も参照されて「請求書 を 下書き保存する」というラベルになります。もっとも、実際にはここまでこだわらなくてもユーザーには十分伝わるでしょう。


〓23〓不可視の要素を利用した例
＜コード＞
<div id="billing">請求書</div>
<span id="billingsubname" hidden>を</span>
<button id="submitbutton" aria-labelledby="billing billingsubname submitbutton">
下書き保存する
</button>

＜本文＞
なお、画面上で可視のラベルを持つことができない場合は、aria-labelledby属性ではなくaria-label属性を使うべきです。
aria-labelledby属性とaria-label属性を同時に指定した場合は、aria-labelledby属性だけが有効となり、aria-label属性は無視されます。

<memo>
複数の方法でラベルを指定した場合の優先順位については、Chapter4-4のARIAコンセプト3の説明を参照してください。

＜小見出し＞
aria-describedby属性（プロパティ）
＜本文＞
aria-describedby属性を利用すると、その要素に対して「アクセシブルな説明（accessible description）」を提供できます。使い方はaria-labelledby属性とほとんど同じで、提供されるものが名前であるのか、説明であるのかという点が異なります。要素のIDを指定すること、複数指定が可能であることも共通です。
多くのスクリーンリーダーは、入力欄の種類とラベルを読み上げた後に説明文を読み上げます。〓24〓は、たとえば「新しいパスワード パスワード入力欄 半角英数記号、8文字以上512文字以下で入力してください」などと読み上げられます。

〓24〓aria-describedby属性の記述例
＜コード＞
<label>新しいパスワード
<input type="password" aria-describedby="new-pass-desc">
</label>
<p id="new-pass-desc">※半角英数記号、8文字以上512文字以下で入力してください</p>

＜小見出し＞
aria-current属性（ステート）
＜本文＞
aria-current属性は、その要素が「現在の項目（current item）」であることを示します。ページナビゲーション、ステップナビゲーション、パンくずリストなどで現在位置を示したり、カレンダーの中で今日の日付を示すことができます。
属性値として"true"と"false"を指定できますが、そのほかに、現在地の種類を示すトークンを指定できます。指定できるのは以下の5種類です。

・page：「現在のページ」であることを示します。
・step：「現在のステップ」であることを示します。
・location：「現在の位置」であることを示します。
・date：「現在の日付」であることを示します。
・time：「現在の時間」であることを示します。

〓25〓は、ページナビゲーションにaria-current属性を指定した例です。

〓25〓ページナビゲーションにaria-current属性を指定した例
＜コード＞
<ul>
  <li><a href="../1">1</li>
  <li><a href="../2">2</a></li>
  <li aria-current="page">3</li>
</ul>

＜本文＞
このようにすると、3番目の項目では「3 現在のページ」と読み上げることが期待されます。

<memo>
フォームコントロールやタブのようなコントロールで現在選択されている項目を表す場合は、aria-current属性ではなくaria-selected属性を使います。Chapter4-4の事例3. タブのマークアップを検討するも参照してください。

＜小見出し＞
aria-haspopup属性（プロパティ）
＜本文＞
aria-haspopup属性を指定すると、指定した要素がポップアップする何かを持っていることを示すことができます。典型的には、ポップアップメニューやダイアログボックスを表示するボタンに使用します。
テキストボックスとリストボックスを組み合わせたコンボボックスなどは、アイコンの視覚形状によってポップアップメニューが出ると推察できることが多いでしょう。しかしスクリーンリーダーの利用者には、そのような視覚形状は伝わらない場合があります。そのようなとき、この属性を利用すると、ポップアップメニューを出すボタンであることが伝わります。
属性値は"true"と"false"の他、以下のトークンを利用でき、何がボップアップするのかを示すことができます。

・menu
・listbox
・tree
・grid
・dialog

＜小見出し＞
aria-expanded属性（ステート）
＜本文＞
aria-expanded属性を利用すると、その要素が所有しているか、もしくはコントロールしている要素の開閉状態を示すことができます。属性値として"true"か"false"のいずれかを指定し、"true"は開いている、"false"は閉じている状態を示します。
たとえば、ボタンを押すと開閉するメニューのようなものがあるとき、ボタンの側にこの属性を指定することで、現在の開閉状態を示すことができます。〓26〓の例は、「パネルを開く」ボタンを押すことでその下の要素が開閉する想定です。

〓26〓ボタンを押すと下位の要素が開閉する記述例
＜コード＞
<button type="button">パネルを開く</button>
<div id="panel01">
開くコンテンツ
</div>

＜本文＞
「パネルを開く」を押すと文字どおりパネルが開き、視覚環境ではパネルが開いていることがわかります。しかし、スクリーンリーダーの利用者の場合、現在パネルが開いているのかどうかわかりません。すでに開いている状態にもかかわらず、そのことに気づかずボタンを押して閉じてしまうかもしません。aria-expanded属性を利用することで、スクリーンリーダーの利用者にも開閉状態が伝わります〓26〓。

〓26〓aria-expanded属性でパネルの開閉状態を指定
＜コード＞
<button type="button" aria-expanded="true" aria-controls="panel01">パネルを開く</button>
<div id="panel01">
開くコンテンツ
</div>

＜本文＞
この例の場合、多くのスクリーンリーダーは、ボタンにフォーカスすると「パネルを開く ボタン 開いています」などと読み上げます。これで、このボタンの操作対象が現在すでに開いていることがわかります。なお、この例では、開閉操作の対象の要素が何であるのかをaria-controls属性で示しています。aria-controls属性については後述します。
aria-expanded属性はグローバル属性ではなく、特定のロールを持つ要素にしか指定できません。基本的に、開閉を制御するボタンとなる要素に指定します。開閉される要素の側に指定するものではないことに注意してください。

<memo>
aria-expanded state
https://www.w3.org/TR/wai-aria-1.2/#aria-expanded

＜本文＞
なお、ボタンのラベルや他のARIA属性から十分に状態が推測できる場合は、必ずしもaria-expanded属性を指定しなくてもよい場合があります。たとえば、〓26〓ではボタンのラベル自体が「パネルを開く」となっているので、パネルが閉じている場合にはaria-expanded属性がなくても伝わる可能性が高いでしょう。同様の理由で、aria-haspopup属性を持っている要素にはaria-expanded属性を指定しなくてもよい場合があります。

＜小見出し＞
aria-controls属性（プロパティ）
＜本文＞
aria-controls属性を利用すると、その要素が制御する対象の要素を示すことができます。たとえば、メニューを開くボタンと開いたメニューを結び付けたり、タブとタブパネルを結び付けたりできるもので、典型的にはaria-expanded属性と組み合わせて使用します。
属性値は制御対象の要素のIDです。スペースで区切って複数の指定もできます〓27〓。

〓27〓aria-controls属性の記述例
＜コード＞
<div class="hamburgerMenu">
  <button aria-expanded="true" aria-controls="menu01">
    <span class="menu-icon"><img src="menu.png" alt="メニュー"></span>
  </button>
  <ul id="menu01">
      <li><a href="/">ホーム</a></li>
      <!-- メニュー -->
  </ul>
</div>

＜本文＞
aria-controls属性を独自に解釈するスクリーンリーダーでは、制御対象に移動できる機能を提供する場合があります。たとえばJAWSの場合、ボタンを読み上げたときにある組み合わせのキーを押すことで、メニューのul要素に移動し、メニュー内のリンクを読み上げていくことができます。
ただし、aria-controls属性に対応しているスクリーンリーダーはむしろ少数で、多くのユーザーがこのような機能を知らない状況です。また、aria-controls属性に対応しているJAWSでも、移動したあとで元いた場所に戻る手段は提供されていません。この属性があってもユーザーが使いこなすことは難しいため、他の手段と併用することをお勧めします。

＜小見出し＞
aria-level属性（プロパティ）
＜本文＞
aria-level属性は、要素の階層レベルを示します。属性値として整数を指定します。
典型的な利用法は、headingロールを持つ要素の見出しレベルを示すことです。HTMLにはh1〜h6の見出し要素が存在しますが、レベル7を超える見出し階層を表現したい場合や、何らかの理由で見出し要素が使えない場合に利用できます〓28〓。

〓28〓aria-level属性の記述例
＜コード＞
<div class="heading" aria-level="7">
見出し7
</div>


＜小見出し＞
aria-live属性（プロパティ）
＜本文＞
aria-live属性を使用すると、要素をライブリージョンとして定義したり、その動作を変更したりできます。

<memo>
ライブリージョンについての詳細は「ライブリージョンロール」を参照してください。

＜本文＞
aria-live属性に設定できる値は"off"、"polite"、"assertive"の3種類です。
offを指定した場合、ユーザーが該当のライブリージョンにフォーカスしているときのみ変化が伝わります。他の要素にフォーカスしている場合には何も伝わりません。広告や時計など、あまり重要でない情報に対して利用します。
politeを指定した場合、ライブリージョンの変化は、スクリーンリーダーのタスクが一段落した時点で通知されます。たとえば、スクリーンリーダーが他の箇所を読み上げている場合は、その読み上げが終わってから通知が行われることになります。
assertiveを指定した場合、ライブリージョンの変化は即座に伝えられます。スクリーンリーダーが他の箇所を読み上げている場合、その読み上げを強制的に中断することになります。極めて緊急性の高い通知をするときにのみ使用するようにしてください。
先に紹介したように、以下の5つのロールはライブリージョンの機能を持ちます。これらにはaria-live属性のデフォルトの挙動が定義されており、それぞれ以下のようになっています。

・alert : assertive
・log : polite
・marquee : off
・status : polite
・timer : off

これらのロールに対してaria-live属性を指定すると、デフォルトの挙動を上書きできます。とはいえ、挙動を変更することは推奨されません。とくにassertiveの指定は慎重に行ってください。
ライブリージョンが機能するためには、ドキュメントが読み込まれた時点であらかじめライブリージョンとして設定されていなければなりません。JavaScriptによって動的にaria-live属性を追加したり、role属性を上記のものに変更したりしても、その要素はライブリージョンにはなりません。

＜小見出し＞
aria-atomic属性（プロパティ）
＜本文＞
aria-atomic属性は、ライブリージョンの変化が発生したときに、支援技術にライブリージョン全体を通知するかどうかを設定します。
falseが設定された場合、ライブリージョンで変更された箇所のみを通知します。たとえば、ライブリージョンが設定された、時刻を表すシンプルな時計を考えます。時計の値が"17:33"から"17:34"に変更されたとき、支援技術は"4"のみを通知します。
trueが設定された場合、ライブリージョン全体を通知します。前述の時計の例では、全体の値"17:34"を通知します。
なお、ライブリージョンロールalertおよびstatusは、デフォルトでaria-atomic="true"を持ちます。つまり、このロールが設定された要素に更新が発生した場合、要素の内容の全体を通知します。
