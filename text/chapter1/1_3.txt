＜タイトル＞
HTML標準化の歴史

＜リード＞
Chapter1-1および1-2では、HTML仕様がどういったものかを大まかに説明しました。ここでは歴史を振り返りながら、HTML仕様が何を目指し、どのように発展してきたのかを説明します。

＜中見出し＞
仕様と標準
＜本文＞
HTMLの仕様はウェブで公開され、誰でも参照できます。
HTMLに限らず、技術仕様の多くは広く公開されています。その目的の1つは、仕様を広めることです。仕様が普及して、大多数の人に利用されるようになると、それは「標準（standard）」となります。そして、議論を重ねて標準を策定することを「標準化（standardization）」といいます。
仕様の標準化が不十分な場合、ベンダーが各自で仕様を定義することになります。ブラウザーベンダーがそれぞれ独自にHTML仕様を定義すると、特定のブラウザーでしか表示できないHTMLができてしまいます。

＜memo＞
実際、過去にはそのようなことが起こり、対象ブラウザーごとに異なる HTML を用意しなければならない状況もありました。

＜本文＞
仕様が標準化されれば、その仕様に従ったHTMLは、どのブラウザーでも問題なく閲覧できることになります。このように、1つの形式のデータを共通して扱える性質を「相互運用性（interoperability）」といいます。

＜中見出し＞
標準化団体
＜本文＞
仕様が標準化されたといえる1つの目安は、「標準化団体（standardizing organization）」によって正式に承認されることです。ここでは、ウェブやHTML仕様に関連する標準化団体をいくつか紹介します。

＜小見出し＞
国際標準-ISO/IEC規格
＜本文＞
「国際標準化機構（International Organization for Standardization, ISO）」は、世界的にもっとも有名な標準化団体の1つで、ISO規格と呼ばれるさまざまな国際規格を策定しています。
電気通信分野においては、「国際電気標準会議（International Electrotechnical Commission, IEC）」が有名です。とくに情報分野についてはISOと共同で標準化を行っており、その共同規格は「ISO/IEC」といいます。
ISO規格の規格番号は「ISO」で始まり、番号と発行年が続きます。規格が複数のパートにわかれる場合は、番号に枝番を付けます。また、IECとの共同規格の場合は「ISO」の部分が「ISO/IEC」となります。

＜memo＞
たとえばISOは「ISO 8601-1:2019」、IECとの共同規格では「ISO/IEC10646:2017」のようになります。

＜本文＞
規格は更新されると、発行年の部分が更新されます。発行年が重要でない場合は、単純に発行年を省略することもあります。
ウェブに関連する規格としては、コンピューターで扱う文字に関する規格（ISO/IEC 10646など）、日付の表記（ISO 8601）などがあります。HTMLのもとになった汎用マークアップ言語SGMLもISO規格になっています（ISO 8879）。

＜小見出し＞
日本の標準-日本産業規格（JIS）
＜本文＞
日本においては、「日本産業規格（Japanese Industrial Standards, JIS）」という標準があります。一般的には、「JIS規格」と呼ばれます。これは産業標準化法に基づいて日本産業標準調査会（JISC）が審議し、大臣が制定するものです。

＜memo＞
「日本産業規格」は以前、日本工業規格と呼ばれていましたが、2019年7月に工業標準化法が産業標準化法に改正され、規格の名称も日本産業規格に変わりました。

＜本文＞
JIS規格の規格番号はISO規格のものと似ていますが、番号の前に部門を表す部門記号が入ります。情報処理分野はXで、たとえば「JIS X 8341-3:2016」のようになります。

＜memo＞
Xの部門記号は1987年に追加されたもので、それ以前は電子機器と電気機械の部門であるCに分類されていました。たとえばJIS X 0201は、以前はJIS C 6220という規格番号でした。

＜本文＞
JIS規格の多くは対応する国際規格と内容が一致するものです。つまり、ウェブやコンピューターに関連する、ISO規格に対応するJIS規格があれば、日本語訳をJIS規格として読むことができます。

＜小見出し＞
インターネット技術の標準-IETFとRFC
＜本文＞
IETF（Internet Engineering Task Force）は、インターネット技術の標準化を行うための組織です。
IETFが発行する規格文書は「RFC（Request For Comments）」といいます。その多くは技術規格の標準化を目指すものですが、中には単なる参考情報や、エイプリルフールのジョークなどもあります。
RFCの番号は、単に「RFC+数字」の形式で、発行年は付きません。また、一度発行されると内容は変わらず、内容を更新する場合は新たに別のRFCを発行するのが大きな特徴です。たとえば、1998年に発行されたRFC 2396は2005年に更新され、RFC 3986となりました。

＜memo＞
RFCの更新や破棄の情報は、RFC index (https://www.rfc-editor.org/rfc-index.html) という文書で別途提供されています。IETF Datatracker（https://datatracker.ietf.org/）で提供されているHTML形式のRFCでは、更新情報を含むヘッダーが冒頭に追加されています。

＜本文＞
電子メールのメッセージ形式など、インターネット標準の数多くがRFCで標準化されています。ウェブ関連では、HTTPやURLの仕様、TLSなど通信プロトコルの仕様、JSONなどデータフォーマットの仕様などがあります。かつてはHTMLの仕様もRFCで標準化されていました。

＜丸見出し＞
RFCのステータス
＜本文＞
RFCは通常、Internet-Draftといわれるドラフト文書を経てRFCとなります。RFCの標準化過程には以下の3種類があります。

・Internet-Draft（I-D）：まだRFCになっておらず、番号が付与されていない草案の文書。中にはRFCになることを意図しないものもある
・Proposed Standard（PS）：番号が付与され、標準化過程（Standards Track）にあるもの。標準になる前の段階だが、コミュニティによる議論とレビューを経て安定したもので、インターネットで使用してもよい
・Internet Standard（STD）：標準化過程の最終段階。相互運用可能な実装が複数存在し、有益と認められたインターネット標準

標準化過程とは別の分類もあります。よく登場するのはBCP (Best Current Practice)で、「現時点で知られている最良の方法」といえる技術仕様に永続的な番号を与えたものです。参照するRFCが更新されてもBCPの番号は変わらず、新しいRFCを参照します。たとえば、IETF言語タグを定義するBCP 47は、当初はRFC 1766を指しましたが、2021年時点ではRFC 5646とRFC 4647を指しています。

＜memo＞
このほか、標準化過程にないRFCの分類には、参考情報（Info）、歴史的な資料（Hist）、実験的なもの（Exp）などがあります。RFCになったHTMLの仕様にはRFC 1886やRFC 2070などがありますが、これらは役割を終えており、Histに分類されています。

＜コラム＞
＜コラムタイトル＞
RFCのなりたち
＜本文＞
RFCは、もともとはRequest For Commentsの略でした。技術標準を示す文書が「意見を求む」という名前なのはなぜでしょうか。
インターネットの前身であるAPRAネット（Advanced Research Projects Agency Network）は、「米国国防総省国防高等研究計画局（DARPA, Defense Advanced Research Project Agency）」によって開発されました。当時は東西冷戦真っ只中であり、国防の観点からも、技術仕様を公式に公開することは難しかったのです。
そこで、ARPAネットの関係者はDARPAと交渉し、非公式に意見を募集するという体裁で公開の了承をとりつけました。こうして、国防総省から資金を得ながらも、オープンな形で議論を行うことができるようになったです。今日のインターネットがあるのは、当時の関係者の努力の賜物といえるでしょう。

＜小見出し＞
ウェブ技術の標準-W3Cと勧告
＜本文＞
バーナーズ＝リーがディレクターとなり、ウェブ技術に関する標準化を推進する団体として1994年に発足したのが「W3C（World Wide Web Consortium）」です。
W3Cが発行する標準は「勧告（recommendation）」と呼ばれます。ウェブ関連の仕様の多くがW3Cによるものであり、HTML以外にもXML、CSS、SVG、PNGなど、ウェブで利用するデータ形式を数多く規定しています。また、ウェブアクセシビリティに関するガイドラインである「WCAG（Web Content Accessibility Guidelines）」も作成しています。

＜丸見出し＞
W3C勧告の標準化過程
＜本文＞
W3Cの勧告は、ワーキンググループで議論して作成されます。W3C勧告の標準化過程は「W3Cプロセス文書（W3C Process Document）」で規定されており、「W3C勧告トラック（W3C Recommendation Track）」と呼ばれます。2021年現在、W3C勧告トラックには大きく4つの段階があります。

＜memo＞
W3C Process Document
https://www.w3.org/Consortium/Process/

＜本文＞
・Working Draft（WD）：作業草案と訳されるが、そのままワーキングドラフトと呼ばれることが多い。仕様の設計段階であり、ワーキンググループでの議論によっては、大きく内容が変更されることがある
・Candidate Recommendation（CR）：勧告候補。WDが数回の改訂を経て、比較的安定してきた段階。この段階で、実装の呼びかけと仕様のテストが行われる。CRを終了するには、2つの独立した実装が必要となる
・Proposed Recommendation（PR）：勧告案。CRが終了し、諮問委員会による最終レビューを受けている状態。最低28日間のレビュー期間を経て、問題がなければ勧告となる。問題があった場合はCRやWDに戻される
・Recommendation（REC）：勧告。仕様の最終段階で、ディレクターに承認された、安定した仕様

W3Cの仕様にはほかにもステータスが存在します。

・Superseded Recommendation（SPSD）：後続となる別の勧告文書が存在することを示すステータス。事実上の廃止を意味する
・Group Note（NOTE）：有益な参考情報、勧告を説明する付属文書など
・Editor's Draft（ED）：編集者草案と訳されるが、そのままエディターズドラフトと呼ぶことが多い。WDやNOTEと異なり、ワーキンググループの合意を得たものではない。編集者によって適宜更新される文書

Editor's Draftは、かつては限られた人しか見ることができませんでしたが、後述の「WHATWG Living Standard」の影響を受け、今日では多くのW3Cの「ワーキンググループ（Working Group）」で公開されています。

＜memo＞
NOTEは、以前のW3Cプロセス文書ではWorking Group Noteとされ、勧告化を断念した場合もこのステータスで示されていました。2021年のプロセス文書では、勧告化を断念した仕様に対してDiscontinued Draftというステータスが新設されました。

＜小見出し＞
現在のHTML仕様-WHATWGとLiving Standard
＜本文＞
WHATWG (Web Hypertext Application Technology Working Group)は、現在のHTML仕様を策定している団体です。当初はHTMLの仕様を策定することを目的に、ブラウザーベンダー主導の仕様策定コミュニティとして2004年に発足しました。後にDOMやFetch、URLといったHTMLの周辺仕様の策定も手がけるようになりました。

＜word＞
Fetch
URLで示されるリソースを取得すること

＜本文＞
IETFやW3Cと異なり、WHATWGの発行する仕様は、作業草案や勧告といった標準化過程のステータスを持ちません。仕様は単に「Standard」と呼ばれ、常に「Living Standard」と呼ばれるステータスになっています。仕様は、内容が確定することなく継続的に更新されます。
ウェブに関連するものとしては、最新のHTML仕様がWHATWGのものとなっています。そのほか、URLやDOMの仕様などを発行しています。

＜memo＞
WHATWGの仕様はGitHubで管理されているため、コミット履歴を追うことで過去の変更点を調べることが可能です。
https://github.com/whatwg 

＜中見出し＞
HTML仕様の歴史
＜本文＞
ここまで、ウェブ仕様に携わるさまざまな標準化団体を紹介してきました。HTML仕様は紆余曲折を経て、さまざまな団体によって発行されています。ここでは、HTMLの誕生から現在までの歴史を追いながら、HTML仕様がどのように発展してきたのかを見ていきます。

＜小見出し＞
HTML 1.0-Internet-Draft文書
＜本文＞
ウェブが初めてインターネット上で公開されたのは1991年のことです。バーナーズ＝リーによって、ウェブを構成するURL、HTTP、そしてHTMLの仕組みが作られました。
HTMLのルールは「SGML（Standard Generalized Markup Language）」という汎用マークアップ言語を参考にしていましたが、この時点では「文書型定義（Document Type Definition, DTD）」が存在しませんでした。文書型定義は、SGML文書の字句的ルールを定義するもので、これがないとSGMLパーサーは字句解析ができません。そのため、初期のHTMLは、SGMLとしては扱えないものでした。

＜memo＞
SGMLは汎用のマークアップ言語です。主にマニュアルのような文書を電子化するために策定されましたが、さまざまな性質の文書に対応できるように、マークアップのルールそのものをカスタマイズできます。

＜本文＞
その後、メーリングリストなどでの議論を経て、HTML 1.0のInternet-Draftが1993年にまとまります。この時点でDTDが整備され、リンク、見出し、リスト、画像の埋め込みといった、現在のHTMLでも用いられる基本的な要素が揃いました。

＜memo＞
Internet-Draft「Hypertext Markup Language (HTML)」
https://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt

＜小見出し＞
HTML 2.0-RFC 1866
＜本文＞
その後、HTML仕様はIETFで議論され、1995年にRFC 1886としてHTML 2.0の仕様が発行されます。form要素なども加わり、現在使われているHTMLの姿に近くなりました。

＜memo＞
RFC 1886「Hypertext Markup Language-2.0」
https://datatracker.ietf.org/doc/html/rfc1866

＜本文＞
ただし、この仕様は、厳密にいえば日本語の文字が使えないものでした。仕様上で日本語が使えると規定されたHTMLは、国際化が検討された1997年のRFC 2070を待たなければなりませんでした。

＜memo＞
RFC 2070「Internationalization of the Hypertext Markup Language」
https://datatracker.ietf.org/doc/html/rfc2070

＜丸見出し＞
HTML 2.0のその後
＜本文＞
HTML 2.0には、文書の見た目の装飾を行う機能がありませんでした。文字の色を変えることさえできなかったのです。その一方で、コンテンツ制作者は、ウェブコンテンツの見た目を変えたいと考えました。
そこで、当時のブラウザーベンダーは、独自の要素や属性を追加しました。文字の色や大きさを変更するfont要素、配置を設定するalign属性、文字を点滅させるblink要素などが実装されました。
この動きに複数のブラウザーベンダーが追随しますが、ブラウザーによって対応状況が異なり、挙動が異なることも頻繁にありました。特定のブラウザーでなければ閲覧できないサイトも珍しくありませんでした。

＜memo＞
たとえば、あるブラウザーはblink要素による点滅に対応していましたが、他のブラウザーは対応せず、そのかわりにmarquee要素で文字を動かせるといった状況がありました。

＜本文＞
このような状況の中、IETFのワーキンググループではHTML 3.0の標準化作業が行われます。さまざまな新要素を意欲的に追加しようとしましたが、過去のHTMLと互換性がないという問題もあり、結局、この仕様はまとまりませんでした。

＜小見出し＞
HTML 3.2-W3C勧告となった最初のHTML
＜本文＞
その後、HTMLの仕様策定の議論の場は、IETFからW3Cへと移ります。HTML 3.0とは大きく方針が変わり、過去のHTMLとの互換性や、ブラウザーの実装を尊重する形で仕様がまとめられました。この仕様はHTML 3.2として、1997年1月にW3C勧告となりました。

＜memo＞
HTML 3.2 Reference Specification
https://www.w3.org/TR/2018/SPSD-html32-20180315/

＜本文＞
HTML 3.2では、RFC 1942のtable要素が取り込まれたほか、font要素やalign属性など、文書の見た目を制御する機能が正式に仕様に取り込まれました。

＜memo＞
ほぼ同時期に完成したRFC 2070の国際化の機能は、HTML 3.2には取り込まれませんでした。そのためHTML 3.2も、HTML 2.0と同様に、正式には日本語の文字が扱えない仕様となっています。
1996年12月には、「スタイルシート（style sheet）」の仕様であるCSS1もW3C勧告となっていますが、同様に正式には取り込まれていません。style要素の定義はありましたが、予約されているだけでした。

＜小見出し＞
HTML4-W3C勧告として安定した仕様
＜本文＞
その後、1997年12月にW3Cの勧告となったのがHTML 4.0です。

＜memo＞
HTML 4.0 Specification
https://www.w3.org/TR/REC-html40-971218/

＜本文＞
HTML4ではstyle要素やscript要素があらためて定義され、正式にスタイルシートやJavaScriptが使えるようになりました。見た目はスタイルシートで制御することが推奨され、見た目を制御する要素や属性は「非推奨（deprecated）」とされました。
HTML4では、要素の定義自体を大きく「Strict」と「Transitional」の2つにわけ、前者を非推奨の機能が使えない厳密な枠組みとしつつ、後者ではそれらが使える緩やかな枠組みとし、互換性に配慮しました。

＜memo＞
「Strict」と「Transitional」のほかに、フレーム分割された文書を定義するための「frameset文書」という定義も存在しました。

＜本文＞
そして、この仕様で大きく取り上げられたのが「アクセシビリティ（accessibility）」です。フォーム部品にラベルをつけるためのlabel要素が定義され、代替テキストを表すimg要素のalt属性が必須となりました。また、WCAG（Web Content Accessibility Guidelines）が参照され、アクセシビリティ上の注意点にも言及するようになりました。なお、アクセシビリティについてはChapter1-4（P000）で詳しく説明します。
その後、1999年に、マイナーな改訂版であるHTML 4.01が勧告となりました。これをもって、HTMLは成熟したSGMLアプリケーションとして確立され、安定期を迎えました。

＜memo＞
HTML 4.01 Specification
https://www.w3.org/TR/html401/

＜小見出し＞
XHTML 1.0とXHTML 1.1
＜本文＞
HTML 4.0の勧告のあと、1998年には「XML（Extensible Markup Language）」の仕様が勧告となります。XMLは、SGMLからいくつかの機能を取り去り、同時にマークアップのルールを厳密にすることで、プログラムから扱いやすくした汎用マークアップ言語です。

＜memo＞
Extensible Markup Language (XML) 1.0 (Fifth Edition)
https://www.w3.org/TR/xml/

先に触れたように、SGML文書には文書型定義が必要でしたが、これを簡素化したのがXMLです。XMLでは、仕様の規定として字句的ルールを制限したのです。たとえば、要素の終了タグは常に省略できないと決められているため、文書型定義の影響を受けません。これにより、文書型定義なしで字句解析ができるようになりました。

＜memo＞
XMLでも文書型定義を用意することはでき、これによって語彙的ルールを定義できます。文書型定義がない場合、語彙的ルールは考慮されません。

＜本文＞
XML 1.0の仕様が勧告になると、XMLブームともいえる状況が沸き起こり、さまざまなプログラムがXMLを扱うようになりました。その中で、HTMLもXMLで再構築しようという流れが出てきます。
こうして、XMLの仕様に基づいたHTMLの仕様として、XHTML 1.0が2000年に勧告となりました。新たな要素は追加されておらず、HTML4をそのままXHTMLにしたものです。

＜memo＞
XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)
https://www.w3.org/TR/xhtml1/

＜本文＞
その後、XMLの持つ拡張性という側面を生かし、XHTMLをモジュール化しようという試みがありました。こうして、2001年にXHTML 1.1が勧告となります。基本的な要素はHTML4と変わりませんが、rubyモジュールが追加され、文字にルビを振ることができるようになりました。

＜memo＞
XHTML 1.1 - Module-based XHTML - Second Edition
https://www.w3.org/TR/xhtml11/

＜memo＞
Ruby Annotation
https://www.w3.org/TR/ruby/

＜memo＞
XHTML2を策定する試みもありましたが、仕様はまとまらず、2009年には仕様策定の打ち切りが決まりました。

＜中見出し＞
現在のHTML
＜本文＞
HTML4の仕様は、文書をマークアップするのに十分な機能を持っていました。HTML4の仕様が勧告されて以降、XHTMLの試みがあり、ルビの機能が追加されたものの、HTMLの仕様そのものには大きな動きがありませんでした。
しかしこの間に、ウェブコンテンツの側には大きな潮流の変化がありました。ユーザーが単に文書を表示して読むだけでなく、ユーザーの操作に対してウェブコンテンツが動的に変化するようになっていったのです。

＜小見出し＞
Web Applications 1.0
＜本文＞
ウェブアプリケーションと呼ばれるものは以前からありました。ただしその当時は、静的HTMLのフォームからデータを送信して、サーバー側で処理することが一般的でした。
その後、ブラウザーの表現力の向上にともない、動的に変化するコンテンツや、複雑なユーザーインターフェイスを実現できるようになりました。これらは、従来よりも豊かな表現であるという意味で、「リッチインターネットアプリケーション（Rich Internet Application）」と呼ばれました。

＜memo＞
単にリッチアプリケーションと呼ぶこともあります。

＜本文＞
リッチアプリケーションを表現するには、HTML4の仕様の持つ機能では不十分であり、FlashやActiveXといった技術が積極的に用いられました。
その一方で、ブラウザーベンダーからは、HTMLの表現力を強化する必要があり、HTMLを再開発すべきという提案がなされました。しかし、この提案はW3Cでの投票により却下されてしまいます。
このような経緯から、2004年にMozilla、Apple、Operaという3つのブラウザーベンダーが中心となって、WHATWGコミュニティが発足しました。同年、Web Applications 1.0という名前のHTML仕様が発行されます。このHTML仕様は、HTML4の次のHTMLという意味で、俗に「HTML 5」と呼ばれることになります。

＜丸見出し＞
SGMLからの脱却
＜本文＞
これまでのHTML仕様は、SGMLの規格を満たすものとして整備され、字句解析に必要となるDTDが用意されていました。
しかし、実際に書かれたHTML文書は、必ずしもSGMLのルールに沿っていませんでした。ルールに沿わないHTMLを扱うために、ブラウザーは、仕様と異なる独自の字句解析ルールを発展させていったのです。
Web Applications 1.0は、この不整合を大胆に解決しました。SGMLの字句解析ルールに従うことをやめて、ブラウザーが実際に備えているルールを取り込んだ、独自にルールを定義したのです。
このルールに従った記述を「HTML構文（HTML syntax）」といいます。現在のHTML文書のほとんどは、このHTML構文で書かれています。
その一方で、XMLの字句的ルールに沿って記述することも選択できるようにしました。これを「XML構文（XML syntax）」といいます。XML構文では、字句的ルールは完全にXMLの仕様に従い、HTML仕様は語彙的ルールだけを提供します。XML構文はXMLと完全な互換性があるため、XMLプロセッサーで処理できるというメリットがあります。

＜小見出し＞
W3C HTML 5
＜本文＞
当初、W3CはこのHTMLの策定に興味を示しませんでしたが、2006年にバーナーズ＝リーが自身のブログで、HTMLの策定作業をW3Cで行う意志があることを発表しました。その翌年、WHATWGと共同でW3CでのHTML5の策定作業が始まります。
しかし2012年に、仕様を堅牢なものにして勧告を発行したいW3Cと、期限を区切らず仕様を更新し続けたいWHATWGという両者の仕様に対する策定方針の違いが浮き彫りになり、別々の道を歩むことになります。
その後の2014年、W3Cは正式に「HTML 5（以下、HTML 5.0）」と銘打ったHTML仕様を勧告として発行しました。実にHTML4から15年の時を経ての大改訂となりました。

＜memo＞
HTML 5
https://www.w3.org/TR/2018/SPSD-html5-20180327/

＜小見出し＞
仕様の並立と迷走
＜本文＞
その間にも、WHATWGによるHTML仕様の更新は順調に続けられ、活発に更新されていきました。W3Cは、WHATWGの仕様との差分を取り込んで、HTML5の仕様を改定しようとします。
しかし、WHATWGの仕様が随時更新されるのに対して、W3Cの仕様はステータスを安定させる必要があるために、その調整に多大な労力を費やすことになりました。
2016年11月にHTML 5.1が、2017年12月にHTML 5.2がW3C勧告になりましたが、WHATWGのHTML仕様との食い違いがあったり、文書内部で記述内容の矛盾が見られるといった問題が散見されました。

＜memo＞
HTML 5.1
https://www.w3.org/TR/2021/SPSD-html51-20210128/

HTML 5.2
https://www.w3.org/TR/2021/SPSD-html52-20210128/

＜本文＞
こうして、HTMLという1つの技術に対し、2つの異なるHTML仕様が並立することになりました。ブラウザーベンダーはW3CのHTML仕様を無視してWHATWGのHTML仕様を更新し続け、コンテンツ制作者はどちらの仕様を参照すればよいか混乱するという、誰にとっても望ましくない状況に陥りました。

＜小見出し＞
仕様の一本化
＜本文＞
このような分裂状態の中、W3CとWHATWGは、HTML仕様を一本化できないか水面下で模索し始めます。W3Cは、2018年10月に発行したレポートの中で、2つのHTML仕様が並立する状態がharmful（有害）であることを公式に言及しました。

＜memo＞
W3C Strategic Highlights - October 2018
https://www.w3.org/2018/10/w3c-highlights/

＜本文＞
そして2019年5月に、W3CとWHATWGの間に覚書が取り交わされました。この覚書では、両者のHTML仕様について以下のような取り決めがなされました。

＜memo＞
Memorandum of Understanding Between W3C and WHATWG
https://www.w3.org/2019/04/WHATWG-W3C-MOU.html

＜本文＞
・W3CによるHTML 5.3の策定作業を中止する
・WHATWG HTMLのReview Draftに対して、W3Cの仕様のステータスを付与する
・Review DraftがW3C勧告のステータスに到達した時、HTML 5.1とHTML 5.2を廃止する
・https://www.w3.org/TR/html/ をWHATWG HTMLにリダイレクトする

これにより、WHATWGのもとでHTML仕様が再び一本化されることになりました。そして、2021年1月に発行されたReview DraftはW3C Recommendationに認定され、HTML 5.1とHTML 5.2はHTML 5.0と同様に廃止されました。W3Cが勧告したすべてのHTMLは廃止され、WHATWG HTMLが名実ともに唯一のHTML仕様となったのです〓01〓。

＜memo＞
HTML Review Draft January 2020
https://html.spec.whatwg.org/review-drafts/2020-01/

〓01〓主要なHTMLの系譜
（あとで図版化）
