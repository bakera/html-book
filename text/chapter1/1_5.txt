＜タイトル＞
URL
＜リード＞
ウェブは、HTML、URL、HTTPという3つの技術に支えられています。ここでは、HTMLと密接に関係するURLの概要を紹介します。

＜中見出し＞
URLとは
＜本文＞
URLは、リソースの場所を特定するための汎用的な識別子です。ネットワーク上の他のコンピューター上のリソースも指すことができ、ハイパーリンクのリンク先を示すのに使われます。URLの仕様は、現在ではWHATWG URL Standardで定義されています。
〓01〓は、仕様で定義されるURLの例です。

<memo>
WHATWG URL Standard
https://url.spec.whatwg.org/


〓01〓仕様で定義されるURLの例
＜コード＞
https://example.com/
https://example.com:443/foo/bar.php?q=xxx#result
mailto:info@example.com
file:////accesskey.html

＜本文＞
このように、URLにはさまざまな種類のものがあり、種類に応じて書式も異なります

＜中見出し＞
URLの書式
＜本文＞
ここでは、ウェブで最もよく利用されるhttpsのURLについて、その書式を紹介します。https URLの構成要素は、スキーム、ホスト、ポート、パス、クエリー、フラグメントの6つになります〓02〓。

〓02〓URLの構成要素
リデザイン

＜小見出し＞
スキーム
＜本文＞
先頭のhttpsの部分は「スキーム（Scheme）」と呼ばれます。スキームはURLの種類や性質そのものを表しており、スキームが異なるとURLの書式も異なります。
URLのスキームはIANAに登録されており、Uniform Resource Identifier（URI）Schemesで確認することができます。

<memo>
Uniform Resource Identifier（URI）Schemes
https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml

＜本文＞
従来、ウェブで最もよく利用されていたのはhttpスキームでした。これはHTTPで通信を行ったリソースを取得するスキームで、ウェブページそのものの場所を指すのに利用するほか、ウェブコンテンツで利用する画像など各種のサブリソースを参照する際にも利用します。
現在では、httpsスキームがよく利用されています。これはhttpと似ていますが、HTTP通信の際、「TLS（Transport Layer Security）」で保護された通信経路を用いることで、通信相手のなりすましや通信の傍受、改竄を防ぐ仕組みになっています。

<memo>
httpsはRFC 7230で定義されています。
https://www.rfc-editor.org/rfc/rfc7230#section-2.7.2

<memo>
2021年10月現在、最もよく利用されるのはTLS 1.2で、RFC 5246で定義されています。RFC 8446で定義されるTLS 1.3も用いられています。

＜小見出し＞
ホスト・ポート
＜本文＞
スキームの後は、1文字の:（U+003A、コロン）で区切ります。その後に続く内容はスキームによって異なりますが、httpsの場合には「ホスト（host）」が書かれます。ホストは、ドメイン名かIPアドレスのいずれかで、ほとんどの場合ドメイン名が使用されます。
ホストの後ろには「ポート（port）」の情報が来ることがあります。ポートは省略でき、httpsの場合デフォルトポートは443となります。〓03〓の2つのURLは同じリソースを指します。

〓03〓ポートの省略
＜コード＞
https://example.com/
https://example.com:443/

<memo>
:（コロン）の前までをスキームと呼ぶこともあれば、スキームであることを明確にするために、:(コロン）まで含めて記述することもあります。本書では、URL Standardに従って、:（コロン）を含めないものをスキームと呼びます。 

＜小見出し＞
パス
＜本文＞
ホストの後ろ（ポートが記述されている場合はポートの後ろ）には、「パス（path）」の記述が続きます。パスは、そのホスト内でリソースを特定するための記述です。
パスは/（U+002F、スラッシュ）で始まり、さらに複数の/で区切って階層化することもできます〓04〓。

〓04〓パスの記述例
（コード）
https://example.net/foo/bar/baz.html

＜小見出し＞
クエリー
＜本文＞
パスの後ろには、「クエリー（query）」と呼ばれる文字列が付くことがあります。クエリー付ける場合は、?（U+003F、疑問符）の1文字で区切ります。
クエリーとは、「問い合わせ」という意味です。GETメソッドと呼ばれる方式のフォームを送信すると、フォームに入力したデータがURLの末尾に付けられ、URLを通じてサーバーに送信されます。これがクエリーで、サーバーに対する問い合わせに使うことからこの名前が来ています。
クエリーはフォーム送信時だけでなく、アクセス元をトラッキングしたり、キャッシュを更新させる目的で使われることもあります。

＜小見出し＞
フラグメント
＜本文＞
フラグメント
＜本文＞
URLの末尾には、「フラグメント（fragment）」と呼ばれる文字列が付くことがあります。フラグメントを付ける場合は、#（U+0023、番号記号）の1文字で区切ります。
フラグメントとは、「断片」という意味です。URLは特定のリソースを指しますが、そのリソース中の一部分を指したいときにフラグメントを使用します。HTMLの場合は、id属性で指定された名前をフラグメントとして指定すると、HTML文書の特定の箇所を指すことができます。
フラグメントは「ハッシュ（hash）」と呼ばれることもあります。これは、区切りに使用する文字#が、別名でハッシュとも呼ばれるためです。たとえば、JavaScriptではlocation.hashでフラグメントの値を参照できます。

＜中見出し＞
ドメイン・サイト・オリジン
＜本文＞
主にセキュリティ上の理由から、2つのリソースが同一サイトに属するかどうかを判断したい場合があります。これはURLを比較して判断できます。
URLのホストが一致している場合、「同一ドメイン（same domain）」であるといいます。ホストはIPアドレスで記述することもできますが、多くの場合はドメイン名で表記されるため、同一ドメインという呼び方がなされます。
ホストに加えて、さらにポートも同一の場合、すなわちホスト、ポートの両方が同一である場合、それらを「同一サイト（same site）」であるといいます。さらにスキームも同一の場合、すなわちスキーム、ホスト、ポートのすべてが同一である場合、それらを「同一オリジン（same origin）」であるといいます。
ウェブのセキュリティモデルは、原則としてオリジンの考え方にもとづきます。この考え方を「同一オリジンポリシー（same-origin policy）」といい、オリジンが同一でないリソースの扱いに制限を課すことがあります。同一オリジンポリシーの詳細は、MDNを参照してください。
ただし、歴史的な理由で、オリジンではなくサイトの考え方を採用しているケースもあります。その典型例は「クッキー（Cookie）」です。同一サイトであればスキームが異なってもクッキーを送信するため、httpsスキームでクッキーを利用する場合は、クッキー側でSecure属性を指定するといった配慮が必要になります。

<memo>
同一オリジンポリシー
https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy


＜中見出し＞
クロスオリジンアクセス
<本文＞
あるリソースが、現在のリソースと異なるオリジンであるとき、これを「クロスオリジン」(cross origin)といいます。クロスオリジンのリソースにアクセスすることを「クロスオリジンアクセス」といいます。
たとえば、ウェブフォントやJavaScriptのライブラリを外部のサービスから読み込むような場合、「これはクロスオリジンでアクセスしている」といえます〓05〓。

<memo>
同様に、ドメインが異なるもの、サイトが異なるものをそれぞれ「クロスドメイン」「クロスサイト」といいます。ただし、ドメイン、サイト、オリジンを厳密に区別せずに、同じ意味で使われることもあります。

〓05〓クロスオリジンアクセスの例
＜コード＞
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?xxxx">
<script src="https://cdnjs.cloudflare.com/ajax/libs/xxx.js"></script>

＜本文＞
単純にHTMLの表示にクロスオリジンのリソースを利用する場合、通常はクロスオリジンでの参照が可能です。〓05〓のような例も問題なく動作します。
ただし、HTML側のJavaScriptからは、クロスオリジンで取得したサブリソースの内容を読み取ることができないようになっています。これは、たとえ悪意あるコンテンツを表示しても、他のオリジンのリソースを読み取られないようにするためです。
クロスオリジンで取得したリソースを読み取る必要がある場合は、CORS（Cross-Origin Resource Sharing）と呼ばれる仕組みを利用することができます。CORSの詳しい説明はMDNを参照してください。

<memo>
オリジン間リソース共有（CORS）
https://developer.mozilla.org/ja/docs/Web/HTTP/CORS

＜コラム＞
＜コラムタイトル＞
コラム: URLという言葉の歴史
＜本文＞
URLという言葉は多くの読者に馴染みがあることでしょう。この言葉は混乱を乗り越えてきた歴史があります。
バーナーズ＝リーが最初に提唱したURLは、「Universal Resource Locator」の略称でした。後に、「Uniform Resource Locator」の略称とされ、最初期にはRFC 1630、次にRFC 1738として標準化されました。
その後、リソースを場所ではなく名前で特定する「URN（Uniform Resource Name）」という方式が提唱され、RFC 2141で規定されます。そして、URLとURNをあわせたものを「URI（Uniform Resource Identifier）」と呼ぶようになりました。URIは最初にRFC 2396、その後にRFC 3986として標準化されました。古いHTML4の仕様ではURIという表記が使われています。
その後、URIの国際化表記である「IRI（Internationalized Resource Identifier）」がRFC 3987として標準化されます。こうして、URL、URI、IRIという3種類の表記が生まれました。URLはURIの一種であり、URIはIRIの一種です。URLという言葉が使える文脈では、3つのどれを使っても意味が通じます。
さまざまな技術仕様で、技術用語としてURIやIRIが用いられました。しかし、各技術仕様で規定しているURIやIRIがそれぞれ微妙に異なり、技術的な内容としても混乱していました。その一方で、世間一般ではURIやIRIはそこまで知られておらず、URLという言葉が使われ続けていたのです。
そこでWHATWGは、URL、URI、IRIの概念を統合・整理し、あらためて再度「URL」と名付けることにしました。名前がURL→URI→IRIと変遷した上で、もう一度URLに戻ってきたということになります。現在のWHATWG URLは、Uniform Resource Locatorの略ではなく、単にURLという名前のものであるとされています。