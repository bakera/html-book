＜タイトル＞
技術情報との関わり方
＜リード＞
Chapter1では、HTMLとその周辺の技術仕様について紹介してきました。ここではChapter1全体のまとめとして、HTML仕様の読み方、技術仕様との関わり方について紹介します。

＜中見出し＞
HTML仕様を読む
＜本文＞
ここまで紹介してきたように、HTML仕様は標準化され、技術文書として公開されています。現在有効なHTML仕様は、WHATWGが公開しているHTML Standardです。

＜memo＞
HTML Standard
https://html.spec.whatwg.org/multipage/

＜小見出し＞
仕様のURLとバリエーション
＜本文＞
Chapter1-3で触れたように、WHATWGの仕様は同じURLで常に更新され続けます。そのため、URLに日付やバージョン番号は含まれませんが、いくつかのバリエーションがあります。
URLにmultipageと含まれるものは、複数ページ版（Multipage Version）です。通常はこの版を参照するとよいでしょう。
URLからmultipage/を削除すると単一ページ版（One-Page Version）になります。HTML Standardは内容が膨大であるため、読み込みに長い時間がかかりますが、オフラインで参照するために保存したり、印刷したりするのに向いています。
また、コンテンツ制作者向けとして、ブラウザーベンダー向けの情報を省いたEdition for Web Developerというバージョンが存在します。

＜memo＞
HTML Standard, Edition for Web Developer
https://html.spec.whatwg.org/dev/

＜小見出し＞
仕様の言語と日本語版
＜本文＞
ほとんどのインターネット関連の仕様と同様に、HTMLの仕様も英語で書かれています。ただし、HTML仕様の場合、有志による日本語訳が公開されており、これを読むこともできます。

＜memo＞
HTML Standard（日本語訳）
https://github.com/whatwg/html/wiki/Translations

＜本文＞
正式な仕様はあくまで英語版であり、日本語訳は参考に過ぎないことに注意してください。正確なニュアンスを掴むためには、機械翻訳や辞書などを使いながら自力で読む必要があるでしょう。
筆者のおすすめは、まず日本語訳を読んでみて、意味がよくわからない箇所は原文に当たるという方法です。日本語では表現の難しい言葉や概念も、あらためて原文で読むと理解できる場合があります。

＜memo＞
日本語で読んで意味がわからない箇所は、誤訳の可能性があります。誤訳に気付いた際は、訳者にフィードバックを送り、翻訳の品質向上に貢献してもよいでしょう。

＜小見出し＞
HTML仕様の目次を利用する
＜本文＞
仕様の冒頭には目次があります。目次から必要な箇所を探し、目的の章に当たるというのが基本的な使い方になるでしょう。
とはいえ、どの章に何が書かれているかわからないことも多いでしょう。以下に、よくありそうな用途と、その情報が2021年10月時点でどの章に書かれているかを簡単に紹介します。

＜memo＞
各章の簡単な説明は仕様にも記載されています。
1.9 Structure of this specification
https://html.spec.whatwg.org/multipage/introduction.html#structure-of-this-specification

＜丸見出し＞
HTMLの要素について詳しく知りたい
＜本文＞
HTMLの要素については、仕様の4章「The elements of HTML」に書かれています。本書でもChapter3で要素の解説をしていますが、最新の正確な定義を知りたい場合はこちらを参照してください。

＜丸見出し＞
HTMLの構文について詳しく知りたい
＜本文＞
HTMLの構文（シンタックス）と字句的ルールについては、13章「The HTML syntax」に記載があります。不正なHTMLがどう解釈されるかといった情報も書かれています。
ただし、パーサーの実装者向けの情報が中心となるため、コンテンツ制作者には難解かもしれません。構文については本書のChapter2でも解説しています。

＜丸見出し＞
JavaScriptと連携する機能の情報が知りたい
＜本文＞
6章「User interaction」にはインタラクションに関する属性の情報があります。その他、7章から12章にかけて各種のAPIの情報が書かれています。

＜丸見出し＞
古いHTMLとの互換性について知りたい
＜本文＞
過去のHTMLにはあったものの、現在では廃止された機能については、16章「Obsolete features」に書かれています。
現在の仕様で廃止された機能の中には、互換性のためにブラウザーの挙動が定義されているものもあり、「旧式だが適合する機能（obsolete but conforming）」として規定されています。これはブラウザーによって適切に解釈されることが期待できますが、新規に作成するHTMLで使用するべきではありません。HTMLチェッカーも警告を出します。
現仕様では完全に廃止され、互換性のためのブラウザーの挙動も定義されていない機能は「適合しない機能（non-conforming features）」とされています。これらについては、ブラウザーのサポートも期待できません。

＜小見出し＞
索引から探す
＜本文＞
HTML仕様には索引も存在します。特定の要素や属性について調べたい場合は、索引（index）ページ〓01〓を開き、ブラウザーのページ内検索の機能を使うと便利です。

＜memo＞
Index
https://html.spec.whatwg.org/multipage/indices.html

〓01〓
HTML仕様の索引ページ

＜中見出し＞
仕様を読む上で注意が必要な点
＜本文＞
実際に仕様の内容を読む場合、慣れていないと混乱しやすい点がいくつかあります。注意が必要な点をいくつか紹介します。

＜小見出し＞
WHATWG仕様の共通ルール
＜本文＞
WHATWGの策定する仕様の共通ルールは、Infra Standardという文書にまとめられています。HTML仕様における用語の使い方や記述のルールはこの文書に従っているため、必要に応じて参照する必要があります。

＜memo＞
Infra Standard
https://infra.spec.whatwg.org/

＜小見出し＞
ブラウザーベンダー向け情報が含まれている
＜本文＞
HTML仕様の1章には、「How to read this specification」というセクションがあります。

＜memo＞
How to read this specification
https://html.spec.whatwg.org/multipage/introduction.html#how-to-read-this-specification

＜本文＞
このセクションで強調されているのは、仕様にはコンテンツ制作者（プロデューサー）に向けた情報と、ブラウザーベンダー（コンシューマー）に向けた情報の両方が含まれていることです。
たとえば、仕様でimg要素のborder属性がどのように定義されているのかを調べると、以下の2つの情報に辿り着きます。

・3章では、border属性は定義されていないように書かれている
・16章では、border属性が存在し、特定の値を解釈する必要があると書かれている

両者は矛盾するように見えますが、前者はコンテンツ制作者向け、後者はブラウザーベンダー向けの情報です。コンテンツ制作者はborder属性を使うべきではありません。しかし、ブラウザーは互換性のため、border属性が存在する場合、その値を処理することが要求されるのです。
ブラウザーが解釈するからといって、コンテンツ制作者向けの仕様を満たすとは限りません。ブラウザーベンダー向けの情報に沿ってコンテンツを作成しないように注意しましょう。

＜小見出し＞
規範部分と参考部分
＜本文＞
仕様の見出しの直下に、次のような文言が存在することがあります。

＜引用　囲み＞
This section is non-normative.
＜/引用　囲み＞

＜本文＞
技術仕様は一般に、規範（normative）とされる部分と、参考（informativeまたはnon-normative）とされる部分にわけられます。仕様として規定されているのは規範部分のみであり、参考部分は仕様の理解を助けるためのものに過ぎません。仮に規範部分と参考部分に食い違いがある場合、規範部分が優先されます。
HTML仕様の場合、参考部分には上に挙げた注記が付いており、参考であることが明記されています。逆に、特に断りがない場合、本文は規範部分となります。ただし、本文に含まれる例と注、図は参考情報です。WHATWGでは、Infra Standardに次のように明示されています。

＜引用　囲み＞
All assertions, diagrams, examples, and notes are non-normative, as are all sections explicitly marked non-normative. Everything else is normative.
＜/引用　囲み＞

＜小見出し＞
RFC 2119のキーワード
＜本文＞
仕様はさまざまなルールを規定しています。その中には、ルールに従う義務があるものと、そうでないものがあります。このようなルールの縛りの強さは、RFC 2119で定義されるキーワードで示されます。

＜memo＞
RFC 2119
https://datatracker.ietf.org/doc/html/rfc2119

＜memo＞
RFC 6919という、キーワードに関するジョークRFCも存在しています。
https://datatracker.ietf.org/doc/html/rfc6919

＜本文＞
〓02〓RFC 2119キーワードと日本語の対応
＜表＞
キーワード	典型的な日本語訳	意味
must	～しなければならない	必須
should	～すべきである	推奨
may	～してもよい	許容
should not	～すべきではない	緩い禁止
must not	～してはならない	禁止

＜本文＞
「必須」および「禁止」は、必ず守らなければならない事項です。この要求事項を守れなかった場合、仕様に違反することになります。「推奨」とは、指示に従わない特別な理由がなければ、指示通りにすることが求められる事項です。「許可」とは、オプションであり、どちらでもよい事項です。
たとえば、meta要素にはcharsetという属性があります。この属性値について、HTML 5.0では以下のように書かれていました。

＜引用　囲み＞
If the attribute is present, its value must be an ASCII case-insensitive match for the string "utf-8".
＜/引用　囲み＞

「この属性が存在する場合、その値は"utf-8"でなければならない」とされています。この場合、HTML仕様に則ったHTMLであるためには、例外なく常にUTF-8でなければならないことを意味します。

＜小見出し＞
他の仕様の参照
＜本文＞
技術仕様は一般的に、他の仕様を参照しています。HTML仕様も多数の技術仕様を参照しおり、参照する仕様の一覧は、仕様のReferencesの章に掲載されています。

＜memo＞
References
https://html.spec.whatwg.org/multipage/references.html

＜本文＞
ときには、仕様の規定が別の仕様に違反する場合もあります。Chapter1-3で説明したように、HTML仕様は、仕様に反したブラウザーの実装をあえて取り込んだ経緯があります。そのような自覚的な違反は、そのような意図的な違反は、「故意の違反（willful violation）」として明示しています。
たとえば、<input type="email">の入力欄に入力されたメールアドレスが適切かどうかを検証する際のルールについて、RFC 5322に対する故意の違反である旨が注釈に記載されています。

＜memo＞
https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address

＜中見出し＞
周辺技術の仕様を参照する
＜本文＞
ウェブページを制作する際には、HTMLだけでなく、CSSやJavaScript、URLやHTTPなど、周辺技術の仕様を参照することも必要です。Chapter1-3で紹介したように、技術仕様はさまざまな標準化団体によって標準化されています。
一般に、インターネットに関する仕様は、各標準化団体のウェブページで公開されています。

＜memo＞
ISOやJISのような伝統的な標準化団体によって発行される規格は、基本的に、印刷物として有料で販売されています。

＜本文＞
コンテンツ制作者がよく参照するのは、CSSの仕様などを策定しているW3Cの仕様でしょう。例として、あるW3C仕様の冒頭部分を紹介します。
〓03〓に示したW3C仕様が最新の仕様かどうかについて、どのように確認すればよいでしょうか。この冒頭部分にはさまざまな情報があります。図中の番号①～⑦について順を追って説明します。

〓03〓あるW3C仕様の冒頭部分のスクリーンショット
＜スクリーンショットと、対応する本文番号を要調整＞

＜本文＞
①：仕様の名前です。
②：仕様のステータスと、発行された日付です。ステータスの位置付けについては、Chapter1-4を参照してください。
③：仕様のURLです。現在見ている仕様だけでなく、過去の仕様や最新の仕様のURLも列挙されています。WHATWGの仕様と異なり、W3Cの仕様は発行された日付に固有のURLが与えられています。誤って古いものを参照していないか注意する必要があります。

＜memo＞
W3Cの場合、Pubrulesという文書に従い、URLのパスにステータスや発行した日付が含まれます。
Pubrules
https://www.w3.org/pubrules/

＜本文＞
⑤：エディターズドラフトのURLです。編集者が作業中の最新版であり、Living Standardに近い存在といえます。予告なしに内容が変更される可能性があることに注意してください。
⑥：仕様のメンテナンスをしている編集者の一覧です。仕様の策定に関する議論などを調べたい場合に有用です。
⑦：エラッタ（正誤表）へのリンクです。勧告となった後に誤りが報告された場合、その修正内容が記載されることがあります。

〓03〓の例では、②や③に注意を払うことにより、閲覧している文書が最新の文書なのかどうかを確認できます。実際、2021年時点では③の"Latest version of Selectors"のリンク先はSelector Level 4という文書を参照しており、より新しい仕様の草案が存在することが確認できます。

＜memo＞
Selectors Level 4
https://www.w3.org/TR/selectors-4/

＜中見出し＞
その他の技術情報の調べ方
＜本文＞
仕様を参照する以外にも、技術情報を調べる方法はあります。ここでは、ウェブ技術の調査や学習の方法をいくつか紹介します。

＜小見出し＞
MDNで調べる
＜本文＞
ウェブ技術に関する情報を集約したサイトとして、MDN Web Docs（通称MDN）が有名です。

＜memo＞
MDNは以前、Mozilla Developer Networkとされたもので、この名前で覚えている人もいるかもしれません。名称変更の経緯はMozilla Blogの記事で読むことができます。
https://blog.mozilla.org/opendesign/future-mdn-focus-web-docs/

＜本文＞
記事によって内容の質や量にばらつきはありますが、実際に役立つ場面が多々あります。
大元のコンテンツは英語ですが、各国語に翻訳されており、コンテンツの大半は日本語でも読むことができます。ただし、日本語版は英語版よりも古いことがあります。

＜memo＞
原文である英語版自体が古い場合もあります。記事の最終更新日が最近であっても、内容が最新である保証はないため、情報の鮮度には注意が必要です。

＜小見出し＞
ブラウザーの動作を確認する
＜本文＞
HTMLについて調べたい場合、実際にHTMLを書いてブラウザーで表示させてみるのも1つの方法です。また、ウェブブラウザーのソースコードを見て挙動を把握することも考えられるでしょう。
ただし、これはあくまでそのブラウザーの動作を調べているに過ぎません。OSやブラウザーが異なれば、挙動が異なることがあります。ブラウザーは多数ありますし、ブラウザーではないユーザーエージェントもあります。そういった環境の相互運用性までは確認できません。
ブラウザーの動作を確認すること自体は重要です。しかし、問題なく動くからといって、マークアップが適切である保証にはなりません。

＜小見出し＞
チェックツールを使用する
＜本文＞
HTMLがルールに従っているかどうかは機械的にチェックできます。古くからあるサービスとしては、W3CのMarkup Validation Serviceが有名です。これは現在でも利用できますが、このサービスの後続となる新しいHTMLチェッカーとしてNu Html Checkerが公開されています。

＜memo＞
W3C Markup Validation Service
https://validator.w3.org/

Nu Html Checker
https://validator.w3.org/nu/

＜本文＞
機械的にチェックできるのは、基本的に字句的ルールと語彙的ルールに限られます。意味論的ルールの大半は、その性質上、機械でのチェックが困難です。

＜memo＞
意味論的ルールの中にはチェック可能なものもあり、たとえば、テーブルの行が空であるというようなエラーを報告することがあります。詳細はChapter3-8参照してください。

＜本文＞
チェッカーで機械的に正誤が判断できない場合、エラーではなく警告（warning）として報告することもあります。
警告を必ずしもゼロにすることに固執する必要はありません。ただし、大量の警告が出ている場合、本当に対応が必要な警告を見逃すことがあります。大量の警告を放置することも勧められません。警告の表示内容を理解した上で、必要なものについて対応するとよいでしょう。

＜中見出し＞
Chapter1のまとめ: よりよいマークアップのために
＜本文＞
Chapter1-1で触れたように、HTMLを読むのはユーザーエージェントであり、マシンです。マークアップに問題があると、ユーザーエージェントは適切な解釈ができません。
Chapter1-2とChapter1-3では、HTML仕様の標準化プロセスと、その歴史を見てきました。ウェブには世界中のさまざまなユーザーエージェントがアクセスします。その相互運用性の担保のためには、仕様の標準化が必要でした。標準に従わないと、特定のユーザーエージェントでアクセスできないなど、相互運用性の問題を引き起こすことがあります。
Chapter1-4ではアクセシビリティについて触れました。アクセシビリティを考慮せずにコンテンツを制作した場合、アクセスできなくなったり、多くの人に伝わらないコンテンツができてしまいます。
Chqpter1-5ではURLについて、Chapter1-6ではHTTPについて触れました。これらの技術はHTMLと深く関連し、また、ウェブのセキュリティに関わる要素もあります。HTMLだけでなく、周辺技術も理解しなければ、ときにはセキュリティの問題を起こすこともあるのです。
Chapter1-7では、HTML仕様や周辺の技術仕様の調べ方を紹介しました。仕様を読み込み、理解することが、よりよいマークアップにつながります。しかし、仕様はそれ自体、完全なものではないことにも注意するべきです。クリエイティブ・コモンズ・ジャパン理事である水野祐氏の著書、『法のデザイン』にこんな一節があります。

＜/引用　囲み＞
大切なことは、ルールは時代とともに変わっていく／変わっていくべきという認識と、ルールを「超えて」いくというマインドである。ルールを超えていくことは、ルールを破ることを意味しない。ルールがどうあるべきかということを主体的に考えて、ルールに関わり続けていくと言うことを意味する。ルールを最大限自分寄りに活かすことは知性の証明に他ならない。
＜/引用　囲み＞

＜本文＞
『法のデザイン』で述べている「ルール」は法律を主眼に置いていますが、これをそのまま「仕様」に置き換えて見るとどうでしょうか。
これまでに繰り返し述べたように、今日のHTML仕様はLiving Standardというステータスのとおり、日々変化していきます。前時代のように、W3C勧告でずっとそのままだった、というのがむしろ特殊な状況でした。仕様は変わり続けていくという認識を持つのが肝要です。
そして、仕様を超えていくという意識も重要です。仕様と実装の差異、別の仕様の内容との矛盾など、ときには相反する内容をも吟味しながら、どうマークアップするべきかを能動的に考えて続けていく必要があるのです。これは、ウェブ制作の目指すべき1つの極致であるといえるでしょう。
そのためにも、まずは仕様を十分に把握し、自分の味方に付けることが必要です。本書が読者の皆さんをHTML仕様に誘い、その向こう側へ辿り着く羅針盤となれば幸いです。