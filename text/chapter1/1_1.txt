＜タイトル＞
HTMLとは

＜リード＞
HTMLは、ウェブになくてはならない構成要素です。ここでは、HTMLの基礎概念と、マークアップについて説明します。

＜中見出し＞
HTMLの正式名称
＜本文＞
HTMLという言葉は、HyperText Markup Languageの略です。これは、「ハイパーテキスト」（HyperText）を扱う「マークアップ言語」（Markup Language）という意味です。では、ハイパーテキストとは、そしてマークアップ言語とは何なのかについて解説しましょう。

＜中見出し＞
ハイパーテキスト
＜本文＞
ハイパーテキストは、テッド・ネルソン（Theodor H. Nelson）によって1965年に発表されたもので、複数の文書を相互に結びつけ自由にたどれるようにしたものです。
通常のテキストは単に順序どおりに読むだけなのに対し、ハイパーテキストは、読者の好きな道筋で自由に読むことができます〓01〓。

〓01〓ハイパーテキストのイメージ

この概念に強い影響を与えたのが、「As We May Think」という論文です。第二次世界大戦が終結しつつあった1945年7月に、マンハッタン計画で重要な役割を担った科学技術管理者のヴァネヴァー・ブッシュ（Vannevar Bush）が、Atlantic Monthly誌上でこの論文を発表しました。

＜memo＞
「As We May Think」を日本語に訳すると「私たちが思考するように」などとなります。書籍やウェブ上では、日本語訳を読むことができます。
https://cruel.org/other/aswemaythink/aswemaythink.pdf

ブッシュは、索引をたどって情報を探すシステムが「制約」であると考えました。そこで、索引ではなく脳のプロセスのような「連想」によって関連する情報をたどって、必要な情報を見つけ出せると考えたのです。
連想によって情報をたどり、見つけ出すというこの考え方は、「ハイパーリンク（hyperlink）」の源流となります。なお、ハイパーリンクとは、文書中で他の文書を参照して結びつける仕組みで、単に「リンク（link）」とも呼びます。
ブッシュは、そのような「連想」によって情報を得られる機械装置を「メメックス（memex）」と名付け、個人の所有する本や記録、会話録などをすべて圧縮してマイクロフィルムのように蓄積した、図書管理システムを構想しました。
ブッシュはメメックスを物理的な機械装置としていました。これをコンピューター上で実現したのがダグラス・エンゲルバート（Douglas C. Engelbart）です。彼の率いた研究者チームは1960年代に「NLS（oN-Line System）」を開発し、グラフィカルユーザーインターフェイスやハイパーテキストリンクなどを実用化しました。

＜memo＞
エンゲルバートはマウスを発明したことでも有名です。

＜小見出し＞
ワールド・ワイド・ウェブ
＜本文＞
このハイパーテキストを、インターネットと結びつけたのがティム・バーナーズ＝リー（Tim Berners-Lee）です。その発端は、1980年に構築した情報を共有するシステムである「ENQUIRE（エンクワイア）」です。なお、ENQUIREは一般には公開されませんでした。
その後、1989年3月12日に、バーナーズ＝リーはロバート・カイリュー（Robert Cailliau）とともに「Information Management: A Proposal（情報管理: 提案）」を執筆し、さらに進んだ情報管理システムを提案しました。この仕組みこそが、「ワールド・ワイド・ウェブ（World Wide Web）」です。ワールド・ワイド・ウェブとは世界中にはりめぐらされた蜘蛛の巣という意味で、単に「ウェブ（Web）」とも呼ばれます〓02〓。

＜memo＞
バーナーズ＝リーがディレクターとして率いるW3Cは、この1989年3月12日をウェブの誕生日としています。

〓02〓ウェブシステムの概略

＜本文＞
ウェブは、世界規模の巨大なハイパーテキストシステムです。このシステムは、以下の3つの技術によって構成されています。

・リソースの場所を示す「URL（Uniform Resource Locator）」
・ウェブサーバーとクライアント間の通信の取り決めである「HTTP（Hypertext Transfer Protocol）」
・コンテンツを記載する「HTML」

＜memo＞
当時のURLの仕様であるIETF RFC 1738ではこのように定義されていましたが、現在の仕様であるWHATWG URLでは、URLの意味が再定義されています。詳しくはChapter2-3（P000）で取り上げます。

＜本文＞
ウェブがそれ以前のハイパーテキストシステムと大きく異なるのは、ネットワーク上の別のコンピューターの文書にリンクできることです。これにより、世界中の情報を相互に参照することが容易になりました。リンクをマウスでクリックするたけで、遥か彼方の国にある文書を読むことができるのです。

＜memo＞
今では、マウスでクリックするよりも、タッチデバイスでタップするほうが馴染みがあるかもしれません。

＜本文＞
見方を変えれば、ウェブは世界中のコンピューターに蓄積された情報共有システムであり、仮想的なマルチメディアの巨大データベースであるといえます。HTMLは、この巨大なハイパーテキストシステムを支える鍵となる技術なのです。

＜中見出し＞
ユーザーエージェントとウェブブラウザー
＜本文＞
ウェブは、コンピューターネットワーク上のシステムです。ブッシュが提唱したメメックスは物理的に触れられる装置でしたが、ウェブはネットワーク上に存在するため、人間が直接触れることはできません。
人がウェブを利用するためには、ソフトウェアを利用する必要があります。ウェブにアクセスするためのソフトウェアを「ユーザーエージェント（user agent）」と呼びます。ユーザーエージェントは、URLを理解してアクセス先を特定してHTTPで通信を行い、ハイパーテキストを含むコンテンツを処理して、ユーザーに提供します。
ユーザーエージェントの代表例は、ウェブコンテンツを閲覧する「ウェブブラウザー（web browser）」です。単に「ブラウザー」と呼ぶこともあります。ブラウザーはウェブコンテンツを表示し、ユーザーの操作によってハイパーリンクをたどる機能を持ちます。なお、OSもユーザーエージェントの一種となります。

＜memo＞
代表的なブラウザーとしては、Google Chrome、Firefox、Safari、Microsoft Edgeなどが知られています。

＜本文＞
ユーザーエージェントの中には、閲覧や表示の機能を持たないものもあります。たとえば、ウェブコンテンツをダウンロードして保存するダウンローダーや、ウェブコンテンツの情報を機械的に収集するクローラーなどです。これらはウェブコンテンツにアクセスして、必要に応じて自動的にハイパーリンクをたどる機能を持つユーザーエージェントであるといえます。

＜中見出し＞
マークアップ言語
＜本文＞
冒頭で述べたように、HTMLはマークアップ言語です。マークアップとは、テキストに「マーク（mark）」を追加して、印を付けることです。
先に紹介したように、ウェブにアクセスするときに、実際にウェブコンテンツを処理するのはユーザーエージェントです。ウェブコンテンツは、ユーザーエージェント、つまりソフトウェアが機械的に処理できるものでなければなりません。
たとえば、〓03〓のような文章があるとします。

〓03〓文章の例
＜コード＞
これは見出しのテキストです。
ここからは本文です。
詳しくは https://example.com/ をご覧ください。

＜本文＞
このように、装飾のない純粋な文字情報だけで構成されるテキストを「プレーンテキスト（plain text）」といいます。
〓03〓を人間が読めば、1行目が見出し、2行目以降が本文であると推測できるでしょう。また、URLのような文字列があり、この部分がハイパーリンクになると推測できるかもしれません。
このような推測が成り立つのは、人間が文の意味を理解しているためです。しかし、ユーザーエージェントはコンピューターのソフトウェアですから、機械的な判断しかできません。プレーンテキストでは、文書のどこが見出しで、どこがハイパーリンクなのかを判別することは困難です。

＜小見出し＞
マークアップによるマシンリーダビリティの向上
＜本文＞
この問題を解決する方法のひとつが、テキストに「マーク」(mark)を追加して、印を付けることです。たとえば、〓03〓を〓04〓のようにします。

〓04〓マークアップの例
＜コード＞
<見出し>これは見出しのテキストです。</見出し>
<本文>ここからは本文です。
詳しくは <リンク>https://example.com/</リンク> をご覧ください。</本文>

＜本文＞
このように、テキストにマークを付けて意味を明確にすることを「マークアップ（markup）」といいます。また、「見出し」「本文」などの意味を持った一連のまとまりを、「要素（element）」といいます。この例では、テキストの中に見出し要素、本文の要素、ハイパーリンクの要素が含まれています。
実際のHTMLでは、<見出し>のような日本語の名称のタグは使いません。〓04〓の例は、たとえば〓05〓のようになります。

〓05〓HTMLによるマークアップの例
＜コード＞
<h1>これは見出しのテキストです。</h1>
<p>ここからは本文です。
詳しくは <a href="https://example.com/">https://example.com/</a> をご覧ください。</p>

＜本文＞
<h1>、<p>、<a>はHTMLのタグです。それぞれをタグでマークアップすることで、要素の範囲と種類を機械的に判断できるようになります。
このように、ソフトウェアやプログラムが機械的に判断できる状態を、「機械可読」もしくは「マシンリーダブル（machine readable）」といい、機械的な判断のしやすさを「機械可読性」もしくは「マシンリーダビリティ（machine readability）」といいます。

＜memo＞
人間が読んだ場合の理解のしやすさを「人間可読性」「ヒューマンリーダビリティ（human readability）」といいます。大量のタグでマークアップされたテキストは人間にとっては読みにくく、ヒューマンリーダビリティは高くないといえるでしょう。
プレーンテキストはマシンリーダビリティが低く、マークアップされたテキストはマシンリーダビリティが高いといえます。
HTMLは、ハイパーテキストをマークアップすることに特化したマークアップ言語です。HTMLを用いてテキストをマークアップすることで、マシンリーダビリティが向上し、ユーザーエージェントも確実に扱えるようにすることができるのです。

＜中見出し＞
まとめ
＜本文＞
ここでは、HTMLという言葉の意味を説明しました。
HTMLはHyperText Markup Languageの略であり、ウェブという巨大なハイパーテキストメディアを支える技術の一つです。テキストをマークアップすることで、マシンリーダビリティが向上し、ユーザーエージェントがハイパーテキストを機械的に処理できるようになります。

＜コラム＞
＜コラム見出し＞
軽量マークアップ言語Markdown
＜本文＞
HTMLでは「タグ」を利用して要素の範囲を明確にしますが、要素の範囲を明確にする方法は他にもあります。よく利用されるものとして、「Markdown」と呼ばれる言語があります。〓01〓は、基本的なMarkdown構文の一部です。

〓01〓Markdown構文の例
＜コード＞
## テキスト
- アイテム1
- アイテム2

＜本文＞
##で見出しを、-でリストを表現しています。これは、〓02〓のようなHTMLと同じ意味になります。

〓02〓HTMLの例
＜コード＞
<h2>テキスト</h2>
<ul>
<li>アイテム1</li>
<li>アイテム2</li>
</ul>

＜本文＞
HTMLと比較すると、Markdownのほうがマークの量が少なく、簡潔です。このような簡易なマークアップ言語を、「軽量マークアップ言語（lightweight markup language）」といいます。
軽量マークアップ言語は、マークが簡潔であるため、簡単に書きやすい反面、表現可能な要素の種類が少ないという問題があります。
基本的なMarkdown構文は、電子メールでプレーンテキストを装飾する際の慣習から着想を得ているとされ、見出しや段落、太字やハイパーリンクなど、電子メールでよく利用される要素については十分に表現できます。しかし、すべてのHTML要素に対応した記法が存在するわけではありません。
Markdownは、技術者向けのソフトウェア開発プラットフォーム、ブログサービス、情報共有サイト、電子書籍制作ツールなど、さまざまなサービスで使用できます。
しかし、これらは完全に共通のものではなく、ほとんどがサービスごとに独自に記法が拡張されています。
基本的な記法は共通ですが、Markdown方言と呼ばれるさまざまな亜種が存在し、方言ごとに細かい差異があります。Markdown方言の中では、CommonMark（https://commonmark.org/）が事実上の標準の地位にあるとされます。
Markdownは簡潔であり、スマートフォンのメモアプリでも気軽に書くことができます。また、文書にマークを付けて構造を明らかにする、という基本的な考え方はHTMLと共通です。日々Markdownを利用して文章の構造化を試みることで、HTMLを書く力も向上していくでしょう。
＜/コラム＞

＜コラム＞
＜コラム見出し＞
HTMLはプログラミング言語か？
＜本文＞
一般に、マークアップ言語はプログラミング言語ではありません。HTMLもマークアップ言語であり、プログラミング言語ではありません。
しかし世間では、「HTMLでプログラミング学習をする」といわれることがあります。この場合、HTML単独ではなく、プログラミング言語であるJavaScriptとあわせて使うことを「プログラミングを学ぶ」、としていることが多いようです。JavaScriptはHTMLと関わりが深く、JavaScriptを学ぼうとするとHTMLも学ぶ必要があるので、両者をまとめて扱うことが多いのでしょう。
なお、マークアップ言語の中には、分岐やループといったプログラミング的処理を表現するものも存在します。具体的な例としてはXSLTがあります。