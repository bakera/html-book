＜タイトル＞
HTMLの仕様

＜リード＞
HTMLはマークアップ言語ですが、その文法や語彙は仕様で決められています。ここでは、仕様とは何かを説明し、HTML仕様がどのようなことを定めているのかを紹介します。

＜中見出し＞
仕様とは
＜本文＞
一般に、製品やサービスなどが満たすべき要求事項として定められたものを「仕様（specification）」といいます。

＜memo＞
仕様をまとめて文書にしたものを「仕様書」ということもあります。

＜本文＞
たとえばブラウザーの場合、URL、HTTP、HTMLを理解できることが求められます。他にも、セキュリティやアクセシビリティに関するルールなど、さまざまな要求事項があります。

＜memo＞
仕様の要求を実現することを「実装（implementation）」といいます。ブラウザーの場合、アプリケーションのプログラムを実際に書いて、動くようにすることが実装にあたります。動くようにする行為だけでなく、動くように作られた成果物のことも「実装」といい、「実装が存在する」「仕様と実装が食い違う」のような言い方をします。

＜本文＞
HTMLにも仕様があり、コンテンツ制作者とブラウザーベンダーへの要求事項、守るべきルールを定めています。

＜中見出し＞
コンテンツ制作者のルール
＜本文＞
HTML仕様がコンテンツ制作者に要求するルールを、本書では、字句的ルール、語彙的ルール、意味論的ルールの3つに分類しています。

＜小見出し＞
字句的ルール
＜本文＞
Chapter1-1のP000で説明した通り、ウェブでは、プログラムがHTMLを読み取ります。HTMLを読み取って解析することを「パース（parse）」といい、解析するプログラムを「パーサー（parser）」といいます。

＜memo＞
基本的に、ユーザーエージェントにはHTMLパーサーの機能が含まれています。HTMLの解析処理に特化したものがパーサー、それに加えてURLやHTTPを扱うものがユーザーエージェントです。

＜本文＞
パーサーは与えられたデータを1文字ずつ読み、その文字がデータなのか、マークなのか、マークであれば何を意味するのかを解析します。この解析を行うプログラムを「字句解析器（tokenizer）」といいます。
HTMLの仕様は、マークの書き方に関するルールを定めています。このルールに違反すると、パーサーは適切な字句解析ができませんこれを本書では字句的ルールといいます。〓01〓は、字句的ルールに違反する例です。

〓01〓字句的ルールの違反例
＜コード＞
<h1>これは見出しの<strong>テキストのかたまりです</h1>
<p>これは本文です。このキーワード</strong>はこの文章で重要なものを表します。</p>

＜本文＞
〓01〓では、<strong>のタグによる入れ子の構造が正しいものではないため、strong要素の範囲を適切に解析できません。

＜word＞
入れ子
マトリョーシカ人形のように構造が再帰的に繰り返されて記述されること。英語の表現をそのまま用いてネスト（nest）ともいう。

＜本文＞
このような字句解析に必要なルールを、本書では字句的ルールと分類しています。字句的ルールには、以下のようなものがあります。

・DOCTYPEを「先頭に」記述する
・タグ名や属性名はルールに従って記述する
・開始タグと終了タグは正しい入れ子構造にする
・コメントはルールに従って記述する

字句的ルールが満たされていれば、字句解析器はマークアップを解釈できます。仕様が定める字句的ルールは、Chapter2で詳しく説明します。

＜小見出し＞
語彙的ルール
＜本文＞
HTMLの仕様は、利用できる要素の名前や、ある要素に入れ子にできる要素などを制限しています。このような、要素の種類や関係性に関するルールを、本書では語彙的ルールといいます。〓02〓は、語彙的ルールに違反する例です。

〓02〓語彙的ルールの違反例
＜コード＞
<strong><h1>これは見出しのテキストのかたまりです</h1>
<p>これは本文です。このキーワードはこの文章で重要なものを表します。</p></strong>

＜本文＞
〓02〓は、字句的ルールには従っており、字句解析は問題なくできます。しかし、HTMLの仕様には、h1要素やp要素をstrong要素の中に入れられないというルールがあります。そのため、この例は語彙的ルールに反することになります。
語彙的ルールには、ほかに以下のようなものがあります。

・仕様で定義されている要素名・属性名だけを使う
・その要素に使えるとされている属性だけを使う
・要素には、仕様で許された内容（コンテンツ）だけを入れる
・要素を入れ子にする場合、仕様で許された要素だけを入れる

語彙的ルールの詳細はChapter2とChapter3で説明します。

＜小見出し＞
意味論的ルール
＜本文＞
HTML仕様は、字句的ルールと語彙的ルールに加えて、要素の意味や使い方のルールも定めています。本書ではこれを意味論的ルールといいます。〓03〓は、意味論的ルールに違反する例です。

〓03〓意味的ルールの違反例
＜コード＞
<p>これは見出しのテキストのかたまりです</p>
<h1>これは本文です。このキーワードはこの文章で重要なものを表します。</h1>

＜本文＞
〓03〓では、見出しをp要素、本文をh1要素としてマークアップしています。これは字句的ルールも語彙的ルールも満たしますが、要素の使い方を誤っており、意味論的ルールに反しています。
意味論的ルールには以下のようなものがあります。

・適切な意味を持つ要素を選択する
・意味に矛盾がないような順で要素を出現させる
・要素には、意味が矛盾しないような属性を指定する
・属性値が自由記述の場合、意味のある、矛盾しない値を記述する

意味論的ルールについては、Chapter3で説明します。

＜中見出し＞
ユーザーエージェントのルール
＜本文＞
HTML仕様は、ユーザーエージェントが守るべきルールも定めています。

＜小見出し＞
パーサーとDOMツリー
＜本文＞
HTML仕様は、パーサーの字句解析ルールを定めています。先にも説明した通り、パーサーは字句解析器によってマークアップを解析します。
解析の結果は「DOMツリー（DOM tree）」と呼ばれるツリー構造（木構造）のデータになります。

＜word＞
DOM
DOMはDocument Object Modelの略で、文書に含まれる要素をプログラムから操作可能な「オブジェクト（Object）」として扱うためのデータモデルです。主な仕様はDOM Standardで定義されています。<https://dom.spec.whatwg.org/>

＜memo＞
DOM仕様は、かつてはW3Cという組織で策定作業が行われていましたが、現在ではHTML Standardと同様に、WHATWGという組織がリードしています。ただし、DOMを拡張する仕様については引き続きW3Cで策定が行われています。

たとえば、〓04〓のようなマークアップがあるとします。

〓04〓マークアップの例
＜コード＞
<h1>見出し</h1>
<p>本文です。<strong>キーワード</strong>です。</p>

＜本文＞
〓04〓を字句解析してDOMツリーを作ると、〓05〓のようなデータになります。このようにパーサーがDOMツリーを構築する処理を、「ツリー構築（tree construction）」といいます。

〓05〓〓04〓をツリー構造にしたデータ

＜本文＞
木構造の個々の構成要素を「ノード（node）」といいます。〓05〓では`h1`要素のノード、内容として含まれるテキストのノードなどが見られます。
ブラウザーがHTML文書を表示する際は、コンピューターのメモリ上にDOMツリーを構築した後、スタイルを適用して、見た目を決定します。このように、表示するための見た目の姿を構築することを「レンダリング（rendering）」といいます。

＜word＞
DOM操作
DOMツリーはレンダリングに使用されるほか、コンテンツ制作者が記述したJavaScriptから利用されることもあります。JavaScriptからは、DOMツリーにノードを挿入したり、ノードを削除したり、ノードの順番を変えたりといった処理ができます。このようなDOMツリーに対する処理を「DOM操作」といいます。

＜小見出し＞
支援技術とアクセシビリティツリー
＜本文＞
HTMLは、「支援技術（assistive technology）」によって扱われることもあります。支援技術は、主に障害のある人の操作の補助を行うソフトウェアです。コンテンツを音声で読み上げる「スクリーンリーダー（screen reader）」、画面を拡大する「画面拡大ソフト（screen magnifiers）」、音声入力を可能にする「音声認識ソフトウェア（speech recognition）」、マウス操作を他の操作で代替できる「代替ポインティングデバイス（alternative pointing devices）」などがあります。
支援技術がウェブコンテンツにアクセスする場合、DOMツリーにアクセスすることになりますが、DOMツリーには入力欄のラベルなど、読み上げに必要な情報が含まれていないことがあります。また、CSSで非表示にされた要素もDOMツリー上には残っているため、そのまま扱うと不要なものを読み上げてしまうこともあります。
そこでブラウザーは、支援技術に必要となる情報をDOMツリーに付け加えたり、不要な情報を取り除いたりして、その結果をアクセシビリティAPIに公開します。このように、アクセシビリティAPIに向けて公開されるツリー構造のデータを「アクセシビリティツリー（accessibility tree）」といいます。

＜word＞
アクセシビリティAPI
支援技術は、ブラウザー以外のアプリケーションや、OSの操作にも利用できます。この時、支援技術は、OSとやりとりをして、読み上げるべきテキストを受け取ったり、ユーザーの操作を伝えたりします。
アプリケーションのプログラムがOSと情報をやり取りする際のインターフェイスを「API（Application Programming Interface）」といい、支援技術がOSとの情報のやりとりに使用するインターフェイスを「アクセシビリティAPI（accessibility API）」といいます。

＜本文＞
HTMLから支援技術を通して、支援技術のユーザーに情報が伝わるイメージは〓06〓のようになります。

〓06〓支援技術のユーザーに情報が伝わるイメージ

HTML仕様には、アクセシビリティツリーや、その他アクセシビリティに関連するさまざまなルールが含まれます。アクセシビリティについては、Chapter1-4で詳しく説明します。
