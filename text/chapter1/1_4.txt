＜タイトル＞
ウェブアクセシビリティの基礎
＜リード＞
HTML4の仕様で大きくクローズアップされた概念がアクセシビリティであり、それは現在のHTMLにも受け継がれています。ここでは、ウェブアクセシビリティの基礎について説明します。

＜中見出し＞
アクセシビリティとは
＜本文＞
「アクセシビリティ（accessibility）」は、アクセス可能な度合い、アクセスのしやすさを指す言葉です。より多くの人がアクセスできる状態を「アクセシブル（accessible）」であるといいます。たとえば、「車椅子の利用者にとって、階段はアクセシブルではない」となります。
ウェブにおいては、障害の有無などにかかわらず誰もが利用できることを指します。これはウェブの大きな理念の1つです。2012年のロンドンオリンピックの開会式にはバーナーズ＝リーが登場し、「This is For Everyone」というメッセージを掲げました。またバーナーズ＝リーは、以下のような言葉も述べています。
＜引用　囲み＞
The power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect.
ウェブの力はその普遍性にあります。障害の有無にかかわらず誰もがアクセスできるというのがウェブの本質的な側面なのです。
＜/引用　囲み＞
これはアクセシビリティの理念そのものであり、ウェブは常にアクセシビリティの理念とともにあるといえます。

＜中見出し＞
さまざまな支援技術
＜本文＞
ウェブがアクセシブルである理由の1つに、ユーザーエージェントの存在があります。ユーザーエージェントの設定を変更すると、表示される文字の大きさや色合いなどが簡単に変更ができます。その結果、障害のあるユーザーでも自分にあった伝わり方に変更ができます。
ユーザーエージェントの設定だけで対応できない場合、支援技術を導入して対応することもできます。支援技術についてはChapter1-2でも簡単に触れましたが、ここでもあらためて紹介します。
なお、ここに挙げるものが支援技術のすべてではありません。支援技術はユーザーの状態にあわせてカスタマイズされることも多く、ときには専用のハードウェアが作られることもあります。カスタマイズされたハードウェアの数だけ支援技術があると考えてよいでしょう。

＜小見出し＞
画面拡大ソフト
＜本文＞
「画面拡大ソフト（screen magnifier）」〓01〓は、画面や文字を拡大して表示するソフトウェアで、「拡大ツール」と呼ばれることもあります。主にロービジョンのユーザーが利用しますが、そうでないユーザーにも利用されます。特に、スマートフォンやタブレットではピンチ操作で簡単に画面を拡大できることが多く、多くのユーザーが日常的に利用しています。

＜word＞
ロービジョン
弱視とも呼ばれ、見えにくさにより、生活に不自由を感じている状態をいいます。WHOでは眼鏡などを用いても視力が0.05以上、0.3未満と定義されます

〓01〓画面拡大ソフトの例
（後送）適当に余白を空けておいてください

＜本文＞
近年では、ほとんどのOSやブラウザーが拡大の機能を持っていますが、ロービジョンのユーザーには拡大率が不足する場合もあります。その場合、さらに拡大するために専用のソフトウェアを導入することがあります。
画面拡大ソフトの多くは、色を変更する機能も備えています。ロービジョンのユーザーには白背景に黒文字の画面が見づらいと感じる人も多く、この機能で画面を白黒反転して利用することがあります。


＜小見出し＞
スクリーンリーダー
＜本文＞
「スクリーンリーダー（screen reader）」は、画面上のテキストを音声で読み上げるソフトウェアで、主に視覚障害のあるユーザーが利用します。音声の読み上げに加え、点字ディスプレイへの出力ができるものもあります。
PCのソフトウェアとしては、PC-Talker、JAWS、NVDAなどがよく利用されます。また、スマートフォンではiOSのVoiceOver、AndroidのTalkBackが利用できます。

<memo >
日本におけるスクリーンリーダーの利用率は、JBICTによる2021年8月の調査が参考になります。 https://jbict.net/survey/at-survey-01

＜本文＞
スクリーンリーダーはブラウザーに限らず、OSやアプリケーションの画面全般を音声で読み上げます。ウェブを利用する場合は一般的なブラウザーと組み合わせて使用し、ブラウザーが表示したコンテンツを読み上げます。
スクリーンリーダーには、ユーザーの操作を補助する機能もあります。たとえば、見出しやリスト、リンクに飛ぶといったナビゲーション操作が可能です。

＜小見出し＞
代替ポインティングデバイス
＜本文＞
「代替ポインティングデバイス（alternative pointing devices）」は、マウスポインターの操作を他の操作で代替するもので、代替マウスと呼ぶこともあります。主に肢体不自由のユーザーが利用します。
キーボードを利用してマウスを動かすものは「マウスキー」とも呼ばれます。多くのOSはマウスキーの機能を持ち、キーボードのテンキーや、その他の任意のキーでマウスポインターを操作することができます。
キーボードではなく、スティックや視線入力などの専用ハードウェアを利用することもあります。また、単一のボタンだけを利用して操作する方法もあります。たとえばiOSには「スイッチコントロール」と呼ばれる機能があり、これを利用すると単一ボタンだけですべての操作を行うことができます。
クリックやドラッグといった操作も可能で、ポインターを細かく動かす機能を持つこともあります。ただし、細かい操作には時間がかかる場合があります。

＜中見出し＞
アクセシビリティの問題が起きるケース
＜本文＞
HTMLは本質的にアクセシブルなものです。それは、ユーザーエージェントがコンテンツを読み取り、個々のユーザーにとって使いやすい形にカスタマイズできるからです。しかし、HTMLの作り方によっては、ユーザーエージェントがコンテンツを適切に処理できず、アクセシビリティの問題が起きることがあります。

＜小見出し＞
テキスト情報が不足しているケース
＜本文＞
スクリーンリーダーでは、画像の内容までを音声で読み上げることは困難です。画像認識技術で解析する方法もありますが、現状ではまだ精度が高いとはいえません。つまり、画像はマシンリーダブルではないのです。
そこでHTML仕様では、画像に対して「代替テキスト（alternative text）」と呼ばれるテキスト情報を与える仕組みを用意しています。代替テキストはマシンリーダブルであり、スクリーンリーダーは画像の代わりに代替テキストを読み上げることができます。
逆に、代替テキストが用意されていなければ、スクリーンリーダーは画像の内容を適切に伝えることができなくなってしまいます。

＜小見出し＞
HTMLの要素を本来と異なる意味で使用するケース
＜本文＞
HTMLの要素を本来と異なる意味で用いることも問題を引き起こします。
たとえば、「文字を大きくするために見出しの要素を使う」、「字下げのために引用の要素を使う」、「レイアウトを調整するために表の要素を使う」、などが行われると、支援技術はそれぞれを見出し、引用、表として扱ってしまいます。
Chapter1-3で触れたように、以前はHTMLの要素や属性で文書の見た目を整えることがありました。しかし、支援技術は、これらがレイアウトのために使われていると判断できないので、適切に扱えなくなってしまいます。

＜小見出し＞
特定の環境で操作が困難になるケース
＜本文＞
HTMLのマークアップが適切で、ユーザーエージェントが適切に理解できても、現実的な理由からアクセスが難しくなる場合があります。
たとえば、ウェブコンテンツで本文の前に大量のリンクが配置されている場合、キーボード操作を行う利用者は、Tabキーを何度も押さなければ本文内のリンクにたどり着けません。同様に、本文の前に大量のテキストがあると、スクリーンリーダーの利用者は本文を読み始めるまで時間がかかることがあります。
別の例としては、画面の激しい点滅があります。人によっては、激しい点滅を見ると気分が悪くなったり、操作を継続できなくなったりすることがあります。このようなケースもアクセシビリティの問題があるといえます。

＜中見出し＞
アクセシビリティガイドライン
＜本文＞
ウェブは本来アクセシブルなものですが、コンテンツの作り方によっては、アクセシブルでなくなることがあります。そこで、HTML仕様とは別に、ウェブコンテンツのアクセシビリティを確保するためのガイドラインが求められました。W3Cによりアクセシビリティガイドラインの標準化が行われています。

＜小見出し＞
WAIについて
＜本文＞
W3Cには、ウェブアクセシビリティを推進する組織として「Web Accessibility Initiative（WAI）」が存在します。これは1997年に発足したものであり、現在も活動を続けています。

<memo＞
WAIは「ワイ」や「ウェイ」などと発音します。英語圏でも発音は一定ではないようです。
https://www.w3.org/WAI/ 

＜小見出し＞
WCAG 1.0
＜本文＞
WAIは、ウェブコンテンツで起きるアクセシビリティの問題をまとめ、その問題に対応するためのガイドラインを「Web Content Accessibility Guidelines（WCAG）」として発行しています。
歴史的には、WCAG 1.0が1999年にW3C勧告として発行されました。WCAG 1.0は、WCAG 2.0とその後続仕様に取って代わっており、現在では使用されていません。

<memo>
WCAG
https://www.w3.org/WAI/standards-guidelines/wcag/

＜小見出し＞
WCAG 2.0
＜本文＞
2008年に勧告として発行されたWCAG 2.0は、現代のウェブアクセシビリティの基礎として、広く普及しているメジャーバージョンです。
WCAG 2.0は、12のガイドラインと、その大元となる4つの原則があります。

1.知覚可能（Perceivable）
2.操作可能（Operable）
3.理解可能（Understandable）
4.堅牢（robust）

さらに、各ガイドラインの下には、実際に守るべき要件にあたる「達成基準（success criterion）」が列挙されています。
それぞれの達成基準には3つの適合レベルが設定されており、レベルが低い順にレベルA、レベルAA、レベルAAAとなっています。レベルAは最低限のアクセシビリティを確保するために必要なもの、レベルAAはブラウザーでアクセスする際の一般的なアクセシビリティの確保に有用なもの、レベルAAAはさらにレベルが高い発展的なものとされます。
WCAG 2.0は、FlashやPDFなどといったHTML以外の技術にも適用できるように、特定の技術に依存しない、汎用的な記述がされています。その一方で、WCAG 2.0の記述が抽象的になったために、個別の詳しい説明や具体例は別のサポート文書として整備することになりました。それが、Understanding WCAG 2.0とTechniques for WCAG 2.0です。

<memo>
Understanding WCAG 2.0
https://www.w3.org/TR/UNDERSTANDING-WCAG20/

Techniques for WCAG 2.0
https://www.w3.org/TR/WCAG20-TECHS/

＜本文＞
Understanding WCAG 2.0は、達成基準の意図や背景について解説されており、その達成基準はどういったものなのかを知ることができます。また、どのようにすれば達成基準を満たすことができるのかについても説明がなされており、文字どおりWCAG 2.0を理解するための鍵となる文書です。
Techniques for WCAG 2.0は、達成基準を満たすための具体的な例を集めた文書です。たとえば、ある達成基準を満たすために、HTMLをどのように書けばよいのかといった説明がコード例とともに示されています。
ただし、Techniques for WCAG 2.0のコード例の中には古いものもあります。古いHTML仕様に基づいて書かれ、HTML Standardと矛盾が生じる例も見られます。Techniques for WCAG 2.0に記載されているコード例は推奨事項ではなく、参考情報にしか過ぎないことに注意が必要です。

＜小見出し＞
WCAG 2.0とJIS X 8341-3:2016
＜本文＞
日本では、ウェブアクセシビリティの規格としてJIS X 8341-3が存在します。2016年に改定・発行されたJIS X 8341-3:2016は、WCAG 2.0と技術的に同等な内容です。
日本の公共サイトでは「JIS X 8341-3:2016のレベルAAに準拠」のような表記がよく見られますが、これは「WCAG 2.0のレベルAAの達成基準をすべて満たしている」のと同じ意味です。 JIS X 8341-3の普及を目的としている「ウェブアクセシビリティ基盤委員会（Web Accessibility Infrastructure Committee、WAIC）は、WCAG 2.0の日本語訳、Understanding WCAG 2.0の翻訳にあたるWCAG 2.0 解説書、Techniques for WCAG 2.0の翻訳にあたるWCAG 2.0 達成方法集をそれぞれ公開しています。

<memo>
ウェブアクセシビリティ基盤委員会
https://waic.jp/

WCAG 2.0（日本語訳）
https://waic.jp/docs/WCAG20/Overview.html

WCAG 2.0 解説書
https://waic.jp/docs/UNDERSTANDING-WCAG20/Overview.html

WCAG 2.0 達成方法集
https://waic.jp/docs/WCAG-TECHS/Overview.html

＜小見出し＞
WCAG 2.0の後続仕様
＜本文＞
WCAG 2.0は成熟したガイドラインとして広く受け入れられましたが、時間が経つにつれて問題点も浮き彫りになってきました。問題の1つは、急速に普及したモバイルデバイスとタッチデバイスへの対応が不十分だった点です。また、認知障害や学習障害、ロービジョンのユーザーへの対応が不十分だという声もありました。
そこで、2018年にWCAG 2.0に対して、1つのガイドラインと、17の達成基準を追加したWCAG 2.1が勧告されました。

<memo>
WCAG 2.1
https://www.w3.org/TR/WCAG21/

WCAG 2.1は、WCAG 2.0のマイナーアップデートとなります。WCAG 2.0の達成基準は削除されることなく、すべてそのまま残っています。そのため、WCAG 2.1を満たすようにコンテンツを制作すれば、WCAG 2.0を満たすことができます。
2021年10月現在、WCAG 2.1はISO規格やJIS規格にはなっていませんが、ウェブアクセシビリティ基盤委員会は参考情報としてWCAG 2.1の日本語訳を公開しています。

<memo>
WCAG 2.1（日本語訳）
https://waic.jp/docs/WCAG21/

＜本文＞
また、2021年10月現在ではWorking Draftのステータスにありますが、次のマイナーアップデートとなるWCAG 2.2の策定作業が進んでいます。
一方で、メジャーアップデートとして、W3C Accessibility Guidelines (WCAG) 3.0が並行して策定がされています。2021年現在ではWorking Draftのステータスであり、仕様の策定としては初期段階にあります。WCAG 3.0では、WCAG 2.0に対するさまざまなフィードバックをもとに策定作業が進められています。

<memo>
WCAG 2.2
https://www.w3.org/TR/WCAG22/

W3C Accessibility Guidelines (WCAG) 3.0
略称は同じですが名称が変更されています。
https://www.w3.org/TR/wcag-3.0/

そのフィードバックの1つとして、WCAG 2.0は抽象的である以上に、そもそも文章として難解であるというような批判があります。これを受けて、非常に平易な内容で記述されているのがWCAG 3.0の特徴の1つといえます。
WCAG 3.0が勧告となるのは時間がかかると考えられますが、長期的にはWCAG 3.0がWCAG 2.0シリーズに取って代わるのではないかと筆者は予想しています。

＜丸見出し＞
本書における達成基準の表記
＜本文＞
本書ではWCAGの達成基準について、2021年10月時点での最新の勧告であるWCAG 2.1を参照しています。ただし、わかりやすさのために、達成基準の名称はウェブアクセシビリティ基盤委員会の日本語訳を参照しています。


＜中見出し＞
WAI-ARIA
＜本文＞
WAIが発行している文書は、WCAGだけではありません。もう1つの重要なものとして、WAI-ARIAが挙げられます。ARIAは、Accessible Rich Internet Applicationsの略称です。

<memo>
WAI-ARIA Overview
https://www.w3.org/WAI/standards-guidelines/aria/

＜本文＞
Chapter1-3でも触れたように、ウェブアプリケーションが進化し、動的に変化するユーザーインターフェイスを実現するようになったものを「リッチインターネットアプリケーション（Rich Internet Application）」と呼びます。
しかし、リッチインターネットアプリケーションは、しばしばアクセシビリティ上の問題を起こします。独自に作られたインターフェイスが支援技術に十分な情報を提供できなかったり、動的なインタラクションがユーザーに伝わらない場合などがあります。
この問題を解決するために作られた技術仕様が、WAI-ARIAです。WAI-ARIAは単独で使うものではなく、別のマークアップ言語と組み合わせて、それを補助する形で利用します。組み合わせる相手のマークアップ言語のことを「ホスト言語（host language）」と呼びます。HTMLがホスト言語になることがほとんどですが、たとえばSVGがホスト言語になることもあります。
WAI-ARIAを利用すると、HTMLの要素に対して、支援技術に伝える情報を追加すできます。HTMLにrole属性を追加して要素の役割の情報を、aria-で始まる属性を追加して要素の状態に関する情報を伝えることができます。
WAI-ARIAも非常に大きな仕様であり、複数の関連文書を伴った構成になっています。WAI-ARIAの詳細はChapter4-2で説明します。