＜タイトル＞
ウェブアクセシビリティの基礎
＜リード＞
HTML4の仕様で大きくクローズアップされた概念がアクセシビリティであり、それは現在のHTMLにも受け継がれています。ここでは、ウェブアクセシビリティの基礎について説明します。

＜中見出し＞
アクセシビリティとは
＜本文＞
「アクセシビリティ（accessibility）」とは、アクセス可能な度合い、アクセスのしやすさを指す言葉です。より多くの人がアクセスできる状態を「アクセシブル（accessible）」であるといいます。たとえば、「車椅子のユーザーにとって、階段はアクセシブルではない」となります。
ウェブにおいては、障害の有無などにかかわらず誰もが利用できることを指します。これはウェブの大きな理念の1つです。2012年のロンドンオリンピックの開会式にはバーナーズ＝リーが登場し、「This is For Everyone」というメッセージを掲げました。またバーナーズ＝リーは、以下のような言葉も述べています。
＜引用　囲み＞
The power of the Web is in its universality. Access by everyone regardless of disability is an essential aspect.
ウェブの力はその普遍性にあります。障害の有無にかかわらず誰もがアクセスできるというのがウェブの本質的な側面なのです。
＜/引用　囲み＞
＜本文＞
これはアクセシビリティの理念そのものであり、ウェブは常にアクセシビリティの理念とともにあるといえます。

＜中見出し＞
さまざまな支援技術
＜本文＞
ウェブがアクセシブルである理由の1つに、ユーザーエージェントの存在があります。ユーザーエージェントの設定を変更すると、表示される文字の大きさや色合いなどが簡単に変更できます。障害のあるユーザーでも、自分にあった伝わり方にできるのです。
ユーザーエージェントの設定だけで対応できない場合、支援技術を利用できます。支援技術についてはChapter1-2でも簡単に触れましたが、ここでもあらためて紹介します。
なお、ここに挙げるものが支援技術のすべてではありません。支援技術はユーザーの状態にあわせてカスタマイズされることも多く、ときには専用のハードウェアが作られることもあります。カスタマイズされたハードウェアの数だけ支援技術があると考えてよいでしょう。

＜小見出し＞
画面拡大ソフト
＜本文＞
「画面拡大ソフト（screen magnifier）」〓01〓は、画面や文字を拡大して表示するソフトウェアで、「拡大ツール」と呼ばれることもあります。主にロービジョンのユーザーが利用しますが、そうでないユーザーにも利用されます。特に、スマートフォンやタブレットではピンチ操作で簡単に画面を拡大できることが多く、多くのユーザーが日常的に利用しています。

＜word＞
ロービジョン
弱視とも呼ばれ、見えにくさにより、生活に不自由を感じている状態をいいます。WHOでは眼鏡などを用いても視力が0.05以上、0.3未満と定義されます

〓01〓画面拡大ソフトの例
（後送）適当に余白を空けておいてください

＜本文＞
近年では、ほとんどのOSやブラウザーが拡大の機能を持っていますが、ロービジョンのユーザーには拡大率が不足する場合もあります。その場合、さらに拡大するために専用のソフトウェアを導入することがあります。
画面拡大ソフトの多くは、色を変更する機能も備えています。ロービジョンのユーザーには白背景に黒文字の画面が見づらいと感じる人も多く、この機能で画面を白黒反転して利用することがあります。

＜小見出し＞
スクリーンリーダー
＜本文＞
「スクリーンリーダー（screen reader）」は、画面上のテキストを音声で読み上げるソフトウェアで、主に視覚障害のあるユーザーが利用します。音声の読み上げに加え、点字ディスプレイへの出力ができるものもあります。
PCのソフトウェアとしては、PC-Talker、JAWS、NVDAなどがよく利用されます。また、スマートフォンではiOSのVoiceOver、AndroidのTalkBackが利用できます。

＜memo＞
日本におけるスクリーンリーダーの利用率は、JBICTによる2021年8月の調査が参考になります。 https://jbict.net/survey/at-survey-01

＜本文＞
スクリーンリーダーはブラウザーに限らず、OSやアプリケーションの画面全般を音声で読み上げます。ウェブを利用する場合は一般的なブラウザーと組み合わせて使用し、ブラウザーが表示したコンテンツを読み上げます。
スクリーンリーダーには、ユーザーの操作を補助する機能もあります。たとえば、見出しやリスト、リンクに飛ぶといったナビゲーション操作が可能です。

＜小見出し＞
代替ポインティングデバイス
＜本文＞
「代替ポインティングデバイス(alternative pointing devices)」は、マウスポインターの操作を他の操作で代替するもので、主に肢体不自由のユーザーが利用します。ポインターの移動、クリック、ドラッグといった操作ができ、ポインターを精密に動かす機能を持つこともあります。

＜memo＞
代替ポインティングデバイスは、代替マウスと呼ばれることもあります。

＜本文＞
キーボードを利用してマウスを動かすものは「マウスキー」とも呼ばれます。多くのOSはマウスキーの機能を持ち、キーボードのテンキーや、その他の任意のキーでマウスポインターを操作できます。
スティックや視線入力などの専用ハードウェアもあります。また、単一のボタンだけで操作する方法もあります。たとえばiOSには「スイッチコントロール」という機能があり、これを利用すると、すべての操作を単一のタップ操作だけで行えるようになります。

＜中見出し＞
アクセシビリティの問題が起きるケース
＜本文＞
HTMLは本質的にアクセシブルなものです。それは、ユーザーエージェントがコンテンツを読み取り、個々のユーザーにとって使いやすい形にカスタマイズできるからです。しかし、HTMLの書き方によっては、ユーザーエージェントがコンテンツを適切に処理できず、アクセシビリティの問題が起きることがあります。

＜小見出し＞
テキスト情報が不足しているケース
＜本文＞
スクリーンリーダーでは、画像の内容までを音声で読み上げることは困難です。画像認識技術で解析する方法もありますが、現状ではまだ精度が高いとはいえません。つまり、画像はマシンリーダブルではないのです。
そこでHTML仕様では、画像に対して「代替テキスト（alternative text）」と呼ばれるテキスト情報を与える仕組みを用意しています。代替テキストはマシンリーダブルであり、スクリーンリーダーは画像の代わりに代替テキストを読み上げることができます。
逆に、代替テキストが用意されていなければ、スクリーンリーダーは画像の内容を適切に伝えることができなくなってしまいます。

＜memo＞
たとえば、Facebookには自動代替テキストの機能があります。
https://ja-jp.facebook.com/help/216219865403298

＜小見出し＞
HTMLの要素を本来と異なる意味で使用するケース
＜本文＞
HTMLの要素を本来と異なる意味で用いると、ユーザーには不適切な意味が伝わり混乱します。Chapter1-3で触れたように、以前はHTMLの要素や属性で文書の見た目を整えることがありました。

・文字を大きくするために見出しの要素を使う
・単なる字下げのために引用の要素を使う
・レイアウトを調整するために表の要素を使う

この場合、支援技術は、これらが見た目のために利用されていると判断できず、それぞれを見出し、引用、表として扱ってしまいます。

＜小見出し＞
特定の環境で操作が困難になるケース
＜本文＞
HTMLのマークアップが適切で、ユーザーエージェントが適切に理解できても、現実的な理由からアクセスが難しくなる場合があります。
たとえば、本文の前に大量のテキストがあると、スクリーンリーダーのユーザーは本文を読み始めるまで時間がかかります。同様に、本文の前に大量のリンクがあると、キーボード操作を行うユーザーは、Tabキーを何度も押さなければ本文内のリンクにたどり着けません。
別の例として、画面の激しい点滅があります。人によっては、激しい点滅を見ると気分が悪くなり、操作を継続できなくなることがあります。このようなケースもアクセシビリティの問題といえます。

＜中見出し＞
アクセシビリティガイドライン
＜本文＞
ウェブは本来アクセシブルなものですが、コンテンツの作り方によってアクセシビリティの問題が起きることがあります。そこで、HTML仕様とは別に、アクセシビリティガイドラインが標準化されています。

＜小見出し＞
WCAG 1.0
＜本文＞
1997年、W3Cの内部組織として、ウェブアクセシビリティを推進する「Web Accessibility Initiative（WAI）」が発足しました。

＜memo＞
WAIは「ワイ」や「ウェイ」などと発音します。英語圏でも発音は一定ではないようです。
https://www.w3.org/WAI/ 

＜本文＞
WAIは、ウェブコンテンツで起きるアクセシビリティの問題をまとめ、その問題に対応するためのガイドラインを「Web Content Accessibility Guidelines（WCAG）」として発行しています。1999年、この最初の版であるWCAG 1.0がW3C勧告となりました。

＜memo＞
WCAG
https://www.w3.org/WAI/standards-guidelines/wcag/

＜memo＞
WCAG 1.0は、2021年にSuperseded Recommendationのステータスになっており、現在では廃止された扱いになっています。

＜小見出し＞
WCAG 2.0
＜本文＞
2008年に勧告として発行されたWCAG 2.0は、現在広く普及しているメジャーバージョンです。4つの原則に分類された12のガイドラインの下に、実際に守るべき要件にあたる「達成基準（success criterion）」が列挙されています。

＜memo＞
WCAG 2.0の4つの原則は以下の通りです。
1.知覚可能（Perceivable）
2.操作可能（Operable）
3.理解可能（Understandable）
4.堅牢（robust）

＜本文＞
それぞれの達成基準には3つの適合レベルが設定されており、レベルが低い順にレベルA、レベルAA、レベルAAAとなっています。

＜memo＞
レベルAは最低限のアクセシビリティを確保するために必須のもの、レベルAAは一般的なアクセシビリティの確保に有用なもの、レベルAAAはさらにレベルが高い発展的なものです。

＜本文＞
WCAG 2.0は、FlashやPDFなどといったHTML以外の技術にも適用できるように、特定の技術に依存しない記述になっています。同時に記述が抽象的になったため、詳しい説明や具体例は別のサポート文書として整備することになりました。それが、Understanding WCAG 2.0とTechniques for WCAG 2.0です。

＜丸見出し＞
Understanding WCAG 2.0
＜本文＞
Understanding WCAG 2.0は、達成基準の意図や背景について解説しています。また、どうすれば達成基準を満たせるのかも説明されており、文字どおりWCAG 2.0を理解するための鍵となる文書です。

＜memo＞
Understanding WCAG 2.0
https://www.w3.org/TR/UNDERSTANDING-WCAG20/

＜丸見出し＞
Techniques for WCAG 2.0
＜本文＞
Techniques for WCAG 2.0は、達成基準を満たす具体的な方法を紹介しています。HTMLのコード例も示され、実際の実装時の参考として利用できます。ただし、これはあくまで参考情報であり、必ずこの方法を採用しなければならないものではありません。

＜memo＞
Techniques for WCAG 2.0
https://www.w3.org/TR/WCAG20-TECHS/

＜memo＞
Techniques for WCAG 2.0のコード例には、古いものも含まれます。現在のHTML仕様では廃止された要素が使われているものや、現在ではより適切な手段が存在するものもあります。

＜小見出し＞
WCAG 2.0とJIS X 8341-3:2016
＜本文＞
日本では、ウェブアクセシビリティの規格としてJIS X 8341-3が存在します。2016年に改定・発行されたJIS X 8341-3:2016は、WCAG 2.0と技術的に同等な内容です。
日本の公共サイトでは「JIS X 8341-3:2016のレベルAAに準拠」のような表記がよく見られますが、これは、WCAG 2.0のレベルAAの達成基準をすべて満たすのと同じ意味です。

＜memo＞
JIS X 8341-3の普及を目的とする「ウェブアクセシビリティ基盤委員会（Web Accessibility Infrastructure Committee、WAIC）」は、WCAG 2.0と関連文書の日本語訳を公開しています。

ウェブアクセシビリティ基盤委員会
https://waic.jp/

WCAG 2.0（日本語訳）
https://waic.jp/docs/WCAG20/Overview.html

WCAG 2.0 解説書
https://waic.jp/docs/UNDERSTANDING-WCAG20/Overview.html

WCAG 2.0 達成方法集
https://waic.jp/docs/WCAG-TECHS/Overview.html

＜小見出し＞
WCAG 2.1
＜本文＞
WCAG 2.0は広く受け入れられましたが、時間が経つにつれて問題点も浮き彫りになってきました。急速に普及したモバイルデバイスとタッチデバイスへの対応が十分でない点、認知障害や学習障害、ロービジョンのユーザーへの対応が不十分だった点です。

＜memo＞
WCAG 2.1
https://www.w3.org/TR/WCAG21/

＜本文＞
2018年、前述の問題に対処するマイナーアップデート版であるWCAG 2.1が勧告となりました。1つのガイドラインと17の達成基準が追加されていますが、削除された達成基準はありません。そのため、WCAG 2.1の基準を満たすコンテンツを制作すれば、WCAG 2.0の基準も満たすことができます。

＜丸見出し＞
本書における達成基準の表記
＜本文＞
本書でWCAGの達成基準をとりあげる際は、WCAG 2.1のものを参照しています。わかりやすさのために、達成基準の名称は原文ではなく、ウェブアクセシビリティ基盤委員会の日本語訳を使用しています。

＜memo＞
2021年10月現在、WCAG 2.1はISO規格やJIS規格にはなっていませんが、ウェブアクセシビリティ基盤委員会は参考情報としてWCAG 2.1 の日本語訳を公開しています。

WCAG 2.1（日本語訳）
https://waic.jp/docs/WCAG21/

＜小見出し＞
WCAGの今後
＜本文＞
WCAGの次のマイナーアップデートとなるWCAG 2.2の策定作業も進んでおり、2021年現在、Working Draftになっています。この作業と並行して、メジャーアップデートであるW3C Accessibility Guidelines (WCAG) 3.0の策定も進められています。

＜memo＞
WCAG 2.2
https://www.w3.org/TR/WCAG22/

＜memo＞
W3C Accessibility Guidelines (WCAG) 3.0
https://www.w3.org/TR/wcag-3.0/
略称はWCAGのままですが、正式名称はWebがW3Cに変更されています。

WCAG 2.0は抽象的で、文章も難解だという批判があります。WCAG 3.0ではこれを受け、平易な内容の記述を目指しています。これが勧告となるまでにはまだ時間がかかると考えられますが、将来的にはWCAG 3.0が普及し、主流になっていくと筆者は予想しています。

＜中見出し＞
WAI-ARIA
＜本文＞
WAIが発行している文書は、WCAGだけではありません。もう1つの重要なものとして、WAI-ARIAが挙げられます。ARIAは、Accessible Rich Internet Applicationsの略称です。

＜memo＞
WAI-ARIA Overview
https://www.w3.org/WAI/standards-guidelines/aria/

＜本文＞
Chapter1-3でも触れたように、ウェブアプリケーションはリッチインターネットアプリケーションへと進化し、動的に変化するユーザーインターフェイスを実現するようになってきました。
これにより、アクセシビリティ上の問題も増えてきました。独自に作られたインターフェイスが支援技術に十分な情報を提供できなかったり、動的なインタラクションがユーザーに伝わらない場合などが多く見られるようになったのです。
WAI-ARIAは、この問題を解決する技術仕様で、HTMLの要素に対し、支援技術に伝えるべき情報を追加できます。たとえば、role属性を追加して要素の役割の情報を、aria-で始まる属性を追加して要素の状態に関する情報を伝えます。
WAI-ARIAも非常に大きな仕様であり、複数の関連文書を伴った構成になっています。WAI-ARIAの詳細はChapter4-2で説明します。