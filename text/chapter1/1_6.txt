＜タイトル＞
HTTP
＜リード＞
ここでは、ウェブを支える3つの技術の1つであるHTTPの概要を紹介します。本書では主にHTTP/1.1を取り上げ、やりとりされるメッセージの内容やその意味について簡単に紹介します。

＜中見出し＞
HTTPの概要
＜本文＞
HTTP (Hypertext Transfer Protocol)は、ハイパーテキストを転送するための通信プロトコルです。ユーザーエージェントがサーバーに接続し、「メッセージ(message)」をやりとりします。

＜小見出し＞
HTTPの黎明期
＜本文＞
初期のHTTPはHTTP/0.9と呼ばれますが、これはリクエストでURLを指定し、レスポンスでHTMLが返るだけのものでした。ヘッダーもなく、ステータスもないためエラー応答もできませんでした（つまり、存在しないページにアクセスした際に表示される404 Not Foundもありませんでした）。

＜memo＞
HTTP/0.9
https://www.w3.org/Protocols/HTTP/AsImplemented.html

＜本文＞
その後、1996年に発行されたRFC 1945でHTTP/1.0が正式に標準化され、ステータス、HTTPヘッダーといった基本的な機能が揃いました。

＜小見出し＞
HTTP/1.1
＜本文＞
1997年にはRFC 2068が、1999年にはその更新版であるRFC 2616が発行され、HTTP/1.1が標準化されました。このバージョンは広く普及し、HTTPは安定期を迎えます。

＜memo＞
RFC 1945
https://datatracker.ietf.org/doc/html/rfc1945

RFC 2068
https://datatracker.ietf.org/doc/html/rfc2068

RFC 2616
https://datatracker.ietf.org/doc/html/rfc2616

＜本文＞
その後、2014年になってHTTP/1.1の仕様は更新、再編され、RFC 7230〜7235の6つの文書に分割されました。

＜memo＞
HTTP/1.1は、後述するHTTP/2、HTTP/3との関係性も踏まえ、さらに再編成される予定があります。2021年現在ではInternet-Draftsとなっており、IETF HTTP Working Groupのページで閲覧できます。
IETF HTTP Working Group
https://httpwg.org/

＜小見出し＞
HTTPの進化
＜本文＞
HTTP/1.1は長期にわたって利用されてきましたが、近年ではウェブコンテンツが利用するサブリソースの数も増える傾向にあり、通信効率の悪さによるパフォーマンスの問題が指摘されるようになりました。
そこで、パフォーマンスを改善する目的で次世代の仕様が検討されました。HTTP/2と名付けられたこの仕様は、通信の方式が大きく変わり、バイナリー形式の採用、ヘッダーの圧縮、複数ストリームの利用などを行ってパフォーマンスを向上しています。HTTP/2は2015年にRFC 7540で標準化されており、多くのサーバーとブラウザーで実装されています。
現在では、さらにバフォーマンスを向上したHTTP/3も開発中であり、サーバーとブラウザーでの試験的な実装が進んでいます。
このようにHTTPは進化していますが、HTTP/2以降の進化は主にパフォーマンスの向上で、やりとりするメッセージの形式に大きな変化はありません。2021年現在もHTTP/1.1は現役で、広く利用されています。

＜memo＞
RFC 7540
https://datatracker.ietf.org/doc/html/rfc7540

なお、RFC 7540の改訂作業もhttp2bisとして進められています。
https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-http2bis

＜中見出し＞
HTTPメッセージ
＜本文＞
HTTPの通信では、ユーザーエージェントとサーバーがメッセージをやりとりします。メッセージの書式はRFC 7230で定義されています。

＜memo＞
HTTP/1.1の再編成に伴って、HTTPメッセージに関する用語も整理される予定ですが、本書では2021年現在、RFC 7230に基づいた説明をします。

＜小見出し＞
HTTPリクエスト
＜本文＞
ユーザーエージェントがサーバーに送るメッセージを「HTTPリクエスト（HTTP request）」と呼びます。〓05〓はHTTPリクエストの例です。

〓05〓HTTPリクエストの例
＜コード＞
GET /index.html HTTP/1.1
Host: www.example.com
User-Agent: curl/7.16.3 

＜丸見出し＞
リクエスト行
＜本文＞
メッセージの先頭の行を「開始行（start-line）」と呼びます。メッセージがリクエストの場合、開始行は「リクエスト行（request-line）」と呼ばれます。リクエスト行には「メソッド（method）」、「リクエストターゲット（request-target）」、「HTTPバージョン（HTTP version）」の情報が含まれ、末尾の改行1つ（CR+LF）で終了します。

＜丸見出し＞
メソッド
＜本文＞
メソッドはRFC 7231で定義されています。ウェブでよく利用されるのは以下のメソッドです。

・GET：リクエストターゲットで指定したリソースを取得。URLにデータを含めることでデータ送信もできるが、大量データ送信には不向き
・POST：サーバーにデータを送信。大量データの送信に向いている
・HEAD：GETとほぼ同じだが、サーバーからはヘッダー情報だけが送られ、リソース本体は送られない。リソースの更新日だけを確認したいような場合に利用
・OPTIONS：リクエストターゲットに対し、どのようなリクエストが可能か問い合わせる。従来は利用頻度の少ないメソッドだったが、現在ではCORSのプリフライトリクエストとして用いられる

＜memo＞
「プリフライトリクエスト（preflight request）」は、CORSの通信に先立ち、通信を許可して良いか問い合わせる機能です。詳細はMDNを参照してください。
https://developer.mozilla.org/ja/docs/Glossary/Preflight_request

＜丸見出し＞
リクエストヘッダー
＜本文＞
リクエスト行の後には「ヘッダーフィールド（header field）」が続きます。HTTPリクエストのヘッダーフィールドは「リクエストヘッダー」とも呼ばれます。ヘッダーフィールドは、フィールド名: フィールド値の形式で、末尾には改行1つ（CR+LF）を置きます。

＜memo＞
改行の次の行の先頭がスペースで始まった場合、前行のフィールドの続きとみなされる継続行という仕組みもあります。ただし、現在の仕様では継続行は非推奨とされ、一部の用法を除いて利用できません。

＜本文＞
よく利用されるヘッダーフィールドには、以下のようなものがあります。

・Host：接続先のホスト名とポート番号を指定（ポート番号は省略可能）。名前ベースのバーチャルホストを実現するために必要で、HTTP/1.1では必須
・Content-Length：メッセージボディが存在する場合、そのデータの長さをオクテット単位で指定
・User-Agent：ユーザーエージェント名を指定。サーバーはこのフィールドの値によって、コンテンツの出しわけをすることもある
・Accept：受入可能なMIMEタイプを指定（MIMEタイプについては後述）

フィールドは複数置くことが可能で、それぞれの末尾に改行1つ（CR+LF）を置きます。最後のフィールドの末尾にはさらに改行1つを追加し、改行を2つ連続させます（つまり、空の行を設けます）。

＜memo＞
User-Agentによるブラウザーの検出はよい方法ではありません。MDNの記事も参照してください。
ユーザーエージェント文字列を用いたブラウザーの判定
https://developer.mozilla.org/ja/docs/Web/HTTP/Browser_detection_using_the_user_agent

＜丸見出し＞
リクエストボディ
＜本文＞
メソッドがPOSTの場合、ヘッダーフィールドの後に「メッセージボディ（message body）」が続きます。リクエストのメッセージボディは「リクエストボディ」とも呼びます。〓06〓はPOSTリクエストの例です。

〓06〓POSTリクエストの例
＜コード＞
POST /form.php HTTP/1.1
Host: www.example.com
User-Agent: curl/7.16.3

name=john&age=12

＜本文＞
末尾の行がメッセージボディです。メッセージボディは改行文字を含むこともあり、改行が出現しても終端とはみなされません。メッセージボディは、ヘッダーフィールドのContent-Lengthで指定された長さのデータを読むか、通信が終わるかすると終端と判断されます。

＜小見出し＞
HTTPレスポンス
＜本文＞
サーバーからユーザーエージェントに返ってくるメッセージを「HTTPレスポンス（HTTP response）」と呼びます。〓07〓はHTTPレスポンスの例です。

〓07〓HTTPレスポンスの例
＜コード＞
Status: HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 7887
Date: Thu, 19 Aug 2021 10:00:02 GMT
Last-Modified: Tue, 17 Aug 2021 14:00:11 GMT

<!DOCTYPE html>
<html lang="ja">
...

＜丸見出し＞
ステータス行
＜本文＞
レスポンスの開始行は「ステータス行（status-line）」と呼ばれます。ステータス行にはHTTPバージョン、「ステータスコード（status code）」、「リーズンフレーズ（reason-phrase）」を含みます。
ステータスコードはレスポンスの状態を表す3桁の整数値です。リーズンフレーズはステータスコードの意味を自然言語で表現したものです。人間の理解しやすさのために添えられているに過ぎず、ユーザーエージェントはこれを無視します。

＜memo＞
ステータスコードの多くはRFC 7231で定義されていますが、他のRFCで定義されているものもあります。

＜丸見出し＞
ステータスコード
＜本文＞
よく使われるステータスコードには、以下のようなものがあります。

・200（OK）：リクエストに成功し、正常なレスポンスを返した状態
・301（Moved Permanently）：リクエストターゲットのリソースが別の場所に恒常的に移動したことを表す。
・302（Found）：別の場所のリソースを見に行くべきであることを示す。301と似ているが、恒久的な移動ではなく一時的な移動を表す。
・404（Not Found）：返すべきリソースが見つからなかった状態。ほとんどの場合、URLの誤りが原因
・500（Internal Server Error）：サーバー側で何らかのエラーが発生した状態。リクエストに問題はないので、再度同じリクエストをすると成功する可能性もある

＜memo＞
ステータスコード301と302では、Location:ヘッダフィールドで移動先を指定します。ユーザーエージェントは移動先の取得を試みます。
301の場合、次回以降のアクセスでは最初から移動先のURLにアクセスすべきです。302の場合は、次回以降も移動元のURLにアクセスすべきということになります。

＜丸見出し＞
レスポンスヘッダー
＜本文＞
ステータス行の後にはヘッダーフィールドが続きます。HTTPレスポンスのヘッダーフィールドは「レスポンスヘッダー」とも呼ばれます。ヘッダーフィールドの形式はリクエストと同じですが、利用されるフィールドは異なります。
HTTPレスポンスでよく利用されるヘッダーフィールドには、以下のようなものがあります。

・Date：レスポンスを生成した日時を示す
・Last-Modified：リソースの最終更新日時を示す
・Content-Length：メッセージボディが存在する場合、そのデータの長さをオクテット単位で指定
・Location：ステータスコードが300番台だった場合の移動先のURLを示す
・Content-Type：リソースの種類を示すMIMEタイプを指定（MIMEタイプについては後述）

＜丸見出し＞
レスポンスボディ
＜本文＞
ヘッダーフィールドの後にはメッセージボディが続きます。レスポンスのメッセージボディは「レスポンスボディ」とも呼びます。
レスポンスボディには、リソース本体のデータが入ります。
レスポンスボディが存在しないこともあります。リクエストがHEADメソッドだった場合や、レスポンスのステータスが204 (No Content)だった場合は、レスポンスボディを返しません。

＜中見出し＞
MIMEタイプ
＜本文＞
HTTPではHTMLのほか、CSS、JavaScript、JSON、画像、動画など、さまざまな形式のデータを扱います。リソースを適切に扱うためには、その種類を判断する必要があります。〓03〓に挙げたHTTPレスポンスのヘッダーフィールドは〓04〓のようになっていました。

〓04〓HTTPレスポンスのヘッダーフィールドの例
＜コード＞
Content-Type: text/html; charset=utf-8
Content-Length: 7887
Date: Thu, 19 Aug 2021 10:00:02 GMT
Last-Modified: Tue, 17 Aug 2021 14:00:11 GMT

＜本文＞
Content-Typeという名前のフィールドに、text/html; charset=utf-8という値が指定されています。これがリソースの種類を示すフィールドです。
Content-Typeフィールドに指定する値は、「メディアタイプ（media type）」もしくは「MIMEタイプ（MIME Type）」と呼ばれます。メディアタイプという用語はCSSにも存在して紛らわしいため、本書では今後、MIMEタイプと呼びます。

＜memo＞
MIMEはMultipurpose Internet Mail Extensionsの略称で、元は電子メールのメッセージの種類を示すものでしたが、ウェブでもそのまま利用されています。MIMEタイプの仕様はRFC 2046で定義されています。

RFC 2046
https://datatracker.ietf.org/doc/html/rfc2046

＜memo＞
メディアタイプと紛らわしい点についてはMIME sniffing Standardでも指摘されています。
https://mimesniff.spec.whatwg.org/#mime-type-representation

＜本文＞
MIMEタイプはIANAによって管理されており、IANAのウェブサイトのMedia Typesのページで一覧を見ることができます。

＜memo＞
IANA Media Types
https://www.iana.org/assignments/media-types/media-types.xhtml

＜小見出し＞
MIMEタイプの構文
＜本文＞
MIMEタイプは、「タイプ（type）」、「サブタイプ（subtype）」、「パラメーター」の3つの構成要素からなります。タイプとサブタイプは必須であり、パラメーターはオプションです。
前述のtext/html; charset=utf-8の場合、タイプがtext、サブタイプがhtml、パラメーターがcharset=utf-8となります。タイプとサブタイプは/で連結し、パラメーターがある場合は、;で区切ります。

＜小見出し＞
ウェブでよく利用されるMIMEタイプ
＜本文＞
ここでは、ウェブで実際によく利用される代表的なMIMEタイプをいくつか紹介します。それぞれのMIMEタイプの扱いはブラウザーやOSによって異なる場合がありますが、ここでは一般的な処理を紹介します。

＜丸見出し＞
text/html
＜本文＞
text/htmlはHTML文書を表します。ウェブコンテンツのほとんどはこのMIMEタイプで配信されます。ブラウザーはHTMLをレンダリングし、表示します。

＜丸見出し＞
application/xhtml+xml
＜本文＞
application/xhtml+xmlは、XML形式で配信されるXHTML文書を表します。レンダリングと表示はtext/htmlと同様ですが、XML構文とみなされ、XMLパーサーによって構文解析されます。

＜丸見出し＞
application/pdf
＜本文＞
application/pdfはPDF文書を表します。多くのブラウザーは、ウィンドウ内で文書として表示します。PDFファイルをダウンロードさせたい場合、後述のapplication/octet-streamで配信することもあります。

＜memo＞
以前はPDFの表示に専用のプラグインを必要とすることがありましたが、近年ではほとんどのブラウザーがプラグインなしでPDFをレンダリングできます。

＜丸見出し＞
image/png、image/jpeg、image/gif
＜本文＞
image/png、image/jpeg、image/gifは、それぞれPNG画像、JPEG画像、GIF画像を表します。いずれも画像として表示します。多くの場合、HTML文書からimg要素のsrc属性でサブリソースとして参照され、コンテンツに画像を埋め込む形で利用されます。

＜memo＞
画像をHTMLに埋め込まず、URLに直接リンクして表示させることを、俗に「画像直リンク」といいます。この場合、代替テキストの情報が提供できないため、アクセシビリティ上の問題につながる場合があります。

＜丸見出し＞
image/svg+xml
＜本文＞
image/svg+xmlは、XML形式で配信されるSVG画像を表します。PNG 画像などと異なり、SVGデータ自体にtitle要素によるタイトルや、desc要素による説明文のテキストを含んでいることがあります。

＜memo＞
SVG画像は、img要素を用いて、HTMLに埋め込むことができます。この場合、SVGのタイトルや説明文などの情報は利用されず、JavaScriptも実行されません。代替テキストはHTMLで用意する必要があります。

＜丸見出し＞
application/javascript
＜本文＞
application/javascriptは、JavaScriptのスクリプトファイルを表します。このMIMEタイプで配信されたJavaScriptは、script要素のsrc属性に指定してクロスオリジンで実行できます。

＜memo＞
text/javascriptが利用されることもあります。ほかにもtext/x-javascriptなどさまざまなものが利用されますが、その多くは現在では推奨されないものです。以下のInternet-Draftも参照してください。

ECMAScript Media Types Updates
https://datatracker.ietf.org/doc/html/draft-ietf-dispatch-javascript-mjs

＜本文＞
JSONをこのMIMEタイプで配信した場合、一定の条件が揃うと「JSONハイジャック」と呼ばれる攻撃を受けるため注意が必要です。JSONデータは後述のapplication/jsonで配信します。

＜丸見出し＞
application/json
＜本文＞
application/jsonは、任意のJSON（JavaScript Object Notation）形式のデータを表します。以前はtext/jsonが利用されることもありました。
JavaScriptとデータ形式が似ていますが、MIMEタイプは異なります。前述のように、application/javascriptで配信するとセキュリティ上の問題が生じることがあります。

＜memo＞
JSONデータの種類によっては、専用のMIMEタイプが定義されている場合もあります。たとえば、JSON-LDによるメタデータをJSON形式で配信する場合は、application/ld+jsonを利用します。

＜丸見出し＞
text/css
＜本文＞
text/cssは、CSS（Cascading Style Sheets）によるスタイルシートデータを表します。HTMLのlink要素を利用して外部スタイルシートを参照する場合に、この形式のデータを利用します。

＜丸見出し＞
application/octet-stream
＜本文＞
application/octet-streamは、任意のバイナリーデータを表します。データが具体的に何なのかは不明です。ブラウザーは、これをMIMEタイプが不明なものとして扱います。後述の「MIMEタイプが不明な場合」を参照してください。
多くの場合はダウンロードを促しますが、レンダリングしようとすることもあります。明示的にファイルをダウンロードさせたい場合は、HTTPレスポンスヘッダーでContent-Disposition: attachmentを指定します。

＜小見出し＞
MIMEタイプが不明な場合
＜本文＞
MIMEタイプが指定されていなかったり、ブラウザーにとって未知なものであった場合、データの扱い方を判断できません。この場合、ブラウザーは、後述するMIME sniffingの処理を行ってデータの種類を判別しようとします。
それでも種類が不明な場合は、ユーザーにデータのダウンロードを促し、保存するかどうかを尋ねることが一般的です。ただしモバイル端末など、ローカルにファイルを保存できない環境もあります。その場合は、クラウドへの保存を促すこともあれば、何も起きないこともあります。

＜小見出し＞
MIME sniffing
＜本文＞
状況によっては、コンテンツのContent-Typeが指定されていなかったり、ブラウザーにとって未知の値が指定されていることがあります。この場合、ブラウザーはコンテンツを実際に読み込み、その内容からMIMEタイプを推測します。この処理をMIME sniffingと呼びます。
従来、MIME sniffingの挙動はブラウザーの実装に依存していました。一部のブラウザーはURLに含まれる拡張子を手掛かりにしたり、Content-Typeの指定を無視してsniffingの推測結果を優先することがありました。これはセキュリティ上の問題を引き起こすことがあります。

＜memo＞
この問題への対応のため、X-Content-Type-Options: nosniffフィールドでsniffingを抑制する仕様が採用されました。現在では各ブラウザーもX-Content-Type-Optionsを解釈してsniffingを抑制するようになっています。
IE8 Security Part VI: Beta 2 Update MIME-Handling: Sniffing Opt-Out
https://docs.microsoft.com/ja-jp/archive/blogs/ie/ie8-security-part-vi-beta-2-update#mime-handling-sniffing-opt-out

＜本文＞
各ウェブブラウザーが独自に異なるMIME sniffingを行う状況では、サーバー側でセキュリティの問題を回避するための十分な対策を施すのが困難でした。そのような背景もあり、現在ではこの挙動はMIME sniffing仕様として文書化され、標準化されています。

＜memo＞
MIME Sniffing
https://mimesniff.spec.whatwg.org/

＜小見出し＞
charsetパラメーター
＜本文＞
text/htmlやapplication/javascriptなどのMIMEタイプは、オプションとしてcharsetパラメーターを持ちます。これは文字エンコーディングを指定するものです。文字エンコーディングについてはChapter2-5で詳しく説明します。
text/htmlにcharsetパラメーターを指定すると、たとえば〓08〓のようになります。

〓08〓text/htmlにcharsetパラメーターを指定
＜コード＞
text/html; charset=UTF-16
text/html; charset=Shift_JIS
text/html; charset=ISO-2022-JP

＜本文＞
本来、character setという言葉は文字集合を表すもので、文字エンコーディングを表す言葉はcharacter encodingですが、両者は歴史的によく混同されています。charsetパラメーターもこの例に漏れず、実際に指定する値は文字集合ではなく、文字エンコーディングの名称です。
